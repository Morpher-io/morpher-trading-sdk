var Zx = Object.defineProperty;
var f0 = (n) => {
  throw TypeError(n);
};
var Xx = (n, e, t) => e in n ? Zx(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t;
var T = (n, e, t) => Xx(n, typeof e != "symbol" ? e + "" : e, t), ol = (n, e, t) => e.has(n) || f0("Cannot " + t);
var m = (n, e, t) => (ol(n, e, "read from private field"), t ? t.call(n) : e.get(n)), _ = (n, e, t) => e.has(n) ? f0("Cannot add the same private member more than once") : e instanceof WeakSet ? e.add(n) : e.set(n, t), g = (n, e, t, r) => (ol(n, e, "write to private field"), r ? r.call(n, t) : e.set(n, t), t), z = (n, e, t) => (ol(n, e, "access private method"), t);
var Ua = (n, e, t, r) => ({
  set _(i) {
    g(n, e, i, t);
  },
  get _() {
    return m(n, e, r);
  }
});
function eg(n, e) {
  for (var t = 0; t < e.length; t++) {
    const r = e[t];
    if (typeof r != "string" && !Array.isArray(r)) {
      for (const i in r)
        if (i !== "default" && !(i in n)) {
          const s = Object.getOwnPropertyDescriptor(r, i);
          s && Object.defineProperty(n, i, s.get ? s : {
            enumerable: !0,
            get: () => r[i]
          });
        }
    }
  }
  return Object.freeze(Object.defineProperty(n, Symbol.toStringTag, { value: "Module" }));
}
var tg = Object.create, Rh = Object.defineProperty, ng = Object.getOwnPropertyDescriptor, Bh = Object.getOwnPropertyNames, rg = Object.getPrototypeOf, ig = Object.prototype.hasOwnProperty, kn = (n, e) => function() {
  return e || (0, n[Bh(n)[0]])((e = { exports: {} }).exports, e), e.exports;
}, sg = (n, e, t, r) => {
  if (e && typeof e == "object" || typeof e == "function") for (var i = Bh(e), s = 0, a = i.length, o; s < a; s++)
    o = i[s], !ig.call(n, o) && o !== t && Rh(n, o, {
      get: ((c) => e[c]).bind(null, o),
      enumerable: !(r = ng(e, o)) || r.enumerable
    });
  return n;
}, Ie = (n, e, t) => (t = n != null ? tg(rg(n)) : {}, sg(Rh(t, "default", {
  value: n,
  enumerable: !0
}), n)), _h = kn({ "../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/typeof.js"(n, e) {
  function t(r) {
    "@babel/helpers - typeof";
    return e.exports = t = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(i) {
      return typeof i;
    } : function(i) {
      return i && typeof Symbol == "function" && i.constructor === Symbol && i !== Symbol.prototype ? "symbol" : typeof i;
    }, e.exports.__esModule = !0, e.exports.default = e.exports, t(r);
  }
  e.exports = t, e.exports.__esModule = !0, e.exports.default = e.exports;
} }), ag = kn({ "../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/toPrimitive.js"(n, e) {
  var t = _h().default;
  function r(i, s) {
    if (t(i) != "object" || !i) return i;
    var a = i[Symbol.toPrimitive];
    if (a !== void 0) {
      var o = a.call(i, s || "default");
      if (t(o) != "object") return o;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (s === "string" ? String : Number)(i);
  }
  e.exports = r, e.exports.__esModule = !0, e.exports.default = e.exports;
} }), og = kn({ "../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/toPropertyKey.js"(n, e) {
  var t = _h().default, r = ag();
  function i(s) {
    var a = r(s, "string");
    return t(a) == "symbol" ? a : a + "";
  }
  e.exports = i, e.exports.__esModule = !0, e.exports.default = e.exports;
} }), Zi = kn({ "../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/defineProperty.js"(n, e) {
  var t = og();
  function r(i, s, a) {
    return (s = t(s)) in i ? Object.defineProperty(i, s, {
      value: a,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }) : i[s] = a, i;
  }
  e.exports = r, e.exports.__esModule = !0, e.exports.default = e.exports;
} }), cn = kn({ "../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/objectSpread2.js"(n, e) {
  var t = Zi();
  function r(s, a) {
    var o = Object.keys(s);
    if (Object.getOwnPropertySymbols) {
      var c = Object.getOwnPropertySymbols(s);
      a && (c = c.filter(function(u) {
        return Object.getOwnPropertyDescriptor(s, u).enumerable;
      })), o.push.apply(o, c);
    }
    return o;
  }
  function i(s) {
    for (var a = 1; a < arguments.length; a++) {
      var o = arguments[a] != null ? arguments[a] : {};
      a % 2 ? r(Object(o), !0).forEach(function(c) {
        t(s, c, o[c]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(s, Object.getOwnPropertyDescriptors(o)) : r(Object(o)).forEach(function(c) {
        Object.defineProperty(s, c, Object.getOwnPropertyDescriptor(o, c));
      });
    }
    return s;
  }
  e.exports = i, e.exports.__esModule = !0, e.exports.default = e.exports;
} });
function Su(n) {
  const e = {
    subscribe(t) {
      let r = null, i = !1, s = !1, a = !1;
      function o() {
        if (r === null) {
          a = !0;
          return;
        }
        s || (s = !0, typeof r == "function" ? r() : r && r.unsubscribe());
      }
      return r = n({
        next(c) {
          var u;
          i || (u = t.next) === null || u === void 0 || u.call(t, c);
        },
        error(c) {
          var u;
          i || (i = !0, (u = t.error) === null || u === void 0 || u.call(t, c), o());
        },
        complete() {
          var c;
          i || (i = !0, (c = t.complete) === null || c === void 0 || c.call(t), o());
        }
      }), a && o(), { unsubscribe: o };
    },
    pipe(...t) {
      return t.reduce(cg, e);
    }
  };
  return e;
}
function cg(n, e) {
  return e(n);
}
function ug(n) {
  const e = new AbortController();
  return new Promise((r, i) => {
    let s = !1;
    function a() {
      s || (s = !0, o.unsubscribe());
    }
    e.signal.addEventListener("abort", () => {
      i(e.signal.reason);
    });
    const o = n.subscribe({
      next(c) {
        s = !0, r(c), a();
      },
      error(c) {
        i(c);
      },
      complete() {
        e.abort(), a();
      }
    });
  });
}
function lg(n) {
  return (e) => {
    let t = 0, r = null;
    const i = [];
    function s() {
      r || (r = e.subscribe({
        next(o) {
          for (const u of i) {
            var c;
            (c = u.next) === null || c === void 0 || c.call(u, o);
          }
        },
        error(o) {
          for (const u of i) {
            var c;
            (c = u.error) === null || c === void 0 || c.call(u, o);
          }
        },
        complete() {
          for (const c of i) {
            var o;
            (o = c.complete) === null || o === void 0 || o.call(c);
          }
        }
      }));
    }
    function a() {
      if (t === 0 && r) {
        const o = r;
        r = null, o.unsubscribe();
      }
    }
    return Su((o) => (t++, i.push(o), s(), { unsubscribe() {
      t--, a();
      const c = i.findIndex((u) => u === o);
      c > -1 && i.splice(c, 1);
    } }));
  };
}
function dg(n) {
  let e = n;
  const t = [], r = (a) => {
    e !== void 0 && a.next(e), t.push(a);
  }, i = (a) => {
    t.splice(t.indexOf(a), 1);
  }, s = Su((a) => (r(a), () => {
    i(a);
  }));
  return s.next = (a) => {
    if (e !== a) {
      e = a;
      for (const o of t) o.next(a);
    }
  }, s.get = () => e, s;
}
function fg(n) {
  return Su((e) => {
    function t(i = 0, s = n.op) {
      const a = n.links[i];
      if (!a) throw new Error("No more links to execute - did you forget to add an ending link?");
      return a({
        op: s,
        next(c) {
          return t(i + 1, c);
        }
      });
    }
    return t().subscribe(e);
  });
}
function lo(n) {
  return !!n && !Array.isArray(n) && typeof n == "object";
}
var pg = Object.create, kh = Object.defineProperty, hg = Object.getOwnPropertyDescriptor, Lh = Object.getOwnPropertyNames, yg = Object.getPrototypeOf, mg = Object.prototype.hasOwnProperty, Ko = (n, e) => function() {
  return e || (0, n[Lh(n)[0]])((e = { exports: {} }).exports, e), e.exports;
}, bg = (n, e, t, r) => {
  if (e && typeof e == "object" || typeof e == "function") for (var i = Lh(e), s = 0, a = i.length, o; s < a; s++)
    o = i[s], !mg.call(n, o) && o !== t && kh(n, o, {
      get: ((c) => e[c]).bind(null, o),
      enumerable: !(r = hg(e, o)) || r.enumerable
    });
  return n;
}, Iu = (n, e, t) => (t = n != null ? pg(yg(n)) : {}, bg(kh(t, "default", {
  value: n,
  enumerable: !0
}), n));
const Mh = () => {
}, p0 = (n) => {
  Object.freeze && Object.freeze(n);
};
function Dh(n, e, t) {
  var r;
  const i = e.join(".");
  return (r = t[i]) !== null && r !== void 0 || (t[i] = new Proxy(Mh, {
    get(s, a) {
      if (!(typeof a != "string" || a === "then"))
        return Dh(n, [...e, a], t);
    },
    apply(s, a, o) {
      const c = e[e.length - 1];
      let u = {
        args: o,
        path: e
      };
      return c === "call" ? u = {
        args: o.length >= 2 ? [o[1]] : [],
        path: e.slice(0, -1)
      } : c === "apply" && (u = {
        args: o.length >= 2 ? o[1] : [],
        path: e.slice(0, -1)
      }), p0(u.args), p0(u.path), n(u);
    }
  })), t[i];
}
const xg = (n) => Dh(n, [], /* @__PURE__ */ Object.create(null)), gg = (n) => new Proxy(Mh, { get(e, t) {
  if (t !== "then")
    return n(t);
} });
var Uh = Ko({ "../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/typeof.js"(n, e) {
  function t(r) {
    "@babel/helpers - typeof";
    return e.exports = t = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(i) {
      return typeof i;
    } : function(i) {
      return i && typeof Symbol == "function" && i.constructor === Symbol && i !== Symbol.prototype ? "symbol" : typeof i;
    }, e.exports.__esModule = !0, e.exports.default = e.exports, t(r);
  }
  e.exports = t, e.exports.__esModule = !0, e.exports.default = e.exports;
} }), wg = Ko({ "../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/toPrimitive.js"(n, e) {
  var t = Uh().default;
  function r(i, s) {
    if (t(i) != "object" || !i) return i;
    var a = i[Symbol.toPrimitive];
    if (a !== void 0) {
      var o = a.call(i, s || "default");
      if (t(o) != "object") return o;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (s === "string" ? String : Number)(i);
  }
  e.exports = r, e.exports.__esModule = !0, e.exports.default = e.exports;
} }), Ag = Ko({ "../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/toPropertyKey.js"(n, e) {
  var t = Uh().default, r = wg();
  function i(s) {
    var a = r(s, "string");
    return t(a) == "symbol" ? a : a + "";
  }
  e.exports = i, e.exports.__esModule = !0, e.exports.default = e.exports;
} }), Fh = Ko({ "../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/defineProperty.js"(n, e) {
  var t = Ag();
  function r(i, s, a) {
    return (s = t(s)) in i ? Object.defineProperty(i, s, {
      value: a,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }) : i[s] = a, i;
  }
  e.exports = r, e.exports.__esModule = !0, e.exports.default = e.exports;
} }), af = Ko({ "../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/objectSpread2.js"(n, e) {
  var t = Fh();
  function r(s, a) {
    var o = Object.keys(s);
    if (Object.getOwnPropertySymbols) {
      var c = Object.getOwnPropertySymbols(s);
      a && (c = c.filter(function(u) {
        return Object.getOwnPropertyDescriptor(s, u).enumerable;
      })), o.push.apply(o, c);
    }
    return o;
  }
  function i(s) {
    for (var a = 1; a < arguments.length; a++) {
      var o = arguments[a] != null ? arguments[a] : {};
      a % 2 ? r(Object(o), !0).forEach(function(c) {
        t(s, c, o[c]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(s, Object.getOwnPropertyDescriptors(o)) : r(Object(o)).forEach(function(c) {
        Object.defineProperty(s, c, Object.getOwnPropertyDescriptor(o, c));
      });
    }
    return s;
  }
  e.exports = i, e.exports.__esModule = !0, e.exports.default = e.exports;
} });
Iu(af());
Iu(Fh());
var cc = Iu(af());
function Eg(n, e) {
  if ("error" in n) {
    const r = e.deserialize(n.error);
    return {
      ok: !1,
      error: (0, cc.default)((0, cc.default)({}, n), {}, { error: r })
    };
  }
  return {
    ok: !0,
    result: (0, cc.default)((0, cc.default)({}, n.result), (!n.result.type || n.result.type === "data") && {
      type: "data",
      data: e.deserialize(n.result.data)
    })
  };
}
var cl = class extends Error {
  constructor() {
    super("Unable to transform response from server");
  }
};
function vg(n, e) {
  let t;
  try {
    t = Eg(n, e);
  } catch {
    throw new cl();
  }
  if (!t.ok && (!lo(t.error.error) || typeof t.error.error.code != "number")) throw new cl();
  if (t.ok && !lo(t.result)) throw new cl();
  return t;
}
Iu(af());
var uc = Ie(Zi()), rs = Ie(cn());
function Tg(n) {
  return n instanceof qc;
}
function Pg(n) {
  return lo(n) && lo(n.error) && typeof n.error.code == "number" && typeof n.error.message == "string";
}
function Sg(n, e) {
  return typeof n == "string" ? n : lo(n) && typeof n.message == "string" ? n.message : e;
}
var qc = class _c extends Error {
  constructor(e, t) {
    var r, i;
    const s = t == null ? void 0 : t.cause;
    super(e, { cause: s }), (0, uc.default)(this, "cause", void 0), (0, uc.default)(this, "shape", void 0), (0, uc.default)(this, "data", void 0), (0, uc.default)(this, "meta", void 0), this.meta = t == null ? void 0 : t.meta, this.cause = s, this.shape = t == null || (r = t.result) === null || r === void 0 ? void 0 : r.error, this.data = t == null || (i = t.result) === null || i === void 0 ? void 0 : i.error.data, this.name = "TRPCClientError", Object.setPrototypeOf(this, _c.prototype);
  }
  static from(e, t = {}) {
    const r = e;
    return Tg(r) ? (t.meta && (r.meta = (0, rs.default)((0, rs.default)({}, r.meta), t.meta)), r) : Pg(r) ? new _c(r.error.message, (0, rs.default)((0, rs.default)({}, t), {}, { result: r })) : new _c(Sg(r, "Unknown error"), (0, rs.default)((0, rs.default)({}, t), {}, { cause: r }));
  }
};
function Ig(n) {
  const e = n;
  return e ? "input" in e ? e : {
    input: e,
    output: e
  } : {
    input: {
      serialize: (t) => t,
      deserialize: (t) => t
    },
    output: {
      serialize: (t) => t,
      deserialize: (t) => t
    }
  };
}
const h0 = (n) => typeof n == "function";
function Cg(n) {
  if (n) return n;
  if (typeof window < "u" && h0(window.fetch)) return window.fetch;
  if (typeof globalThis < "u" && h0(globalThis.fetch)) return globalThis.fetch;
  throw new Error("No fetch implementation found");
}
var no = Ie(cn());
function Og(n) {
  return {
    url: n.url.toString(),
    fetch: n.fetch,
    transformer: Ig(n.transformer),
    methodOverride: n.methodOverride
  };
}
function Ng(n) {
  const e = {};
  for (let t = 0; t < n.length; t++) {
    const r = n[t];
    e[t] = r;
  }
  return e;
}
const Rg = {
  query: "GET",
  mutation: "POST",
  subscription: "PATCH"
};
function Gh(n) {
  return "input" in n ? n.transformer.input.serialize(n.input) : Ng(n.inputs.map((e) => n.transformer.input.serialize(e)));
}
const Hh = (n) => {
  const e = n.url.split("?");
  let r = e[0].replace(/\/$/, "") + "/" + n.path;
  const i = [];
  if (e[1] && i.push(e[1]), "inputs" in n && i.push("batch=1"), n.type === "query" || n.type === "subscription") {
    const s = Gh(n);
    s !== void 0 && n.methodOverride !== "POST" && i.push(`input=${encodeURIComponent(JSON.stringify(s))}`);
  }
  return i.length && (r += "?" + i.join("&")), r;
}, Bg = (n) => {
  if (n.type === "query" && n.methodOverride !== "POST") return;
  const e = Gh(n);
  return e !== void 0 ? JSON.stringify(e) : void 0;
}, _g = (n) => Dg((0, no.default)((0, no.default)({}, n), {}, {
  contentTypeHeader: "application/json",
  getUrl: Hh,
  getBody: Bg
}));
var kg = class extends Error {
  constructor() {
    const n = "AbortError";
    super(n), this.name = n, this.message = n;
  }
};
const Lg = (n) => {
  var e;
  if (n != null && n.aborted)
    throw (e = n.throwIfAborted) === null || e === void 0 || e.call(n), typeof DOMException < "u" ? new DOMException("AbortError", "AbortError") : new kg();
};
async function Mg(n) {
  var e;
  Lg(n.signal);
  const t = n.getUrl(n), r = n.getBody(n), { type: i } = n, s = await (async () => {
    const o = await n.headers();
    return Symbol.iterator in o ? Object.fromEntries(o) : o;
  })(), a = (0, no.default)((0, no.default)((0, no.default)({}, n.contentTypeHeader ? { "content-type": n.contentTypeHeader } : {}), n.trpcAcceptHeader ? { "trpc-accept": n.trpcAcceptHeader } : void 0), s);
  return Cg(n.fetch)(t, {
    method: (e = n.methodOverride) !== null && e !== void 0 ? e : Rg[i],
    signal: n.signal,
    body: r,
    headers: a
  });
}
async function Dg(n) {
  const e = {}, t = await Mg(n);
  e.response = t;
  const r = await t.json();
  return e.responseJSON = r, {
    json: r,
    meta: e
  };
}
Ie(cn());
const y0 = () => {
  throw new Error("Something went wrong. Please submit an issue at https://github.com/trpc/trpc/issues/new");
};
function m0(n) {
  let e = null, t = null;
  const r = () => {
    clearTimeout(t), t = null, e = null;
  };
  function i(o) {
    const c = [[]];
    let u = 0;
    for (; ; ) {
      const f = o[u];
      if (!f) break;
      const p = c[c.length - 1];
      if (f.aborted) {
        var l;
        (l = f.reject) === null || l === void 0 || l.call(f, new Error("Aborted")), u++;
        continue;
      }
      if (n.validate(p.concat(f).map((h) => h.key))) {
        p.push(f), u++;
        continue;
      }
      if (p.length === 0) {
        var d;
        (d = f.reject) === null || d === void 0 || d.call(f, new Error("Input is too big for a single dispatch")), u++;
        continue;
      }
      c.push([]);
    }
    return c;
  }
  function s() {
    const o = i(e);
    r();
    for (const c of o) {
      if (!c.length) continue;
      const u = { items: c };
      for (const d of c) d.batch = u;
      n.fetch(u.items.map((d) => d.key)).then(async (d) => {
        await Promise.all(d.map(async (p, y) => {
          const h = u.items[y];
          try {
            var b;
            const w = await Promise.resolve(p);
            (b = h.resolve) === null || b === void 0 || b.call(h, w);
          } catch (w) {
            var x;
            (x = h.reject) === null || x === void 0 || x.call(h, w);
          }
          h.batch = null, h.reject = null, h.resolve = null;
        }));
        for (const p of u.items) {
          var f;
          (f = p.reject) === null || f === void 0 || f.call(p, new Error("Missing result")), p.batch = null;
        }
      }).catch((d) => {
        for (const p of u.items) {
          var f;
          (f = p.reject) === null || f === void 0 || f.call(p, d), p.batch = null;
        }
      });
    }
  }
  function a(o) {
    var c;
    const u = {
      aborted: !1,
      key: o,
      batch: null,
      resolve: y0,
      reject: y0
    }, l = new Promise((d, f) => {
      var p;
      u.reject = f, u.resolve = d, (p = e) !== null && p !== void 0 || (e = []), e.push(u);
    });
    return (c = t) !== null && c !== void 0 || (t = setTimeout(s)), l;
  }
  return { load: a };
}
function Ug(...n) {
  const e = new AbortController(), t = n.length;
  let r = 0;
  const i = () => {
    ++r === t && e.abort();
  };
  for (const s of n) s != null && s.aborted ? i() : s == null || s.addEventListener("abort", i, { once: !0 });
  return e.signal;
}
var lc = Ie(cn());
function Fg(n) {
  var e, t;
  const r = Og(n), i = (e = n.maxURLLength) !== null && e !== void 0 ? e : 1 / 0, s = (t = n.maxItems) !== null && t !== void 0 ? t : 1 / 0;
  return () => {
    const a = (l) => ({
      validate(d) {
        if (i === 1 / 0 && s === 1 / 0) return !0;
        if (d.length > s) return !1;
        const f = d.map((h) => h.path).join(","), p = d.map((h) => h.input);
        return Hh((0, lc.default)((0, lc.default)({}, r), {}, {
          type: l,
          path: f,
          inputs: p,
          signal: null
        })).length <= i;
      },
      async fetch(d) {
        const f = d.map((w) => w.path).join(","), p = d.map((w) => w.input), y = Ug(...d.map((w) => w.signal)), h = await _g((0, lc.default)((0, lc.default)({}, r), {}, {
          path: f,
          inputs: p,
          type: l,
          headers() {
            return n.headers ? typeof n.headers == "function" ? n.headers({ opList: d }) : n.headers : {};
          },
          signal: y
        }));
        return (Array.isArray(h.json) ? h.json : d.map(() => h.json)).map((w) => ({
          meta: h.meta,
          json: w
        }));
      }
    }), o = m0(a("query")), c = m0(a("mutation")), u = {
      query: o,
      mutation: c
    };
    return ({ op: l }) => Su((d) => {
      /* istanbul ignore if -- @preserve */
      if (l.type === "subscription") throw new Error("Subscriptions are unsupported by `httpLink` - use `httpSubscriptionLink` or `wsLink`");
      const p = u[l.type].load(l);
      let y;
      return p.then((h) => {
        y = h;
        const b = vg(h.json, r.transformer.output);
        if (!b.ok) {
          d.error(qc.from(b.error, { meta: h.meta }));
          return;
        }
        d.next({
          context: h.meta,
          result: b.result
        }), d.complete();
      }).catch((h) => {
        d.error(qc.from(h, { meta: y == null ? void 0 : y.meta }));
      }), () => {
      };
    });
  };
}
Ie(cn());
const $h = (n, ...e) => typeof n == "function" ? n(...e) : n;
Ie(Zi());
function Gg() {
  let n, e;
  return {
    promise: new Promise((r, i) => {
      n = r, e = i;
    }),
    resolve: n,
    reject: e
  };
}
async function Hg(n) {
  const e = await $h(n.url);
  if (!n.connectionParams) return e;
  const r = `${e.includes("?") ? "&" : "?"}connectionParams=1`;
  return e + r;
}
async function $g(n) {
  const e = {
    method: "connectionParams",
    data: await $h(n)
  };
  return JSON.stringify(e);
}
Ie(Zi());
var ii = Ie(Zi());
function Vg(n) {
  const { promise: e, resolve: t, reject: r } = Gg();
  return n.addEventListener("open", () => {
    n.removeEventListener("error", r), t();
  }), n.addEventListener("error", r), e;
}
function zg(n, { intervalMs: e, pongTimeoutMs: t }) {
  let r, i;
  function s() {
    r = setTimeout(() => {
      n.send("PING"), i = setTimeout(() => {
        n.close();
      }, t);
    }, e);
  }
  function a() {
    clearTimeout(r), s();
  }
  function o() {
    clearTimeout(i), a();
  }
  n.addEventListener("open", s), n.addEventListener("message", ({ data: c }) => {
    clearTimeout(r), s(), c === "PONG" && o();
  }), n.addEventListener("close", () => {
    clearTimeout(r), clearTimeout(i);
  });
}
var jg = class Jl {
  constructor(e) {
    var t;
    if ((0, ii.default)(this, "id", ++Jl.connectCount), (0, ii.default)(this, "WebSocketPonyfill", void 0), (0, ii.default)(this, "urlOptions", void 0), (0, ii.default)(this, "keepAliveOpts", void 0), (0, ii.default)(this, "wsObservable", dg(null)), (0, ii.default)(this, "openPromise", null), this.WebSocketPonyfill = (t = e.WebSocketPonyfill) !== null && t !== void 0 ? t : WebSocket, !this.WebSocketPonyfill) throw new Error("No WebSocket implementation found - you probably don't want to use this on the server, but if you do you need to pass a `WebSocket`-ponyfill");
    this.urlOptions = e.urlOptions, this.keepAliveOpts = e.keepAlive;
  }
  get ws() {
    return this.wsObservable.get();
  }
  set ws(e) {
    this.wsObservable.next(e);
  }
  /**
  * Checks if the WebSocket connection is open and ready to communicate.
  */
  isOpen() {
    return !!this.ws && this.ws.readyState === this.WebSocketPonyfill.OPEN && !this.openPromise;
  }
  /**
  * Checks if the WebSocket connection is closed or in the process of closing.
  */
  isClosed() {
    return !!this.ws && (this.ws.readyState === this.WebSocketPonyfill.CLOSING || this.ws.readyState === this.WebSocketPonyfill.CLOSED);
  }
  async open() {
    var e = this;
    if (e.openPromise) return e.openPromise;
    e.id = ++Jl.connectCount;
    const t = Hg(e.urlOptions).then((r) => new e.WebSocketPonyfill(r));
    e.openPromise = t.then(async (r) => {
      e.ws = r, r.addEventListener("message", function({ data: i }) {
        i === "PING" && this.send("PONG");
      }), e.keepAliveOpts.enabled && zg(r, e.keepAliveOpts), r.addEventListener("close", () => {
        e.ws === r && (e.ws = null);
      }), await Vg(r), e.urlOptions.connectionParams && r.send(await $g(e.urlOptions.connectionParams));
    });
    try {
      await e.openPromise;
    } finally {
      e.openPromise = null;
    }
  }
  /**
  * Closes the WebSocket connection gracefully.
  * Waits for any ongoing open operation to complete before closing.
  */
  async close() {
    var e = this;
    try {
      await e.openPromise;
    } finally {
      var t;
      (t = e.ws) === null || t === void 0 || t.close();
    }
  }
};
(0, ii.default)(jg, "connectCount", 0);
Ie(Zi());
Ie(cn());
var ul = Ie(Zi()), b0 = Ie(cn()), Wg = class {
  constructor(n) {
    (0, ul.default)(this, "links", void 0), (0, ul.default)(this, "runtime", void 0), (0, ul.default)(this, "requestId", void 0), this.requestId = 0, this.runtime = {}, this.links = n.links.map((e) => e(this.runtime));
  }
  $request(n) {
    var e;
    return fg({
      links: this.links,
      op: (0, b0.default)((0, b0.default)({}, n), {}, {
        context: (e = n.context) !== null && e !== void 0 ? e : {},
        id: ++this.requestId
      })
    }).pipe(lg());
  }
  async requestAsPromise(n) {
    var e = this;
    try {
      const t = e.$request(n);
      return (await ug(t)).result.data;
    } catch (t) {
      throw qc.from(t);
    }
  }
  query(n, e, t) {
    return this.requestAsPromise({
      type: "query",
      path: n,
      input: e,
      context: t == null ? void 0 : t.context,
      signal: t == null ? void 0 : t.signal
    });
  }
  mutation(n, e, t) {
    return this.requestAsPromise({
      type: "mutation",
      path: n,
      input: e,
      context: t == null ? void 0 : t.context,
      signal: t == null ? void 0 : t.signal
    });
  }
  subscription(n, e, t) {
    return this.$request({
      type: "subscription",
      path: n,
      input: e,
      context: t.context,
      signal: t.signal
    }).subscribe({
      next(i) {
        switch (i.result.type) {
          case "state": {
            var s;
            (s = t.onConnectionStateChange) === null || s === void 0 || s.call(t, i.result);
            break;
          }
          case "started": {
            var a;
            (a = t.onStarted) === null || a === void 0 || a.call(t, { context: i.context });
            break;
          }
          case "stopped": {
            var o;
            (o = t.onStopped) === null || o === void 0 || o.call(t);
            break;
          }
          case "data":
          case void 0: {
            var c;
            (c = t.onData) === null || c === void 0 || c.call(t, i.result.data);
            break;
          }
        }
      },
      error(i) {
        var s;
        (s = t.onError) === null || s === void 0 || s.call(t, i);
      },
      complete() {
        var i;
        (i = t.onComplete) === null || i === void 0 || i.call(t);
      }
    });
  }
};
const Kg = Symbol.for("trpc_untypedClient"), Qg = {
  query: "query",
  mutate: "mutation",
  subscribe: "subscription"
}, qg = (n) => Qg[n];
function Jg(n) {
  const e = xg(({ path: t, args: r }) => {
    const i = [...t], s = qg(i.pop()), a = i.join(".");
    return n[s](a, ...r);
  });
  return gg((t) => t === Kg ? n : e[t]);
}
function Yg(n) {
  const e = new Wg(n);
  return Jg(e);
}
Ie(cn());
Ie(cn());
var Zg = kn({ "../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/asyncIterator.js"(n, e) {
  function t(i) {
    var s, a, o, c = 2;
    for (typeof Symbol < "u" && (a = Symbol.asyncIterator, o = Symbol.iterator); c--; ) {
      if (a && (s = i[a]) != null) return s.call(i);
      if (o && (s = i[o]) != null) return new r(s.call(i));
      a = "@@asyncIterator", o = "@@iterator";
    }
    throw new TypeError("Object is not async iterable");
  }
  function r(i) {
    function s(a) {
      if (Object(a) !== a) return Promise.reject(new TypeError(a + " is not an object."));
      var o = a.done;
      return Promise.resolve(a.value).then(function(c) {
        return {
          value: c,
          done: o
        };
      });
    }
    return r = function(o) {
      this.s = o, this.n = o.next;
    }, r.prototype = {
      s: null,
      n: null,
      next: function() {
        return s(this.n.apply(this.s, arguments));
      },
      return: function(o) {
        var c = this.s.return;
        return c === void 0 ? Promise.resolve({
          value: o,
          done: !0
        }) : s(c.apply(this.s, arguments));
      },
      throw: function(o) {
        var c = this.s.return;
        return c === void 0 ? Promise.reject(o) : s(c.apply(this.s, arguments));
      }
    }, new r(i);
  }
  e.exports = t, e.exports.__esModule = !0, e.exports.default = e.exports;
} });
Ie(Zg());
Ie(cn());
var Xg = kn({ "../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/usingCtx.js"(n, e) {
  function t() {
    var r = typeof SuppressedError == "function" ? SuppressedError : function(o, c) {
      var u = Error();
      return u.name = "SuppressedError", u.error = o, u.suppressed = c, u;
    }, i = {}, s = [];
    function a(o, c) {
      if (c != null) {
        if (Object(c) !== c) throw new TypeError("using declarations can only be used with objects, functions, null, or undefined.");
        if (o) var u = c[Symbol.asyncDispose || Symbol.for("Symbol.asyncDispose")];
        if (u === void 0 && (u = c[Symbol.dispose || Symbol.for("Symbol.dispose")], o)) var l = u;
        if (typeof u != "function") throw new TypeError("Object is not disposable.");
        l && (u = function() {
          try {
            l.call(c);
          } catch (f) {
            return Promise.reject(f);
          }
        }), s.push({
          v: c,
          d: u,
          a: o
        });
      } else o && s.push({
        d: c,
        a: o
      });
      return c;
    }
    return {
      e: i,
      u: a.bind(null, !1),
      a: a.bind(null, !0),
      d: function() {
        var c, u = this.e, l = 0;
        function d() {
          for (; c = s.pop(); ) try {
            if (!c.a && l === 1) return l = 0, s.push(c), Promise.resolve().then(d);
            if (c.d) {
              var p = c.d.call(c.v);
              if (c.a) return l |= 2, Promise.resolve(p).then(d, f);
            } else l |= 1;
          } catch (y) {
            return f(y);
          }
          if (l === 1) return u !== i ? Promise.reject(u) : Promise.resolve();
          if (u !== i) throw u;
        }
        function f(p) {
          return u = u !== i ? new r(p, u) : p, d();
        }
        return d();
      }
    };
  }
  e.exports = t, e.exports.__esModule = !0, e.exports.default = e.exports;
} }), Vh = kn({ "../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/OverloadYield.js"(n, e) {
  function t(r, i) {
    this.v = r, this.k = i;
  }
  e.exports = t, e.exports.__esModule = !0, e.exports.default = e.exports;
} }), e2 = kn({ "../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/awaitAsyncGenerator.js"(n, e) {
  var t = Vh();
  function r(i) {
    return new t(i, 0);
  }
  e.exports = r, e.exports.__esModule = !0, e.exports.default = e.exports;
} }), t2 = kn({ "../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/wrapAsyncGenerator.js"(n, e) {
  var t = Vh();
  function r(s) {
    return function() {
      return new i(s.apply(this, arguments));
    };
  }
  function i(s) {
    var a, o;
    function c(l, d) {
      try {
        var f = s[l](d), p = f.value, y = p instanceof t;
        Promise.resolve(y ? p.v : p).then(function(h) {
          if (y) {
            var b = l === "return" ? "return" : "next";
            if (!p.k || h.done) return c(b, h);
            h = s[b](h).value;
          }
          u(f.done ? "return" : "normal", h);
        }, function(h) {
          c("throw", h);
        });
      } catch (h) {
        u("throw", h);
      }
    }
    function u(l, d) {
      switch (l) {
        case "return":
          a.resolve({
            value: d,
            done: !0
          });
          break;
        case "throw":
          a.reject(d);
          break;
        default:
          a.resolve({
            value: d,
            done: !1
          });
      }
      (a = a.next) ? c(a.key, a.arg) : o = null;
    }
    this._invoke = function(l, d) {
      return new Promise(function(f, p) {
        var y = {
          key: l,
          arg: d,
          resolve: f,
          reject: p,
          next: null
        };
        o ? o = o.next = y : (a = o = y, c(l, d));
      });
    }, typeof s.return != "function" && (this.return = void 0);
  }
  i.prototype[typeof Symbol == "function" && Symbol.asyncIterator || "@@asyncIterator"] = function() {
    return this;
  }, i.prototype.next = function(s) {
    return this._invoke("next", s);
  }, i.prototype.throw = function(s) {
    return this._invoke("throw", s);
  }, i.prototype.return = function(s) {
    return this._invoke("return", s);
  }, e.exports = r, e.exports.__esModule = !0, e.exports.default = e.exports;
} });
Ie(Xg());
Ie(e2());
Ie(t2());
Ie(cn());
function st(n) {
  return n === null ? "null" : Array.isArray(n) ? "array" : typeof n;
}
function si(n) {
  return st(n) === "object";
}
function n2(n) {
  return Array.isArray(n) && // must be at least one error
  n.length > 0 && // error has at least a message
  n.every((e) => "message" in e);
}
function x0(n, e) {
  return n.length < 124 ? n : e;
}
const r2 = "graphql-transport-ws";
var Ct = /* @__PURE__ */ ((n) => (n[n.InternalServerError = 4500] = "InternalServerError", n[n.InternalClientError = 4005] = "InternalClientError", n[n.BadRequest = 4400] = "BadRequest", n[n.BadResponse = 4004] = "BadResponse", n[n.Unauthorized = 4401] = "Unauthorized", n[n.Forbidden = 4403] = "Forbidden", n[n.SubprotocolNotAcceptable = 4406] = "SubprotocolNotAcceptable", n[n.ConnectionInitialisationTimeout = 4408] = "ConnectionInitialisationTimeout", n[n.ConnectionAcknowledgementTimeout = 4504] = "ConnectionAcknowledgementTimeout", n[n.SubscriberAlreadyExists = 4409] = "SubscriberAlreadyExists", n[n.TooManyInitialisationRequests = 4429] = "TooManyInitialisationRequests", n))(Ct || {}), Ot = /* @__PURE__ */ ((n) => (n.ConnectionInit = "connection_init", n.ConnectionAck = "connection_ack", n.Ping = "ping", n.Pong = "pong", n.Subscribe = "subscribe", n.Next = "next", n.Error = "error", n.Complete = "complete", n))(Ot || {});
function zh(n) {
  if (!si(n))
    throw new Error(
      `Message is expected to be an object, but got ${st(n)}`
    );
  if (!n.type)
    throw new Error("Message is missing the 'type' property");
  if (typeof n.type != "string")
    throw new Error(
      `Message is expects the 'type' property to be a string, but got ${st(
        n.type
      )}`
    );
  switch (n.type) {
    case "connection_init":
    case "connection_ack":
    case "ping":
    case "pong": {
      if (n.payload != null && !si(n.payload))
        throw new Error(
          `"${n.type}" message expects the 'payload' property to be an object or nullish or missing, but got "${n.payload}"`
        );
      break;
    }
    case "subscribe": {
      if (typeof n.id != "string")
        throw new Error(
          `"${n.type}" message expects the 'id' property to be a string, but got ${st(
            n.id
          )}`
        );
      if (!n.id)
        throw new Error(
          `"${n.type}" message requires a non-empty 'id' property`
        );
      if (!si(n.payload))
        throw new Error(
          `"${n.type}" message expects the 'payload' property to be an object, but got ${st(
            n.payload
          )}`
        );
      if (typeof n.payload.query != "string")
        throw new Error(
          `"${n.type}" message payload expects the 'query' property to be a string, but got ${st(
            n.payload.query
          )}`
        );
      if (n.payload.variables != null && !si(n.payload.variables))
        throw new Error(
          `"${n.type}" message payload expects the 'variables' property to be a an object or nullish or missing, but got ${st(
            n.payload.variables
          )}`
        );
      if (n.payload.operationName != null && st(n.payload.operationName) !== "string")
        throw new Error(
          `"${n.type}" message payload expects the 'operationName' property to be a string or nullish or missing, but got ${st(
            n.payload.operationName
          )}`
        );
      if (n.payload.extensions != null && !si(n.payload.extensions))
        throw new Error(
          `"${n.type}" message payload expects the 'extensions' property to be a an object or nullish or missing, but got ${st(
            n.payload.extensions
          )}`
        );
      break;
    }
    case "next": {
      if (typeof n.id != "string")
        throw new Error(
          `"${n.type}" message expects the 'id' property to be a string, but got ${st(
            n.id
          )}`
        );
      if (!n.id)
        throw new Error(
          `"${n.type}" message requires a non-empty 'id' property`
        );
      if (!si(n.payload))
        throw new Error(
          `"${n.type}" message expects the 'payload' property to be an object, but got ${st(
            n.payload
          )}`
        );
      break;
    }
    case "error": {
      if (typeof n.id != "string")
        throw new Error(
          `"${n.type}" message expects the 'id' property to be a string, but got ${st(
            n.id
          )}`
        );
      if (!n.id)
        throw new Error(
          `"${n.type}" message requires a non-empty 'id' property`
        );
      if (!n2(n.payload))
        throw new Error(
          `"${n.type}" message expects the 'payload' property to be an array of GraphQL errors, but got ${JSON.stringify(
            n.payload
          )}`
        );
      break;
    }
    case "complete": {
      if (typeof n.id != "string")
        throw new Error(
          `"${n.type}" message expects the 'id' property to be a string, but got ${st(
            n.id
          )}`
        );
      if (!n.id)
        throw new Error(
          `"${n.type}" message requires a non-empty 'id' property`
        );
      break;
    }
    default:
      throw new Error(`Invalid message 'type' property "${n.type}"`);
  }
  return n;
}
function i2(n, e) {
  return zh(
    typeof n == "string" ? JSON.parse(n, e) : n
  );
}
function Fa(n, e) {
  return zh(n), JSON.stringify(n, e);
}
function g0(n) {
  const {
    url: e,
    connectionParams: t,
    lazy: r = !0,
    onNonLazyError: i = console.error,
    lazyCloseTimeout: s = 0,
    keepAlive: a = 0,
    disablePong: o,
    connectionAckWaitTimeout: c = 0,
    retryAttempts: u = 5,
    retryWait: l = async function(P) {
      const S = Math.pow(2, P);
      await new Promise(
        (k) => setTimeout(
          k,
          S * 1e3 + // add random timeout from 300ms to 3s
          Math.floor(Math.random() * 2700 + 300)
        )
      );
    },
    shouldRetry: d = ll,
    on: f,
    webSocketImpl: p,
    /**
     * Generates a v4 UUID to be used as the ID using `Math`
     * as the random number generator. Supply your own generator
     * in case you need more uniqueness.
     *
     * Reference: https://gist.github.com/jed/982883
     */
    generateID: y = function() {
      return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (P) => {
        const S = Math.random() * 16 | 0;
        return (P == "x" ? S : S & 3 | 8).toString(16);
      });
    },
    jsonMessageReplacer: h,
    jsonMessageReviver: b
  } = n;
  let x;
  if (p) {
    if (!a2(p))
      throw new Error("Invalid WebSocket implementation provided");
    x = p;
  } else typeof WebSocket < "u" ? x = WebSocket : typeof global < "u" ? x = global.WebSocket || // @ts-expect-error: Support more browsers
  global.MozWebSocket : typeof window < "u" && (x = window.WebSocket || // @ts-expect-error: Support more browsers
  window.MozWebSocket);
  if (!x)
    throw new Error(
      "WebSocket implementation missing; on Node you can `import WebSocket from 'ws';` and pass `webSocketImpl: WebSocket` to `createClient`"
    );
  const w = x, E = (() => {
    const M = /* @__PURE__ */ (() => {
      const S = {};
      return {
        on(k, D) {
          return S[k] = D, () => {
            delete S[k];
          };
        },
        emit(k) {
          var D;
          "id" in k && ((D = S[k.id]) == null || D.call(S, k));
        }
      };
    })(), P = {
      connecting: f != null && f.connecting ? [f.connecting] : [],
      opened: f != null && f.opened ? [f.opened] : [],
      connected: f != null && f.connected ? [f.connected] : [],
      ping: f != null && f.ping ? [f.ping] : [],
      pong: f != null && f.pong ? [f.pong] : [],
      message: f != null && f.message ? [M.emit, f.message] : [M.emit],
      closed: f != null && f.closed ? [f.closed] : [],
      error: f != null && f.error ? [f.error] : []
    };
    return {
      onMessage: M.on,
      on(S, k) {
        const D = P[S];
        return D.push(k), () => {
          D.splice(D.indexOf(k), 1);
        };
      },
      emit(S, ...k) {
        for (const D of [...P[S]])
          D(...k);
      }
    };
  })();
  function N(M) {
    const P = [
      // errors are fatal and more critical than close events, throw them first
      E.on("error", (S) => {
        P.forEach((k) => k()), M(S);
      }),
      // closes can be graceful and not fatal, throw them second (if error didnt throw)
      E.on("closed", (S) => {
        P.forEach((k) => k()), M(S);
      })
    ];
  }
  let I, B = 0, U, C = !1, v = 0, L = !1;
  async function O() {
    clearTimeout(U);
    const [M, P] = await (I ?? (I = new Promise(
      (D, $) => (async () => {
        if (C) {
          if (await l(v), !B)
            return I = void 0, $({ code: 1e3, reason: "All Subscriptions Gone" });
          v++;
        }
        E.emit("connecting", C);
        const H = new w(
          typeof e == "function" ? await e() : e,
          r2
        );
        let W, X;
        function ie() {
          isFinite(a) && a > 0 && (clearTimeout(X), X = setTimeout(() => {
            H.readyState === w.OPEN && (H.send(Fa({ type: Ot.Ping })), E.emit("ping", !1, void 0));
          }, a));
        }
        N((Q) => {
          I = void 0, clearTimeout(W), clearTimeout(X), $(Q), Q instanceof w0 && (H.close(4499, "Terminated"), H.onerror = null, H.onclose = null);
        }), H.onerror = (Q) => E.emit("error", Q), H.onclose = (Q) => E.emit("closed", Q), H.onopen = async () => {
          try {
            E.emit("opened", H);
            const Q = typeof t == "function" ? await t() : t;
            if (H.readyState !== w.OPEN) return;
            H.send(
              Fa(
                Q ? {
                  type: Ot.ConnectionInit,
                  payload: Q
                } : {
                  type: Ot.ConnectionInit
                  // payload is completely absent if not provided
                },
                h
              )
            ), isFinite(c) && c > 0 && (W = setTimeout(() => {
              H.close(
                Ct.ConnectionAcknowledgementTimeout,
                "Connection acknowledgement timeout"
              );
            }, c)), ie();
          } catch (Q) {
            E.emit("error", Q), H.close(
              Ct.InternalClientError,
              x0(
                Q instanceof Error ? Q.message : String(Q),
                "Internal client error"
              )
            );
          }
        };
        let se = !1;
        H.onmessage = ({ data: Q }) => {
          try {
            const Z = i2(Q, b);
            if (E.emit("message", Z), Z.type === "ping" || Z.type === "pong") {
              E.emit(Z.type, !0, Z.payload), Z.type === "pong" ? ie() : o || (H.send(
                Fa(
                  Z.payload ? {
                    type: Ot.Pong,
                    payload: Z.payload
                  } : {
                    type: Ot.Pong
                    // payload is completely absent if not provided
                  }
                )
              ), E.emit("pong", !1, Z.payload));
              return;
            }
            if (se) return;
            if (Z.type !== Ot.ConnectionAck)
              throw new Error(
                `First message cannot be of type ${Z.type}`
              );
            clearTimeout(W), se = !0, E.emit("connected", H, Z.payload, C), C = !1, v = 0, D([
              H,
              new Promise((Ce, Je) => N(Je))
            ]);
          } catch (Z) {
            H.onmessage = null, E.emit("error", Z), H.close(
              Ct.BadResponse,
              x0(
                Z instanceof Error ? Z.message : String(Z),
                "Bad response"
              )
            );
          }
        };
      })()
    )));
    M.readyState === w.CLOSING && await P;
    let S = () => {
    };
    const k = new Promise((D) => S = D);
    return [
      M,
      S,
      Promise.race([
        // wait for
        k.then(() => {
          if (!B) {
            const D = () => M.close(1e3, "Normal Closure");
            isFinite(s) && s > 0 ? U = setTimeout(() => {
              M.readyState === w.OPEN && D();
            }, s) : D();
          }
        }),
        // or
        P
      ])
    ];
  }
  function R(M) {
    if (ll(M) && (s2(M.code) || [
      Ct.InternalServerError,
      Ct.InternalClientError,
      Ct.BadRequest,
      Ct.BadResponse,
      Ct.Unauthorized,
      // CloseCode.Forbidden, might grant access out after retry
      Ct.SubprotocolNotAcceptable,
      // CloseCode.ConnectionInitialisationTimeout, might not time out after retry
      // CloseCode.ConnectionAcknowledgementTimeout, might not time out after retry
      Ct.SubscriberAlreadyExists,
      Ct.TooManyInitialisationRequests
      // 4499, // Terminated, probably because the socket froze, we want to retry
    ].includes(M.code)))
      throw M;
    if (L) return !1;
    if (ll(M) && M.code === 1e3)
      return B > 0;
    if (!u || v >= u || !d(M)) throw M;
    return C = !0;
  }
  r || (async () => {
    for (B++; ; )
      try {
        const [, , M] = await O();
        await M;
      } catch (M) {
        try {
          if (!R(M)) return;
        } catch (P) {
          return i == null ? void 0 : i(P);
        }
      }
  })();
  function F(M, P) {
    const S = y(M);
    let k = !1, D = !1, $ = () => {
      B--, k = !0;
    };
    return (async () => {
      for (B++; ; )
        try {
          const [H, W, X] = await O();
          if (k) return W();
          const ie = E.onMessage(S, (se) => {
            switch (se.type) {
              case Ot.Next: {
                P.next(se.payload);
                return;
              }
              case Ot.Error: {
                D = !0, k = !0, P.error(se.payload), $();
                return;
              }
              case Ot.Complete: {
                k = !0, $();
                return;
              }
            }
          });
          H.send(
            Fa(
              {
                id: S,
                type: Ot.Subscribe,
                payload: M
              },
              h
            )
          ), $ = () => {
            !k && H.readyState === w.OPEN && H.send(
              Fa(
                {
                  id: S,
                  type: Ot.Complete
                },
                h
              )
            ), B--, k = !0, W();
          }, await X.finally(ie);
          return;
        } catch (H) {
          if (!R(H)) return;
        }
    })().then(() => {
      D || P.complete();
    }).catch((H) => {
      P.error(H);
    }), () => {
      k || $();
    };
  }
  return {
    on: E.on,
    subscribe: F,
    iterate(M) {
      const P = [], S = {
        done: !1,
        error: null,
        resolve: () => {
        }
      }, k = F(M, {
        next($) {
          P.push($), S.resolve();
        },
        error($) {
          S.done = !0, S.error = $, S.resolve();
        },
        complete() {
          S.done = !0, S.resolve();
        }
      }), D = async function* () {
        for (; ; ) {
          for (P.length || await new Promise((H) => S.resolve = H); P.length; )
            yield P.shift();
          if (S.error)
            throw S.error;
          if (S.done)
            return;
        }
      }();
      return D.throw = async ($) => (S.done || (S.done = !0, S.error = $, S.resolve()), { done: !0, value: void 0 }), D.return = async () => (k(), { done: !0, value: void 0 }), D;
    },
    async dispose() {
      if (L = !0, I) {
        const [M] = await I;
        M.close(1e3, "Normal Closure");
      }
    },
    terminate() {
      I && E.emit("closed", new w0());
    }
  };
}
class w0 extends Error {
  constructor() {
    super(...arguments);
    T(this, "name", "TerminatedCloseEvent");
    T(this, "message", "4499: Terminated");
    T(this, "code", 4499);
    T(this, "reason", "Terminated");
    T(this, "wasClean", !1);
  }
}
function ll(n) {
  return si(n) && "code" in n && "reason" in n;
}
function s2(n) {
  return [
    1e3,
    // Normal Closure is not an erroneous close code
    1001,
    // Going Away
    1006,
    // Abnormal Closure
    1005,
    // No Status Received
    1012,
    // Service Restart
    1013,
    // Try Again Later
    1014
    // Bad Gateway
  ].includes(n) ? !1 : n >= 1e3 && n <= 1999;
}
function a2(n) {
  return typeof n == "function" && "constructor" in n && "CLOSED" in n && "CLOSING" in n && "CONNECTING" in n && "OPEN" in n;
}
const o2 = "1.0.8";
let jt = class Yl extends Error {
  constructor(e, t = {}) {
    var a;
    const r = t.cause instanceof Yl ? t.cause.details : (a = t.cause) != null && a.message ? t.cause.message : t.details, i = t.cause instanceof Yl && t.cause.docsPath || t.docsPath, s = [
      e || "An error occurred.",
      "",
      ...t.metaMessages ? [...t.metaMessages, ""] : [],
      ...i ? [`Docs: https://abitype.dev${i}`] : [],
      ...r ? [`Details: ${r}`] : [],
      `Version: abitype@${o2}`
    ].join(`
`);
    super(s), Object.defineProperty(this, "details", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "docsPath", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "metaMessages", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "shortMessage", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "name", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: "AbiTypeError"
    }), t.cause && (this.cause = t.cause), this.details = r, this.docsPath = i, this.metaMessages = t.metaMessages, this.shortMessage = e;
  }
};
function br(n, e) {
  const t = n.exec(e);
  return t == null ? void 0 : t.groups;
}
const jh = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/, Wh = /^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/, Kh = /^\(.+?\).*?$/, A0 = /^tuple(?<array>(\[(\d*)\])*)$/;
function Zl(n) {
  let e = n.type;
  if (A0.test(n.type) && "components" in n) {
    e = "(";
    const t = n.components.length;
    for (let i = 0; i < t; i++) {
      const s = n.components[i];
      e += Zl(s), i < t - 1 && (e += ", ");
    }
    const r = br(A0, n.type);
    return e += `)${(r == null ? void 0 : r.array) ?? ""}`, Zl({
      ...n,
      type: e
    });
  }
  return "indexed" in n && n.indexed && (e = `${e} indexed`), n.name ? `${e} ${n.name}` : e;
}
function Ga(n) {
  let e = "";
  const t = n.length;
  for (let r = 0; r < t; r++) {
    const i = n[r];
    e += Zl(i), r !== t - 1 && (e += ", ");
  }
  return e;
}
function c2(n) {
  var e;
  return n.type === "function" ? `function ${n.name}(${Ga(n.inputs)})${n.stateMutability && n.stateMutability !== "nonpayable" ? ` ${n.stateMutability}` : ""}${(e = n.outputs) != null && e.length ? ` returns (${Ga(n.outputs)})` : ""}` : n.type === "event" ? `event ${n.name}(${Ga(n.inputs)})` : n.type === "error" ? `error ${n.name}(${Ga(n.inputs)})` : n.type === "constructor" ? `constructor(${Ga(n.inputs)})${n.stateMutability === "payable" ? " payable" : ""}` : n.type === "fallback" ? `fallback() external${n.stateMutability === "payable" ? " payable" : ""}` : "receive() external payable";
}
const Qh = /^error (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*)\((?<parameters>.*?)\)$/;
function u2(n) {
  return Qh.test(n);
}
function l2(n) {
  return br(Qh, n);
}
const qh = /^event (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*)\((?<parameters>.*?)\)$/;
function d2(n) {
  return qh.test(n);
}
function f2(n) {
  return br(qh, n);
}
const Jh = /^function (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*)\((?<parameters>.*?)\)(?: (?<scope>external|public{1}))?(?: (?<stateMutability>pure|view|nonpayable|payable{1}))?(?: returns\s?\((?<returns>.*?)\))?$/;
function p2(n) {
  return Jh.test(n);
}
function h2(n) {
  return br(Jh, n);
}
const Yh = /^struct (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*) \{(?<properties>.*?)\}$/;
function Zh(n) {
  return Yh.test(n);
}
function y2(n) {
  return br(Yh, n);
}
const Xh = /^constructor\((?<parameters>.*?)\)(?:\s(?<stateMutability>payable{1}))?$/;
function m2(n) {
  return Xh.test(n);
}
function b2(n) {
  return br(Xh, n);
}
const ey = /^fallback\(\) external(?:\s(?<stateMutability>payable{1}))?$/;
function x2(n) {
  return ey.test(n);
}
function g2(n) {
  return br(ey, n);
}
const w2 = /^receive\(\) external payable$/;
function A2(n) {
  return w2.test(n);
}
const E2 = /* @__PURE__ */ new Set(["indexed"]), Xl = /* @__PURE__ */ new Set([
  "calldata",
  "memory",
  "storage"
]);
class v2 extends jt {
  constructor({ type: e }) {
    super("Unknown type.", {
      metaMessages: [
        `Type "${e}" is not a valid ABI type. Perhaps you forgot to include a struct signature?`
      ]
    }), Object.defineProperty(this, "name", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: "UnknownTypeError"
    });
  }
}
class T2 extends jt {
  constructor({ type: e }) {
    super("Unknown type.", {
      metaMessages: [`Type "${e}" is not a valid ABI type.`]
    }), Object.defineProperty(this, "name", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: "UnknownSolidityTypeError"
    });
  }
}
class P2 extends jt {
  constructor({ param: e }) {
    super("Invalid ABI parameter.", {
      details: e
    }), Object.defineProperty(this, "name", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: "InvalidParameterError"
    });
  }
}
class S2 extends jt {
  constructor({ param: e, name: t }) {
    super("Invalid ABI parameter.", {
      details: e,
      metaMessages: [
        `"${t}" is a protected Solidity keyword. More info: https://docs.soliditylang.org/en/latest/cheatsheet.html`
      ]
    }), Object.defineProperty(this, "name", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: "SolidityProtectedKeywordError"
    });
  }
}
class I2 extends jt {
  constructor({ param: e, type: t, modifier: r }) {
    super("Invalid ABI parameter.", {
      details: e,
      metaMessages: [
        `Modifier "${r}" not allowed${t ? ` in "${t}" type` : ""}.`
      ]
    }), Object.defineProperty(this, "name", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: "InvalidModifierError"
    });
  }
}
class C2 extends jt {
  constructor({ param: e, type: t, modifier: r }) {
    super("Invalid ABI parameter.", {
      details: e,
      metaMessages: [
        `Modifier "${r}" not allowed${t ? ` in "${t}" type` : ""}.`,
        `Data location can only be specified for array, struct, or mapping types, but "${r}" was given.`
      ]
    }), Object.defineProperty(this, "name", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: "InvalidFunctionModifierError"
    });
  }
}
class O2 extends jt {
  constructor({ abiParameter: e }) {
    super("Invalid ABI parameter.", {
      details: JSON.stringify(e, null, 2),
      metaMessages: ["ABI parameter type is invalid."]
    }), Object.defineProperty(this, "name", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: "InvalidAbiTypeParameterError"
    });
  }
}
class Na extends jt {
  constructor({ signature: e, type: t }) {
    super(`Invalid ${t} signature.`, {
      details: e
    }), Object.defineProperty(this, "name", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: "InvalidSignatureError"
    });
  }
}
class N2 extends jt {
  constructor({ signature: e }) {
    super("Unknown signature.", {
      details: e
    }), Object.defineProperty(this, "name", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: "UnknownSignatureError"
    });
  }
}
class R2 extends jt {
  constructor({ signature: e }) {
    super("Invalid struct signature.", {
      details: e,
      metaMessages: ["No properties exist."]
    }), Object.defineProperty(this, "name", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: "InvalidStructSignatureError"
    });
  }
}
class B2 extends jt {
  constructor({ type: e }) {
    super("Circular reference detected.", {
      metaMessages: [`Struct "${e}" is a circular reference.`]
    }), Object.defineProperty(this, "name", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: "CircularReferenceError"
    });
  }
}
class _2 extends jt {
  constructor({ current: e, depth: t }) {
    super("Unbalanced parentheses.", {
      metaMessages: [
        `"${e.trim()}" has too many ${t > 0 ? "opening" : "closing"} parentheses.`
      ],
      details: `Depth "${t}"`
    }), Object.defineProperty(this, "name", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: "InvalidParenthesisError"
    });
  }
}
function k2(n, e, t) {
  let r = "";
  if (t)
    for (const i of Object.entries(t)) {
      if (!i)
        continue;
      let s = "";
      for (const a of i[1])
        s += `[${a.type}${a.name ? `:${a.name}` : ""}]`;
      r += `(${i[0]}{${s}})`;
    }
  return e ? `${e}:${n}${r}` : n;
}
const dl = /* @__PURE__ */ new Map([
  // Unnamed
  ["address", { type: "address" }],
  ["bool", { type: "bool" }],
  ["bytes", { type: "bytes" }],
  ["bytes32", { type: "bytes32" }],
  ["int", { type: "int256" }],
  ["int256", { type: "int256" }],
  ["string", { type: "string" }],
  ["uint", { type: "uint256" }],
  ["uint8", { type: "uint8" }],
  ["uint16", { type: "uint16" }],
  ["uint24", { type: "uint24" }],
  ["uint32", { type: "uint32" }],
  ["uint64", { type: "uint64" }],
  ["uint96", { type: "uint96" }],
  ["uint112", { type: "uint112" }],
  ["uint160", { type: "uint160" }],
  ["uint192", { type: "uint192" }],
  ["uint256", { type: "uint256" }],
  // Named
  ["address owner", { type: "address", name: "owner" }],
  ["address to", { type: "address", name: "to" }],
  ["bool approved", { type: "bool", name: "approved" }],
  ["bytes _data", { type: "bytes", name: "_data" }],
  ["bytes data", { type: "bytes", name: "data" }],
  ["bytes signature", { type: "bytes", name: "signature" }],
  ["bytes32 hash", { type: "bytes32", name: "hash" }],
  ["bytes32 r", { type: "bytes32", name: "r" }],
  ["bytes32 root", { type: "bytes32", name: "root" }],
  ["bytes32 s", { type: "bytes32", name: "s" }],
  ["string name", { type: "string", name: "name" }],
  ["string symbol", { type: "string", name: "symbol" }],
  ["string tokenURI", { type: "string", name: "tokenURI" }],
  ["uint tokenId", { type: "uint256", name: "tokenId" }],
  ["uint8 v", { type: "uint8", name: "v" }],
  ["uint256 balance", { type: "uint256", name: "balance" }],
  ["uint256 tokenId", { type: "uint256", name: "tokenId" }],
  ["uint256 value", { type: "uint256", name: "value" }],
  // Indexed
  [
    "event:address indexed from",
    { type: "address", name: "from", indexed: !0 }
  ],
  ["event:address indexed to", { type: "address", name: "to", indexed: !0 }],
  [
    "event:uint indexed tokenId",
    { type: "uint256", name: "tokenId", indexed: !0 }
  ],
  [
    "event:uint256 indexed tokenId",
    { type: "uint256", name: "tokenId", indexed: !0 }
  ]
]);
function L2(n, e = {}) {
  if (p2(n))
    return M2(n, e);
  if (d2(n))
    return D2(n, e);
  if (u2(n))
    return U2(n, e);
  if (m2(n))
    return F2(n, e);
  if (x2(n))
    return G2(n);
  if (A2(n))
    return {
      type: "receive",
      stateMutability: "payable"
    };
  throw new N2({ signature: n });
}
function M2(n, e = {}) {
  const t = h2(n);
  if (!t)
    throw new Na({ signature: n, type: "function" });
  const r = rn(t.parameters), i = [], s = r.length;
  for (let o = 0; o < s; o++)
    i.push(ji(r[o], {
      modifiers: Xl,
      structs: e,
      type: "function"
    }));
  const a = [];
  if (t.returns) {
    const o = rn(t.returns), c = o.length;
    for (let u = 0; u < c; u++)
      a.push(ji(o[u], {
        modifiers: Xl,
        structs: e,
        type: "function"
      }));
  }
  return {
    name: t.name,
    type: "function",
    stateMutability: t.stateMutability ?? "nonpayable",
    inputs: i,
    outputs: a
  };
}
function D2(n, e = {}) {
  const t = f2(n);
  if (!t)
    throw new Na({ signature: n, type: "event" });
  const r = rn(t.parameters), i = [], s = r.length;
  for (let a = 0; a < s; a++)
    i.push(ji(r[a], {
      modifiers: E2,
      structs: e,
      type: "event"
    }));
  return { name: t.name, type: "event", inputs: i };
}
function U2(n, e = {}) {
  const t = l2(n);
  if (!t)
    throw new Na({ signature: n, type: "error" });
  const r = rn(t.parameters), i = [], s = r.length;
  for (let a = 0; a < s; a++)
    i.push(ji(r[a], { structs: e, type: "error" }));
  return { name: t.name, type: "error", inputs: i };
}
function F2(n, e = {}) {
  const t = b2(n);
  if (!t)
    throw new Na({ signature: n, type: "constructor" });
  const r = rn(t.parameters), i = [], s = r.length;
  for (let a = 0; a < s; a++)
    i.push(ji(r[a], { structs: e, type: "constructor" }));
  return {
    type: "constructor",
    stateMutability: t.stateMutability ?? "nonpayable",
    inputs: i
  };
}
function G2(n) {
  const e = g2(n);
  if (!e)
    throw new Na({ signature: n, type: "fallback" });
  return {
    type: "fallback",
    stateMutability: e.stateMutability ?? "nonpayable"
  };
}
const H2 = /^(?<type>[a-zA-Z$_][a-zA-Z0-9$_]*)(?<array>(?:\[\d*?\])+?)?(?:\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\s(?<name>[a-zA-Z$_][a-zA-Z0-9$_]*))?$/, $2 = /^\((?<type>.+?)\)(?<array>(?:\[\d*?\])+?)?(?:\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\s(?<name>[a-zA-Z$_][a-zA-Z0-9$_]*))?$/, V2 = /^u?int$/;
function ji(n, e) {
  var d, f;
  const t = k2(n, e == null ? void 0 : e.type, e == null ? void 0 : e.structs);
  if (dl.has(t))
    return dl.get(t);
  const r = Kh.test(n), i = br(r ? $2 : H2, n);
  if (!i)
    throw new P2({ param: n });
  if (i.name && j2(i.name))
    throw new S2({ param: n, name: i.name });
  const s = i.name ? { name: i.name } : {}, a = i.modifier === "indexed" ? { indexed: !0 } : {}, o = (e == null ? void 0 : e.structs) ?? {};
  let c, u = {};
  if (r) {
    c = "tuple";
    const p = rn(i.type), y = [], h = p.length;
    for (let b = 0; b < h; b++)
      y.push(ji(p[b], { structs: o }));
    u = { components: y };
  } else if (i.type in o)
    c = "tuple", u = { components: o[i.type] };
  else if (V2.test(i.type))
    c = `${i.type}256`;
  else if (c = i.type, (e == null ? void 0 : e.type) !== "struct" && !ty(c))
    throw new T2({ type: c });
  if (i.modifier) {
    if (!((f = (d = e == null ? void 0 : e.modifiers) == null ? void 0 : d.has) != null && f.call(d, i.modifier)))
      throw new I2({
        param: n,
        type: e == null ? void 0 : e.type,
        modifier: i.modifier
      });
    if (Xl.has(i.modifier) && !W2(c, !!i.array))
      throw new C2({
        param: n,
        type: e == null ? void 0 : e.type,
        modifier: i.modifier
      });
  }
  const l = {
    type: `${c}${i.array ?? ""}`,
    ...s,
    ...a,
    ...u
  };
  return dl.set(t, l), l;
}
function rn(n, e = [], t = "", r = 0) {
  const i = n.trim().length;
  for (let s = 0; s < i; s++) {
    const a = n[s], o = n.slice(s + 1);
    switch (a) {
      case ",":
        return r === 0 ? rn(o, [...e, t.trim()]) : rn(o, e, `${t}${a}`, r);
      case "(":
        return rn(o, e, `${t}${a}`, r + 1);
      case ")":
        return rn(o, e, `${t}${a}`, r - 1);
      default:
        return rn(o, e, `${t}${a}`, r);
    }
  }
  if (t === "")
    return e;
  if (r !== 0)
    throw new _2({ current: t, depth: r });
  return e.push(t.trim()), e;
}
function ty(n) {
  return n === "address" || n === "bool" || n === "function" || n === "string" || jh.test(n) || Wh.test(n);
}
const z2 = /^(?:after|alias|anonymous|apply|auto|byte|calldata|case|catch|constant|copyof|default|defined|error|event|external|false|final|function|immutable|implements|in|indexed|inline|internal|let|mapping|match|memory|mutable|null|of|override|partial|private|promise|public|pure|reference|relocatable|return|returns|sizeof|static|storage|struct|super|supports|switch|this|true|try|typedef|typeof|var|view|virtual)$/;
function j2(n) {
  return n === "address" || n === "bool" || n === "function" || n === "string" || n === "tuple" || jh.test(n) || Wh.test(n) || z2.test(n);
}
function W2(n, e) {
  return e || n === "bytes" || n === "string" || n === "tuple";
}
function K2(n) {
  const e = {}, t = n.length;
  for (let a = 0; a < t; a++) {
    const o = n[a];
    if (!Zh(o))
      continue;
    const c = y2(o);
    if (!c)
      throw new Na({ signature: o, type: "struct" });
    const u = c.properties.split(";"), l = [], d = u.length;
    for (let f = 0; f < d; f++) {
      const y = u[f].trim();
      if (!y)
        continue;
      const h = ji(y, {
        type: "struct"
      });
      l.push(h);
    }
    if (!l.length)
      throw new R2({ signature: o });
    e[c.name] = l;
  }
  const r = {}, i = Object.entries(e), s = i.length;
  for (let a = 0; a < s; a++) {
    const [o, c] = i[a];
    r[o] = ny(c, e);
  }
  return r;
}
const Q2 = /^(?<type>[a-zA-Z$_][a-zA-Z0-9$_]*)(?<array>(?:\[\d*?\])+?)?$/;
function ny(n, e, t = /* @__PURE__ */ new Set()) {
  const r = [], i = n.length;
  for (let s = 0; s < i; s++) {
    const a = n[s];
    if (Kh.test(a.type))
      r.push(a);
    else {
      const c = br(Q2, a.type);
      if (!(c != null && c.type))
        throw new O2({ abiParameter: a });
      const { array: u, type: l } = c;
      if (l in e) {
        if (t.has(l))
          throw new B2({ type: l });
        r.push({
          ...a,
          type: `tuple${u ?? ""}`,
          components: ny(e[l] ?? [], e, /* @__PURE__ */ new Set([...t, l]))
        });
      } else if (ty(l))
        r.push(a);
      else
        throw new v2({ type: l });
    }
  }
  return r;
}
function ry(n) {
  const e = K2(n), t = [], r = n.length;
  for (let i = 0; i < r; i++) {
    const s = n[i];
    Zh(s) || t.push(L2(s, e));
  }
  return t;
}
function he(n, e, t) {
  const r = n[e.name];
  if (typeof r == "function")
    return r;
  const i = n[t];
  return typeof i == "function" ? i : (s) => e(n, s);
}
function dr(n, { includeName: e = !1 } = {}) {
  if (n.type !== "function" && n.type !== "event" && n.type !== "error")
    throw new a1(n.type);
  return `${n.name}(${Cu(n.inputs, { includeName: e })})`;
}
function Cu(n, { includeName: e = !1 } = {}) {
  return n ? n.map((t) => q2(t, { includeName: e })).join(e ? ", " : ",") : "";
}
function q2(n, { includeName: e }) {
  return n.type.startsWith("tuple") ? `(${Cu(n.components, { includeName: e })})${n.type.slice(5)}` : n.type + (e && n.name ? ` ${n.name}` : "");
}
function Jr(n, { strict: e = !0 } = {}) {
  return !n || typeof n != "string" ? !1 : e ? /^0x[0-9a-fA-F]*$/.test(n) : n.startsWith("0x");
}
function Ne(n) {
  return Jr(n, { strict: !1 }) ? Math.ceil((n.length - 2) / 2) : n.length;
}
const iy = "2.31.7";
let Ha = {
  getDocsUrl: ({ docsBaseUrl: n, docsPath: e = "", docsSlug: t }) => e ? `${n ?? "https://viem.sh"}${e}${t ? `#${t}` : ""}` : void 0,
  version: `viem@${iy}`
}, j = class ed extends Error {
  constructor(e, t = {}) {
    var o;
    const r = (() => {
      var c;
      return t.cause instanceof ed ? t.cause.details : (c = t.cause) != null && c.message ? t.cause.message : t.details;
    })(), i = t.cause instanceof ed && t.cause.docsPath || t.docsPath, s = (o = Ha.getDocsUrl) == null ? void 0 : o.call(Ha, { ...t, docsPath: i }), a = [
      e || "An error occurred.",
      "",
      ...t.metaMessages ? [...t.metaMessages, ""] : [],
      ...s ? [`Docs: ${s}`] : [],
      ...r ? [`Details: ${r}`] : [],
      ...Ha.version ? [`Version: ${Ha.version}`] : []
    ].join(`
`);
    super(a, t.cause ? { cause: t.cause } : void 0), Object.defineProperty(this, "details", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "docsPath", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "metaMessages", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "shortMessage", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "version", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "name", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: "BaseError"
    }), this.details = r, this.docsPath = i, this.metaMessages = t.metaMessages, this.name = t.name ?? this.name, this.shortMessage = e, this.version = iy;
  }
  walk(e) {
    return sy(this, e);
  }
};
function sy(n, e) {
  return e != null && e(n) ? n : n && typeof n == "object" && "cause" in n && n.cause !== void 0 ? sy(n.cause, e) : e ? null : n;
}
class J2 extends j {
  constructor({ docsPath: e }) {
    super([
      "A constructor was not found on the ABI.",
      "Make sure you are using the correct ABI and that the constructor exists on it."
    ].join(`
`), {
      docsPath: e,
      name: "AbiConstructorNotFoundError"
    });
  }
}
class E0 extends j {
  constructor({ docsPath: e }) {
    super([
      "Constructor arguments were provided (`args`), but a constructor parameters (`inputs`) were not found on the ABI.",
      "Make sure you are using the correct ABI, and that the `inputs` attribute on the constructor exists."
    ].join(`
`), {
      docsPath: e,
      name: "AbiConstructorParamsNotFoundError"
    });
  }
}
class ay extends j {
  constructor({ data: e, params: t, size: r }) {
    super([`Data size of ${r} bytes is too small for given parameters.`].join(`
`), {
      metaMessages: [
        `Params: (${Cu(t, { includeName: !0 })})`,
        `Data:   ${e} (${r} bytes)`
      ],
      name: "AbiDecodingDataSizeTooSmallError"
    }), Object.defineProperty(this, "data", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "params", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "size", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this.data = e, this.params = t, this.size = r;
  }
}
class of extends j {
  constructor() {
    super('Cannot decode zero data ("0x") with ABI parameters.', {
      name: "AbiDecodingZeroDataError"
    });
  }
}
class Y2 extends j {
  constructor({ expectedLength: e, givenLength: t, type: r }) {
    super([
      `ABI encoding array length mismatch for type ${r}.`,
      `Expected length: ${e}`,
      `Given length: ${t}`
    ].join(`
`), { name: "AbiEncodingArrayLengthMismatchError" });
  }
}
class Z2 extends j {
  constructor({ expectedSize: e, value: t }) {
    super(`Size of bytes "${t}" (bytes${Ne(t)}) does not match expected size (bytes${e}).`, { name: "AbiEncodingBytesSizeMismatchError" });
  }
}
class X2 extends j {
  constructor({ expectedLength: e, givenLength: t }) {
    super([
      "ABI encoding params/values length mismatch.",
      `Expected length (params): ${e}`,
      `Given length (values): ${t}`
    ].join(`
`), { name: "AbiEncodingLengthMismatchError" });
  }
}
class Y4 extends j {
  constructor(e, { docsPath: t }) {
    super([
      `Arguments (\`args\`) were provided to "${e}", but "${e}" on the ABI does not contain any parameters (\`inputs\`).`,
      "Cannot encode error result without knowing what the parameter types are.",
      "Make sure you are using the correct ABI and that the inputs exist on it."
    ].join(`
`), {
      docsPath: t,
      name: "AbiErrorInputsNotFoundError"
    });
  }
}
class Z4 extends j {
  constructor(e, { docsPath: t } = {}) {
    super([
      `Error ${e ? `"${e}" ` : ""}not found on ABI.`,
      "Make sure you are using the correct ABI and that the error exists on it."
    ].join(`
`), {
      docsPath: t,
      name: "AbiErrorNotFoundError"
    });
  }
}
class oy extends j {
  constructor(e, { docsPath: t }) {
    super([
      `Encoded error signature "${e}" not found on ABI.`,
      "Make sure you are using the correct ABI and that the error exists on it.",
      `You can look up the decoded signature here: https://openchain.xyz/signatures?query=${e}.`
    ].join(`
`), {
      docsPath: t,
      name: "AbiErrorSignatureNotFoundError"
    }), Object.defineProperty(this, "signature", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this.signature = e;
  }
}
class e1 extends j {
  constructor({ docsPath: e }) {
    super("Cannot extract event signature from empty topics.", {
      docsPath: e,
      name: "AbiEventSignatureEmptyTopicsError"
    });
  }
}
class cy extends j {
  constructor(e, { docsPath: t }) {
    super([
      `Encoded event signature "${e}" not found on ABI.`,
      "Make sure you are using the correct ABI and that the event exists on it.",
      `You can look up the signature here: https://openchain.xyz/signatures?query=${e}.`
    ].join(`
`), {
      docsPath: t,
      name: "AbiEventSignatureNotFoundError"
    });
  }
}
class v0 extends j {
  constructor(e, { docsPath: t } = {}) {
    super([
      `Event ${e ? `"${e}" ` : ""}not found on ABI.`,
      "Make sure you are using the correct ABI and that the event exists on it."
    ].join(`
`), {
      docsPath: t,
      name: "AbiEventNotFoundError"
    });
  }
}
class Jc extends j {
  constructor(e, { docsPath: t } = {}) {
    super([
      `Function ${e ? `"${e}" ` : ""}not found on ABI.`,
      "Make sure you are using the correct ABI and that the function exists on it."
    ].join(`
`), {
      docsPath: t,
      name: "AbiFunctionNotFoundError"
    });
  }
}
class t1 extends j {
  constructor(e, { docsPath: t }) {
    super([
      `Function "${e}" does not contain any \`outputs\` on ABI.`,
      "Cannot decode function result without knowing what the parameter types are.",
      "Make sure you are using the correct ABI and that the function exists on it."
    ].join(`
`), {
      docsPath: t,
      name: "AbiFunctionOutputsNotFoundError"
    });
  }
}
class X4 extends j {
  constructor(e, { docsPath: t }) {
    super([
      `Encoded function signature "${e}" not found on ABI.`,
      "Make sure you are using the correct ABI and that the function exists on it.",
      `You can look up the signature here: https://openchain.xyz/signatures?query=${e}.`
    ].join(`
`), {
      docsPath: t,
      name: "AbiFunctionSignatureNotFoundError"
    });
  }
}
class n1 extends j {
  constructor(e, t) {
    super("Found ambiguous types in overloaded ABI items.", {
      metaMessages: [
        `\`${e.type}\` in \`${dr(e.abiItem)}\`, and`,
        `\`${t.type}\` in \`${dr(t.abiItem)}\``,
        "",
        "These types encode differently and cannot be distinguished at runtime.",
        "Remove one of the ambiguous items in the ABI."
      ],
      name: "AbiItemAmbiguityError"
    });
  }
}
class Yc extends j {
  constructor({ abiItem: e, data: t, params: r, size: i }) {
    super([
      `Data size of ${i} bytes is too small for non-indexed event parameters.`
    ].join(`
`), {
      metaMessages: [
        `Params: (${Cu(r, { includeName: !0 })})`,
        `Data:   ${t} (${i} bytes)`
      ],
      name: "DecodeLogDataMismatch"
    }), Object.defineProperty(this, "abiItem", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "data", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "params", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "size", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this.abiItem = e, this.data = t, this.params = r, this.size = i;
  }
}
class cf extends j {
  constructor({ abiItem: e, param: t }) {
    super([
      `Expected a topic for indexed event parameter${t.name ? ` "${t.name}"` : ""} on event "${dr(e, { includeName: !0 })}".`
    ].join(`
`), { name: "DecodeLogTopicsMismatch" }), Object.defineProperty(this, "abiItem", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this.abiItem = e;
  }
}
class r1 extends j {
  constructor(e, { docsPath: t }) {
    super([
      `Type "${e}" is not a valid encoding type.`,
      "Please provide a valid ABI type."
    ].join(`
`), { docsPath: t, name: "InvalidAbiEncodingType" });
  }
}
class i1 extends j {
  constructor(e, { docsPath: t }) {
    super([
      `Type "${e}" is not a valid decoding type.`,
      "Please provide a valid ABI type."
    ].join(`
`), { docsPath: t, name: "InvalidAbiDecodingType" });
  }
}
class s1 extends j {
  constructor(e) {
    super([`Value "${e}" is not a valid array.`].join(`
`), {
      name: "InvalidArrayError"
    });
  }
}
class a1 extends j {
  constructor(e) {
    super([
      `"${e}" is not a valid definition type.`,
      'Valid types: "function", "event", "error"'
    ].join(`
`), { name: "InvalidDefinitionTypeError" });
  }
}
class o1 extends j {
  constructor(e) {
    super(`Filter type "${e}" is not supported.`, {
      name: "FilterTypeNotSupportedError"
    });
  }
}
class uy extends j {
  constructor({ offset: e, position: t, size: r }) {
    super(`Slice ${t === "start" ? "starting" : "ending"} at offset "${e}" is out-of-bounds (size: ${r}).`, { name: "SliceOffsetOutOfBoundsError" });
  }
}
let ly = class extends j {
  constructor({ size: e, targetSize: t, type: r }) {
    super(`${r.charAt(0).toUpperCase()}${r.slice(1).toLowerCase()} size (${e}) exceeds padding size (${t}).`, { name: "SizeExceedsPaddingSizeError" });
  }
};
class T0 extends j {
  constructor({ size: e, targetSize: t, type: r }) {
    super(`${r.charAt(0).toUpperCase()}${r.slice(1).toLowerCase()} is expected to be ${t} ${r} long, but is ${e} ${r} long.`, { name: "InvalidBytesLengthError" });
  }
}
function Ra(n, { dir: e, size: t = 32 } = {}) {
  return typeof n == "string" ? Kr(n, { dir: e, size: t }) : c1(n, { dir: e, size: t });
}
function Kr(n, { dir: e, size: t = 32 } = {}) {
  if (t === null)
    return n;
  const r = n.replace("0x", "");
  if (r.length > t * 2)
    throw new ly({
      size: Math.ceil(r.length / 2),
      targetSize: t,
      type: "hex"
    });
  return `0x${r[e === "right" ? "padEnd" : "padStart"](t * 2, "0")}`;
}
function c1(n, { dir: e, size: t = 32 } = {}) {
  if (t === null)
    return n;
  if (n.length > t)
    throw new ly({
      size: n.length,
      targetSize: t,
      type: "bytes"
    });
  const r = new Uint8Array(t);
  for (let i = 0; i < t; i++) {
    const s = e === "right";
    r[s ? i : t - i - 1] = n[s ? i : n.length - i - 1];
  }
  return r;
}
let dy = class extends j {
  constructor({ max: e, min: t, signed: r, size: i, value: s }) {
    super(`Number "${s}" is not in safe ${i ? `${i * 8}-bit ${r ? "signed" : "unsigned"} ` : ""}integer range ${e ? `(${t} to ${e})` : `(above ${t})`}`, { name: "IntegerOutOfRangeError" });
  }
};
class u1 extends j {
  constructor(e) {
    super(`Bytes value "${e}" is not a valid boolean. The bytes array must contain a single byte of either a 0 or 1 value.`, {
      name: "InvalidBytesBooleanError"
    });
  }
}
class l1 extends j {
  constructor({ givenSize: e, maxSize: t }) {
    super(`Size cannot exceed ${t} bytes. Given size: ${e} bytes.`, { name: "SizeOverflowError" });
  }
}
function uf(n, { dir: e = "left" } = {}) {
  let t = typeof n == "string" ? n.replace("0x", "") : n, r = 0;
  for (let i = 0; i < t.length - 1 && t[e === "left" ? i : t.length - i - 1].toString() === "0"; i++)
    r++;
  return t = e === "left" ? t.slice(r) : t.slice(0, t.length - r), typeof n == "string" ? (t.length === 1 && e === "right" && (t = `${t}0`), `0x${t.length % 2 === 1 ? `0${t}` : t}`) : t;
}
function Ln(n, { size: e }) {
  if (Ne(n) > e)
    throw new l1({
      givenSize: Ne(n),
      maxSize: e
    });
}
function fo(n, e = {}) {
  const { signed: t } = e;
  e.size && Ln(n, { size: e.size });
  const r = BigInt(n);
  if (!t)
    return r;
  const i = (n.length - 2) / 2, s = (1n << BigInt(i) * 8n - 1n) - 1n;
  return r <= s ? r : r - BigInt(`0x${"f".padStart(i * 2, "f")}`) - 1n;
}
function ha(n, e = {}) {
  return Number(fo(n, e));
}
const d1 = /* @__PURE__ */ Array.from({ length: 256 }, (n, e) => e.toString(16).padStart(2, "0"));
function Yr(n, e = {}) {
  return typeof n == "number" || typeof n == "bigint" ? re(n, e) : typeof n == "string" ? py(n, e) : typeof n == "boolean" ? fy(n, e) : pt(n, e);
}
function fy(n, e = {}) {
  const t = `0x${Number(n)}`;
  return typeof e.size == "number" ? (Ln(t, { size: e.size }), Ra(t, { size: e.size })) : t;
}
function pt(n, e = {}) {
  let t = "";
  for (let i = 0; i < n.length; i++)
    t += d1[n[i]];
  const r = `0x${t}`;
  return typeof e.size == "number" ? (Ln(r, { size: e.size }), Ra(r, { dir: "right", size: e.size })) : r;
}
function re(n, e = {}) {
  const { signed: t, size: r } = e, i = BigInt(n);
  let s;
  r ? t ? s = (1n << BigInt(r) * 8n - 1n) - 1n : s = 2n ** (BigInt(r) * 8n) - 1n : typeof n == "number" && (s = BigInt(Number.MAX_SAFE_INTEGER));
  const a = typeof s == "bigint" && t ? -s - 1n : 0;
  if (s && i > s || i < a) {
    const c = typeof n == "bigint" ? "n" : "";
    throw new dy({
      max: s ? `${s}${c}` : void 0,
      min: `${a}${c}`,
      signed: t,
      size: r,
      value: `${n}${c}`
    });
  }
  const o = `0x${(t && i < 0 ? (1n << BigInt(r * 8)) + BigInt(i) : i).toString(16)}`;
  return r ? Ra(o, { size: r }) : o;
}
const f1 = /* @__PURE__ */ new TextEncoder();
function py(n, e = {}) {
  const t = f1.encode(n);
  return pt(t, e);
}
const p1 = /* @__PURE__ */ new TextEncoder();
function Qo(n, e = {}) {
  return typeof n == "number" || typeof n == "bigint" ? y1(n, e) : typeof n == "boolean" ? h1(n, e) : Jr(n) ? fr(n, e) : hy(n, e);
}
function h1(n, e = {}) {
  const t = new Uint8Array(1);
  return t[0] = Number(n), typeof e.size == "number" ? (Ln(t, { size: e.size }), Ra(t, { size: e.size })) : t;
}
const Mn = {
  zero: 48,
  nine: 57,
  A: 65,
  F: 70,
  a: 97,
  f: 102
};
function P0(n) {
  if (n >= Mn.zero && n <= Mn.nine)
    return n - Mn.zero;
  if (n >= Mn.A && n <= Mn.F)
    return n - (Mn.A - 10);
  if (n >= Mn.a && n <= Mn.f)
    return n - (Mn.a - 10);
}
function fr(n, e = {}) {
  let t = n;
  e.size && (Ln(t, { size: e.size }), t = Ra(t, { dir: "right", size: e.size }));
  let r = t.slice(2);
  r.length % 2 && (r = `0${r}`);
  const i = r.length / 2, s = new Uint8Array(i);
  for (let a = 0, o = 0; a < i; a++) {
    const c = P0(r.charCodeAt(o++)), u = P0(r.charCodeAt(o++));
    if (c === void 0 || u === void 0)
      throw new j(`Invalid byte sequence ("${r[o - 2]}${r[o - 1]}" in "${r}").`);
    s[a] = c * 16 + u;
  }
  return s;
}
function y1(n, e) {
  const t = re(n, e);
  return fr(t);
}
function hy(n, e = {}) {
  const t = p1.encode(n);
  return typeof e.size == "number" ? (Ln(t, { size: e.size }), Ra(t, { dir: "right", size: e.size })) : t;
}
const dc = /* @__PURE__ */ BigInt(2 ** 32 - 1), S0 = /* @__PURE__ */ BigInt(32);
function m1(n, e = !1) {
  return e ? { h: Number(n & dc), l: Number(n >> S0 & dc) } : { h: Number(n >> S0 & dc) | 0, l: Number(n & dc) | 0 };
}
function b1(n, e = !1) {
  const t = n.length;
  let r = new Uint32Array(t), i = new Uint32Array(t);
  for (let s = 0; s < t; s++) {
    const { h: a, l: o } = m1(n[s], e);
    [r[s], i[s]] = [a, o];
  }
  return [r, i];
}
const x1 = (n, e, t) => n << t | e >>> 32 - t, g1 = (n, e, t) => e << t | n >>> 32 - t, w1 = (n, e, t) => e << t - 32 | n >>> 64 - t, A1 = (n, e, t) => n << t - 32 | e >>> 64 - t, is = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function lf(n) {
  return n instanceof Uint8Array || ArrayBuffer.isView(n) && n.constructor.name === "Uint8Array";
}
function po(n) {
  if (!Number.isSafeInteger(n) || n < 0)
    throw new Error("positive integer expected, got " + n);
}
function an(n, ...e) {
  if (!lf(n))
    throw new Error("Uint8Array expected");
  if (e.length > 0 && !e.includes(n.length))
    throw new Error("Uint8Array expected of length " + e + ", got length=" + n.length);
}
function E1(n) {
  if (typeof n != "function" || typeof n.create != "function")
    throw new Error("Hash should be wrapped by utils.createHasher");
  po(n.outputLen), po(n.blockLen);
}
function ya(n, e = !0) {
  if (n.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (e && n.finished)
    throw new Error("Hash#digest() has already been called");
}
function yy(n, e) {
  an(n);
  const t = e.outputLen;
  if (n.length < t)
    throw new Error("digestInto() expects output buffer of length at least " + t);
}
function v1(n) {
  return new Uint32Array(n.buffer, n.byteOffset, Math.floor(n.byteLength / 4));
}
function ma(...n) {
  for (let e = 0; e < n.length; e++)
    n[e].fill(0);
}
function fl(n) {
  return new DataView(n.buffer, n.byteOffset, n.byteLength);
}
function ln(n, e) {
  return n << 32 - e | n >>> e;
}
const T1 = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
function P1(n) {
  return n << 24 & 4278190080 | n << 8 & 16711680 | n >>> 8 & 65280 | n >>> 24 & 255;
}
function S1(n) {
  for (let e = 0; e < n.length; e++)
    n[e] = P1(n[e]);
  return n;
}
const I0 = T1 ? (n) => n : S1, my = /* @ts-ignore */ typeof Uint8Array.from([]).toHex == "function" && typeof Uint8Array.fromHex == "function", I1 = /* @__PURE__ */ Array.from({ length: 256 }, (n, e) => e.toString(16).padStart(2, "0"));
function ho(n) {
  if (an(n), my)
    return n.toHex();
  let e = "";
  for (let t = 0; t < n.length; t++)
    e += I1[n[t]];
  return e;
}
const Dn = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
function C0(n) {
  if (n >= Dn._0 && n <= Dn._9)
    return n - Dn._0;
  if (n >= Dn.A && n <= Dn.F)
    return n - (Dn.A - 10);
  if (n >= Dn.a && n <= Dn.f)
    return n - (Dn.a - 10);
}
function df(n) {
  if (typeof n != "string")
    throw new Error("hex string expected, got " + typeof n);
  if (my)
    return Uint8Array.fromHex(n);
  const e = n.length, t = e / 2;
  if (e % 2)
    throw new Error("hex string expected, got unpadded hex of length " + e);
  const r = new Uint8Array(t);
  for (let i = 0, s = 0; i < t; i++, s += 2) {
    const a = C0(n.charCodeAt(s)), o = C0(n.charCodeAt(s + 1));
    if (a === void 0 || o === void 0) {
      const c = n[s] + n[s + 1];
      throw new Error('hex string expected, got non-hex character "' + c + '" at index ' + s);
    }
    r[i] = a * 16 + o;
  }
  return r;
}
function C1(n) {
  if (typeof n != "string")
    throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(n));
}
function Ou(n) {
  return typeof n == "string" && (n = C1(n)), an(n), n;
}
function hi(...n) {
  let e = 0;
  for (let r = 0; r < n.length; r++) {
    const i = n[r];
    an(i), e += i.length;
  }
  const t = new Uint8Array(e);
  for (let r = 0, i = 0; r < n.length; r++) {
    const s = n[r];
    t.set(s, i), i += s.length;
  }
  return t;
}
let ff = class {
};
function by(n) {
  const e = (r) => n().update(Ou(r)).digest(), t = n();
  return e.outputLen = t.outputLen, e.blockLen = t.blockLen, e.create = () => n(), e;
}
function O1(n = 32) {
  if (is && typeof is.getRandomValues == "function")
    return is.getRandomValues(new Uint8Array(n));
  if (is && typeof is.randomBytes == "function")
    return Uint8Array.from(is.randomBytes(n));
  throw new Error("crypto.getRandomValues must be defined");
}
const N1 = BigInt(0), $a = BigInt(1), R1 = BigInt(2), B1 = BigInt(7), _1 = BigInt(256), k1 = BigInt(113), xy = [], gy = [], wy = [];
for (let n = 0, e = $a, t = 1, r = 0; n < 24; n++) {
  [t, r] = [r, (2 * t + 3 * r) % 5], xy.push(2 * (5 * r + t)), gy.push((n + 1) * (n + 2) / 2 % 64);
  let i = N1;
  for (let s = 0; s < 7; s++)
    e = (e << $a ^ (e >> B1) * k1) % _1, e & R1 && (i ^= $a << ($a << /* @__PURE__ */ BigInt(s)) - $a);
  wy.push(i);
}
const Ay = b1(wy, !0), L1 = Ay[0], M1 = Ay[1], O0 = (n, e, t) => t > 32 ? w1(n, e, t) : x1(n, e, t), N0 = (n, e, t) => t > 32 ? A1(n, e, t) : g1(n, e, t);
function D1(n, e = 24) {
  const t = new Uint32Array(10);
  for (let r = 24 - e; r < 24; r++) {
    for (let a = 0; a < 10; a++)
      t[a] = n[a] ^ n[a + 10] ^ n[a + 20] ^ n[a + 30] ^ n[a + 40];
    for (let a = 0; a < 10; a += 2) {
      const o = (a + 8) % 10, c = (a + 2) % 10, u = t[c], l = t[c + 1], d = O0(u, l, 1) ^ t[o], f = N0(u, l, 1) ^ t[o + 1];
      for (let p = 0; p < 50; p += 10)
        n[a + p] ^= d, n[a + p + 1] ^= f;
    }
    let i = n[2], s = n[3];
    for (let a = 0; a < 24; a++) {
      const o = gy[a], c = O0(i, s, o), u = N0(i, s, o), l = xy[a];
      i = n[l], s = n[l + 1], n[l] = c, n[l + 1] = u;
    }
    for (let a = 0; a < 50; a += 10) {
      for (let o = 0; o < 10; o++)
        t[o] = n[a + o];
      for (let o = 0; o < 10; o++)
        n[a + o] ^= ~t[(o + 2) % 10] & t[(o + 4) % 10];
    }
    n[0] ^= L1[r], n[1] ^= M1[r];
  }
  ma(t);
}
let U1 = class Ey extends ff {
  // NOTE: we accept arguments in bytes instead of bits here.
  constructor(e, t, r, i = !1, s = 24) {
    if (super(), this.pos = 0, this.posOut = 0, this.finished = !1, this.destroyed = !1, this.enableXOF = !1, this.blockLen = e, this.suffix = t, this.outputLen = r, this.enableXOF = i, this.rounds = s, po(r), !(0 < e && e < 200))
      throw new Error("only keccak-f1600 function is supported");
    this.state = new Uint8Array(200), this.state32 = v1(this.state);
  }
  clone() {
    return this._cloneInto();
  }
  keccak() {
    I0(this.state32), D1(this.state32, this.rounds), I0(this.state32), this.posOut = 0, this.pos = 0;
  }
  update(e) {
    ya(this), e = Ou(e), an(e);
    const { blockLen: t, state: r } = this, i = e.length;
    for (let s = 0; s < i; ) {
      const a = Math.min(t - this.pos, i - s);
      for (let o = 0; o < a; o++)
        r[this.pos++] ^= e[s++];
      this.pos === t && this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished)
      return;
    this.finished = !0;
    const { state: e, suffix: t, pos: r, blockLen: i } = this;
    e[r] ^= t, t & 128 && r === i - 1 && this.keccak(), e[i - 1] ^= 128, this.keccak();
  }
  writeInto(e) {
    ya(this, !1), an(e), this.finish();
    const t = this.state, { blockLen: r } = this;
    for (let i = 0, s = e.length; i < s; ) {
      this.posOut >= r && this.keccak();
      const a = Math.min(r - this.posOut, s - i);
      e.set(t.subarray(this.posOut, this.posOut + a), i), this.posOut += a, i += a;
    }
    return e;
  }
  xofInto(e) {
    if (!this.enableXOF)
      throw new Error("XOF is not possible for this instance");
    return this.writeInto(e);
  }
  xof(e) {
    return po(e), this.xofInto(new Uint8Array(e));
  }
  digestInto(e) {
    if (yy(e, this), this.finished)
      throw new Error("digest() was already called");
    return this.writeInto(e), this.destroy(), e;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = !0, ma(this.state);
  }
  _cloneInto(e) {
    const { blockLen: t, suffix: r, outputLen: i, rounds: s, enableXOF: a } = this;
    return e || (e = new Ey(t, r, i, a, s)), e.state32.set(this.state32), e.pos = this.pos, e.posOut = this.posOut, e.finished = this.finished, e.rounds = s, e.suffix = r, e.outputLen = i, e.enableXOF = a, e.destroyed = this.destroyed, e;
  }
};
const F1 = (n, e, t) => by(() => new U1(e, n, t)), G1 = F1(1, 136, 256 / 8);
function Xi(n, e) {
  const t = e || "hex", r = G1(Jr(n, { strict: !1 }) ? Qo(n) : n);
  return t === "bytes" ? r : Yr(r);
}
const H1 = (n) => Xi(Qo(n));
function $1(n) {
  return H1(n);
}
function V1(n) {
  let e = !0, t = "", r = 0, i = "", s = !1;
  for (let a = 0; a < n.length; a++) {
    const o = n[a];
    if (["(", ")", ","].includes(o) && (e = !0), o === "(" && r++, o === ")" && r--, !!e) {
      if (r === 0) {
        if (o === " " && ["event", "function", ""].includes(i))
          i = "";
        else if (i += o, o === ")") {
          s = !0;
          break;
        }
        continue;
      }
      if (o === " ") {
        n[a - 1] !== "," && t !== "," && t !== ",(" && (t = "", e = !1);
        continue;
      }
      i += o, t += o;
    }
  }
  if (!s)
    throw new j("Unable to normalize signature.");
  return i;
}
const z1 = (n) => {
  const e = typeof n == "string" ? n : c2(n);
  return V1(e);
};
function vy(n) {
  return $1(z1(n));
}
const Nu = vy;
class Wi extends j {
  constructor({ address: e }) {
    super(`Address "${e}" is invalid.`, {
      metaMessages: [
        "- Address must be a hex value of 20 bytes (40 hex characters).",
        "- Address must match its checksum counterpart."
      ],
      name: "InvalidAddressError"
    });
  }
}
class pf extends Map {
  constructor(e) {
    super(), Object.defineProperty(this, "maxSize", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this.maxSize = e;
  }
  get(e) {
    const t = super.get(e);
    return super.has(e) && t !== void 0 && (this.delete(e), super.set(e, t)), t;
  }
  set(e, t) {
    if (super.set(e, t), this.maxSize && this.size > this.maxSize) {
      const r = this.keys().next().value;
      r && this.delete(r);
    }
    return this;
  }
}
const pl = /* @__PURE__ */ new pf(8192);
function Ru(n, e) {
  if (pl.has(`${n}.${e}`))
    return pl.get(`${n}.${e}`);
  const t = n.substring(2).toLowerCase(), r = Xi(hy(t), "bytes"), i = t.split("");
  for (let a = 0; a < 40; a += 2)
    r[a >> 1] >> 4 >= 8 && i[a] && (i[a] = i[a].toUpperCase()), (r[a >> 1] & 15) >= 8 && i[a + 1] && (i[a + 1] = i[a + 1].toUpperCase());
  const s = `0x${i.join("")}`;
  return pl.set(`${n}.${e}`, s), s;
}
function Tn(n, e) {
  if (!Bn(n, { strict: !1 }))
    throw new Wi({ address: n });
  return Ru(n, e);
}
const j1 = /^0x[a-fA-F0-9]{40}$/, hl = /* @__PURE__ */ new pf(8192);
function Bn(n, e) {
  const { strict: t = !0 } = e ?? {}, r = `${n}.${t}`;
  if (hl.has(r))
    return hl.get(r);
  const i = j1.test(n) ? n.toLowerCase() === n ? !0 : t ? Ru(n) === n : !0 : !1;
  return hl.set(r, i), i;
}
function ba(n) {
  return typeof n[0] == "string" ? Bu(n) : W1(n);
}
function W1(n) {
  let e = 0;
  for (const i of n)
    e += i.length;
  const t = new Uint8Array(e);
  let r = 0;
  for (const i of n)
    t.set(i, r), r += i.length;
  return t;
}
function Bu(n) {
  return `0x${n.reduce((e, t) => e + t.replace("0x", ""), "")}`;
}
function Zc(n, e, t, { strict: r } = {}) {
  return Jr(n, { strict: !1 }) ? K1(n, e, t, {
    strict: r
  }) : Sy(n, e, t, {
    strict: r
  });
}
function Ty(n, e) {
  if (typeof e == "number" && e > 0 && e > Ne(n) - 1)
    throw new uy({
      offset: e,
      position: "start",
      size: Ne(n)
    });
}
function Py(n, e, t) {
  if (typeof e == "number" && typeof t == "number" && Ne(n) !== t - e)
    throw new uy({
      offset: t,
      position: "end",
      size: Ne(n)
    });
}
function Sy(n, e, t, { strict: r } = {}) {
  Ty(n, e);
  const i = n.slice(e, t);
  return r && Py(i, e, t), i;
}
function K1(n, e, t, { strict: r } = {}) {
  Ty(n, e);
  const i = `0x${n.replace("0x", "").slice((e ?? 0) * 2, (t ?? n.length) * 2)}`;
  return r && Py(i, e, t), i;
}
const Q1 = /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;
function hf(n, e) {
  if (n.length !== e.length)
    throw new X2({
      expectedLength: n.length,
      givenLength: e.length
    });
  const t = q1({
    params: n,
    values: e
  }), r = mf(t);
  return r.length === 0 ? "0x" : r;
}
function q1({ params: n, values: e }) {
  const t = [];
  for (let r = 0; r < n.length; r++)
    t.push(yf({ param: n[r], value: e[r] }));
  return t;
}
function yf({ param: n, value: e }) {
  const t = bf(n.type);
  if (t) {
    const [r, i] = t;
    return Y1(e, { length: r, param: { ...n, type: i } });
  }
  if (n.type === "tuple")
    return nw(e, {
      param: n
    });
  if (n.type === "address")
    return J1(e);
  if (n.type === "bool")
    return X1(e);
  if (n.type.startsWith("uint") || n.type.startsWith("int")) {
    const r = n.type.startsWith("int"), [, , i = "256"] = Q1.exec(n.type) ?? [];
    return ew(e, {
      signed: r,
      size: Number(i)
    });
  }
  if (n.type.startsWith("bytes"))
    return Z1(e, { param: n });
  if (n.type === "string")
    return tw(e);
  throw new r1(n.type, {
    docsPath: "/docs/contract/encodeAbiParameters"
  });
}
function mf(n) {
  let e = 0;
  for (let s = 0; s < n.length; s++) {
    const { dynamic: a, encoded: o } = n[s];
    a ? e += 32 : e += Ne(o);
  }
  const t = [], r = [];
  let i = 0;
  for (let s = 0; s < n.length; s++) {
    const { dynamic: a, encoded: o } = n[s];
    a ? (t.push(re(e + i, { size: 32 })), r.push(o), i += Ne(o)) : t.push(o);
  }
  return ba([...t, ...r]);
}
function J1(n) {
  if (!Bn(n))
    throw new Wi({ address: n });
  return { dynamic: !1, encoded: Kr(n.toLowerCase()) };
}
function Y1(n, { length: e, param: t }) {
  const r = e === null;
  if (!Array.isArray(n))
    throw new s1(n);
  if (!r && n.length !== e)
    throw new Y2({
      expectedLength: e,
      givenLength: n.length,
      type: `${t.type}[${e}]`
    });
  let i = !1;
  const s = [];
  for (let a = 0; a < n.length; a++) {
    const o = yf({ param: t, value: n[a] });
    o.dynamic && (i = !0), s.push(o);
  }
  if (r || i) {
    const a = mf(s);
    if (r) {
      const o = re(s.length, { size: 32 });
      return {
        dynamic: !0,
        encoded: s.length > 0 ? ba([o, a]) : o
      };
    }
    if (i)
      return { dynamic: !0, encoded: a };
  }
  return {
    dynamic: !1,
    encoded: ba(s.map(({ encoded: a }) => a))
  };
}
function Z1(n, { param: e }) {
  const [, t] = e.type.split("bytes"), r = Ne(n);
  if (!t) {
    let i = n;
    return r % 32 !== 0 && (i = Kr(i, {
      dir: "right",
      size: Math.ceil((n.length - 2) / 2 / 32) * 32
    })), {
      dynamic: !0,
      encoded: ba([Kr(re(r, { size: 32 })), i])
    };
  }
  if (r !== Number.parseInt(t))
    throw new Z2({
      expectedSize: Number.parseInt(t),
      value: n
    });
  return { dynamic: !1, encoded: Kr(n, { dir: "right" }) };
}
function X1(n) {
  if (typeof n != "boolean")
    throw new j(`Invalid boolean value: "${n}" (type: ${typeof n}). Expected: \`true\` or \`false\`.`);
  return { dynamic: !1, encoded: Kr(fy(n)) };
}
function ew(n, { signed: e, size: t = 256 }) {
  if (typeof t == "number") {
    const r = 2n ** (BigInt(t) - (e ? 1n : 0n)) - 1n, i = e ? -r - 1n : 0n;
    if (n > r || n < i)
      throw new dy({
        max: r.toString(),
        min: i.toString(),
        signed: e,
        size: t / 8,
        value: n.toString()
      });
  }
  return {
    dynamic: !1,
    encoded: re(n, {
      size: 32,
      signed: e
    })
  };
}
function tw(n) {
  const e = py(n), t = Math.ceil(Ne(e) / 32), r = [];
  for (let i = 0; i < t; i++)
    r.push(Kr(Zc(e, i * 32, (i + 1) * 32), {
      dir: "right"
    }));
  return {
    dynamic: !0,
    encoded: ba([
      Kr(re(Ne(e), { size: 32 })),
      ...r
    ])
  };
}
function nw(n, { param: e }) {
  let t = !1;
  const r = [];
  for (let i = 0; i < e.components.length; i++) {
    const s = e.components[i], a = Array.isArray(n) ? i : s.name, o = yf({
      param: s,
      value: n[a]
    });
    r.push(o), o.dynamic && (t = !0);
  }
  return {
    dynamic: t,
    encoded: t ? mf(r) : ba(r.map(({ encoded: i }) => i))
  };
}
function bf(n) {
  const e = n.match(/^(.*)\[(\d+)?\]$/);
  return e ? (
    // Return `null` if the array is dynamic.
    [e[2] ? Number(e[2]) : null, e[1]]
  ) : void 0;
}
const xf = (n) => Zc(vy(n), 0, 4);
function qo(n) {
  const { abi: e, args: t = [], name: r } = n, i = Jr(r, { strict: !1 }), s = e.filter((o) => i ? o.type === "function" ? xf(o) === r : o.type === "event" ? Nu(o) === r : !1 : "name" in o && o.name === r);
  if (s.length === 0)
    return;
  if (s.length === 1)
    return s[0];
  let a;
  for (const o of s) {
    if (!("inputs" in o))
      continue;
    if (!t || t.length === 0) {
      if (!o.inputs || o.inputs.length === 0)
        return o;
      continue;
    }
    if (!o.inputs || o.inputs.length === 0 || o.inputs.length !== t.length)
      continue;
    if (t.every((u, l) => {
      const d = "inputs" in o && o.inputs[l];
      return d ? td(u, d) : !1;
    })) {
      if (a && "inputs" in a && a.inputs) {
        const u = Iy(o.inputs, a.inputs, t);
        if (u)
          throw new n1({
            abiItem: o,
            type: u[0]
          }, {
            abiItem: a,
            type: u[1]
          });
      }
      a = o;
    }
  }
  return a || s[0];
}
function td(n, e) {
  const t = typeof n, r = e.type;
  switch (r) {
    case "address":
      return Bn(n, { strict: !1 });
    case "bool":
      return t === "boolean";
    case "function":
      return t === "string";
    case "string":
      return t === "string";
    default:
      return r === "tuple" && "components" in e ? Object.values(e.components).every((i, s) => td(Object.values(n)[s], i)) : /^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/.test(r) ? t === "number" || t === "bigint" : /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/.test(r) ? t === "string" || n instanceof Uint8Array : /[a-z]+[1-9]{0,3}(\[[0-9]{0,}\])+$/.test(r) ? Array.isArray(n) && n.every((i) => td(i, {
        ...e,
        // Pop off `[]` or `[M]` from end of type
        type: r.replace(/(\[[0-9]{0,}\])$/, "")
      })) : !1;
  }
}
function Iy(n, e, t) {
  for (const r in n) {
    const i = n[r], s = e[r];
    if (i.type === "tuple" && s.type === "tuple" && "components" in i && "components" in s)
      return Iy(i.components, s.components, t[r]);
    const a = [i.type, s.type];
    if (a.includes("address") && a.includes("bytes20") ? !0 : a.includes("address") && a.includes("string") ? Bn(t[r], { strict: !1 }) : a.includes("address") && a.includes("bytes") ? Bn(t[r], { strict: !1 }) : !1)
      return a;
  }
}
const R0 = "/docs/contract/encodeEventTopics";
function gf(n) {
  var c;
  const { abi: e, eventName: t, args: r } = n;
  let i = e[0];
  if (t) {
    const u = qo({ abi: e, name: t });
    if (!u)
      throw new v0(t, { docsPath: R0 });
    i = u;
  }
  if (i.type !== "event")
    throw new v0(void 0, { docsPath: R0 });
  const s = dr(i), a = Nu(s);
  let o = [];
  if (r && "inputs" in i) {
    const u = (c = i.inputs) == null ? void 0 : c.filter((d) => "indexed" in d && d.indexed), l = Array.isArray(r) ? r : Object.values(r).length > 0 ? (u == null ? void 0 : u.map((d) => r[d.name])) ?? [] : [];
    l.length > 0 && (o = (u == null ? void 0 : u.map((d, f) => Array.isArray(l[f]) ? l[f].map((p, y) => B0({ param: d, value: l[f][y] })) : typeof l[f] < "u" && l[f] !== null ? B0({ param: d, value: l[f] }) : null)) ?? []);
  }
  return [a, ...o];
}
function B0({ param: n, value: e }) {
  if (n.type === "string" || n.type === "bytes")
    return Xi(Qo(e));
  if (n.type === "tuple" || n.type.match(/^(.*)\[(\d+)?\]$/))
    throw new o1(n.type);
  return hf([n], [e]);
}
function rw(n, { method: e }) {
  var r, i;
  const t = {};
  return n.transport.type === "fallback" && ((i = (r = n.transport).onResponse) == null || i.call(r, ({ method: s, response: a, status: o, transport: c }) => {
    o === "success" && e === s && (t[a] = c.request);
  })), (s) => t[s] || n.request;
}
async function Cy(n, e) {
  const { address: t, abi: r, args: i, eventName: s, fromBlock: a, strict: o, toBlock: c } = e, u = rw(n, {
    method: "eth_newFilter"
  }), l = s ? gf({
    abi: r,
    args: i,
    eventName: s
  }) : void 0, d = await n.request({
    method: "eth_newFilter",
    params: [
      {
        address: t,
        fromBlock: typeof a == "bigint" ? re(a) : a,
        toBlock: typeof c == "bigint" ? re(c) : c,
        topics: l
      }
    ]
  });
  return {
    abi: r,
    args: i,
    eventName: s,
    id: d,
    request: u(d),
    strict: !!o,
    type: "event"
  };
}
function xr(n) {
  return typeof n == "string" ? { address: n, type: "json-rpc" } : n;
}
const _0 = "/docs/contract/encodeFunctionData";
function iw(n) {
  const { abi: e, args: t, functionName: r } = n;
  let i = e[0];
  if (r) {
    const s = qo({
      abi: e,
      args: t,
      name: r
    });
    if (!s)
      throw new Jc(r, { docsPath: _0 });
    i = s;
  }
  if (i.type !== "function")
    throw new Jc(void 0, { docsPath: _0 });
  return {
    abi: [i],
    functionName: xf(dr(i))
  };
}
function ei(n) {
  const { args: e } = n, { abi: t, functionName: r } = (() => {
    var o;
    return n.abi.length === 1 && ((o = n.functionName) != null && o.startsWith("0x")) ? n : iw(n);
  })(), i = t[0], s = r, a = "inputs" in i && i.inputs ? hf(i.inputs, e ?? []) : void 0;
  return Bu([s, a ?? "0x"]);
}
const sw = {
  1: "An `assert` condition failed.",
  17: "Arithmetic operation resulted in underflow or overflow.",
  18: "Division or modulo by zero (e.g. `5 / 0` or `23 % 0`).",
  33: "Attempted to convert to an invalid type.",
  34: "Attempted to access a storage byte array that is incorrectly encoded.",
  49: "Performed `.pop()` on an empty array",
  50: "Array index is out of bounds.",
  65: "Allocated too much memory or created an array which is too large.",
  81: "Attempted to call a zero-initialized variable of internal function type."
}, aw = {
  inputs: [
    {
      name: "message",
      type: "string"
    }
  ],
  name: "Error",
  type: "error"
}, ow = {
  inputs: [
    {
      name: "reason",
      type: "uint256"
    }
  ],
  name: "Panic",
  type: "error"
};
class k0 extends j {
  constructor({ offset: e }) {
    super(`Offset \`${e}\` cannot be negative.`, {
      name: "NegativeOffsetError"
    });
  }
}
class Oy extends j {
  constructor({ length: e, position: t }) {
    super(`Position \`${t}\` is out of bounds (\`0 < position < ${e}\`).`, { name: "PositionOutOfBoundsError" });
  }
}
class cw extends j {
  constructor({ count: e, limit: t }) {
    super(`Recursive read limit of \`${t}\` exceeded (recursive read count: \`${e}\`).`, { name: "RecursiveReadLimitExceededError" });
  }
}
const uw = {
  bytes: new Uint8Array(),
  dataView: new DataView(new ArrayBuffer(0)),
  position: 0,
  positionReadCount: /* @__PURE__ */ new Map(),
  recursiveReadCount: 0,
  recursiveReadLimit: Number.POSITIVE_INFINITY,
  assertReadLimit() {
    if (this.recursiveReadCount >= this.recursiveReadLimit)
      throw new cw({
        count: this.recursiveReadCount + 1,
        limit: this.recursiveReadLimit
      });
  },
  assertPosition(n) {
    if (n < 0 || n > this.bytes.length - 1)
      throw new Oy({
        length: this.bytes.length,
        position: n
      });
  },
  decrementPosition(n) {
    if (n < 0)
      throw new k0({ offset: n });
    const e = this.position - n;
    this.assertPosition(e), this.position = e;
  },
  getReadCount(n) {
    return this.positionReadCount.get(n || this.position) || 0;
  },
  incrementPosition(n) {
    if (n < 0)
      throw new k0({ offset: n });
    const e = this.position + n;
    this.assertPosition(e), this.position = e;
  },
  inspectByte(n) {
    const e = n ?? this.position;
    return this.assertPosition(e), this.bytes[e];
  },
  inspectBytes(n, e) {
    const t = e ?? this.position;
    return this.assertPosition(t + n - 1), this.bytes.subarray(t, t + n);
  },
  inspectUint8(n) {
    const e = n ?? this.position;
    return this.assertPosition(e), this.bytes[e];
  },
  inspectUint16(n) {
    const e = n ?? this.position;
    return this.assertPosition(e + 1), this.dataView.getUint16(e);
  },
  inspectUint24(n) {
    const e = n ?? this.position;
    return this.assertPosition(e + 2), (this.dataView.getUint16(e) << 8) + this.dataView.getUint8(e + 2);
  },
  inspectUint32(n) {
    const e = n ?? this.position;
    return this.assertPosition(e + 3), this.dataView.getUint32(e);
  },
  pushByte(n) {
    this.assertPosition(this.position), this.bytes[this.position] = n, this.position++;
  },
  pushBytes(n) {
    this.assertPosition(this.position + n.length - 1), this.bytes.set(n, this.position), this.position += n.length;
  },
  pushUint8(n) {
    this.assertPosition(this.position), this.bytes[this.position] = n, this.position++;
  },
  pushUint16(n) {
    this.assertPosition(this.position + 1), this.dataView.setUint16(this.position, n), this.position += 2;
  },
  pushUint24(n) {
    this.assertPosition(this.position + 2), this.dataView.setUint16(this.position, n >> 8), this.dataView.setUint8(this.position + 2, n & 255), this.position += 3;
  },
  pushUint32(n) {
    this.assertPosition(this.position + 3), this.dataView.setUint32(this.position, n), this.position += 4;
  },
  readByte() {
    this.assertReadLimit(), this._touch();
    const n = this.inspectByte();
    return this.position++, n;
  },
  readBytes(n, e) {
    this.assertReadLimit(), this._touch();
    const t = this.inspectBytes(n);
    return this.position += e ?? n, t;
  },
  readUint8() {
    this.assertReadLimit(), this._touch();
    const n = this.inspectUint8();
    return this.position += 1, n;
  },
  readUint16() {
    this.assertReadLimit(), this._touch();
    const n = this.inspectUint16();
    return this.position += 2, n;
  },
  readUint24() {
    this.assertReadLimit(), this._touch();
    const n = this.inspectUint24();
    return this.position += 3, n;
  },
  readUint32() {
    this.assertReadLimit(), this._touch();
    const n = this.inspectUint32();
    return this.position += 4, n;
  },
  get remaining() {
    return this.bytes.length - this.position;
  },
  setPosition(n) {
    const e = this.position;
    return this.assertPosition(n), this.position = n, () => this.position = e;
  },
  _touch() {
    if (this.recursiveReadLimit === Number.POSITIVE_INFINITY)
      return;
    const n = this.getReadCount();
    this.positionReadCount.set(this.position, n + 1), n > 0 && this.recursiveReadCount++;
  }
};
function wf(n, { recursiveReadLimit: e = 8192 } = {}) {
  const t = Object.create(uw);
  return t.bytes = n, t.dataView = new DataView(n.buffer, n.byteOffset, n.byteLength), t.positionReadCount = /* @__PURE__ */ new Map(), t.recursiveReadLimit = e, t;
}
function lw(n, e = {}) {
  typeof e.size < "u" && Ln(n, { size: e.size });
  const t = pt(n, e);
  return fo(t, e);
}
function dw(n, e = {}) {
  let t = n;
  if (typeof e.size < "u" && (Ln(t, { size: e.size }), t = uf(t)), t.length > 1 || t[0] > 1)
    throw new u1(t);
  return !!t[0];
}
function ar(n, e = {}) {
  typeof e.size < "u" && Ln(n, { size: e.size });
  const t = pt(n, e);
  return ha(t, e);
}
function fw(n, e = {}) {
  let t = n;
  return typeof e.size < "u" && (Ln(t, { size: e.size }), t = uf(t, { dir: "right" })), new TextDecoder().decode(t);
}
function _u(n, e) {
  const t = typeof e == "string" ? fr(e) : e, r = wf(t);
  if (Ne(t) === 0 && n.length > 0)
    throw new of();
  if (Ne(e) && Ne(e) < 32)
    throw new ay({
      data: typeof e == "string" ? e : pt(e),
      params: n,
      size: Ne(e)
    });
  let i = 0;
  const s = [];
  for (let a = 0; a < n.length; ++a) {
    const o = n[a];
    r.setPosition(i);
    const [c, u] = Es(r, o, {
      staticPosition: 0
    });
    i += u, s.push(c);
  }
  return s;
}
function Es(n, e, { staticPosition: t }) {
  const r = bf(e.type);
  if (r) {
    const [i, s] = r;
    return hw(n, { ...e, type: s }, { length: i, staticPosition: t });
  }
  if (e.type === "tuple")
    return xw(n, e, { staticPosition: t });
  if (e.type === "address")
    return pw(n);
  if (e.type === "bool")
    return yw(n);
  if (e.type.startsWith("bytes"))
    return mw(n, e, { staticPosition: t });
  if (e.type.startsWith("uint") || e.type.startsWith("int"))
    return bw(n, e);
  if (e.type === "string")
    return gw(n, { staticPosition: t });
  throw new i1(e.type, {
    docsPath: "/docs/contract/decodeAbiParameters"
  });
}
const L0 = 32, nd = 32;
function pw(n) {
  const e = n.readBytes(32);
  return [Ru(pt(Sy(e, -20))), 32];
}
function hw(n, e, { length: t, staticPosition: r }) {
  if (!t) {
    const a = ar(n.readBytes(nd)), o = r + a, c = o + L0;
    n.setPosition(o);
    const u = ar(n.readBytes(L0)), l = yo(e);
    let d = 0;
    const f = [];
    for (let p = 0; p < u; ++p) {
      n.setPosition(c + (l ? p * 32 : d));
      const [y, h] = Es(n, e, {
        staticPosition: c
      });
      d += h, f.push(y);
    }
    return n.setPosition(r + 32), [f, 32];
  }
  if (yo(e)) {
    const a = ar(n.readBytes(nd)), o = r + a, c = [];
    for (let u = 0; u < t; ++u) {
      n.setPosition(o + u * 32);
      const [l] = Es(n, e, {
        staticPosition: o
      });
      c.push(l);
    }
    return n.setPosition(r + 32), [c, 32];
  }
  let i = 0;
  const s = [];
  for (let a = 0; a < t; ++a) {
    const [o, c] = Es(n, e, {
      staticPosition: r + i
    });
    i += c, s.push(o);
  }
  return [s, i];
}
function yw(n) {
  return [dw(n.readBytes(32), { size: 32 }), 32];
}
function mw(n, e, { staticPosition: t }) {
  const [r, i] = e.type.split("bytes");
  if (!i) {
    const a = ar(n.readBytes(32));
    n.setPosition(t + a);
    const o = ar(n.readBytes(32));
    if (o === 0)
      return n.setPosition(t + 32), ["0x", 32];
    const c = n.readBytes(o);
    return n.setPosition(t + 32), [pt(c), 32];
  }
  return [pt(n.readBytes(Number.parseInt(i), 32)), 32];
}
function bw(n, e) {
  const t = e.type.startsWith("int"), r = Number.parseInt(e.type.split("int")[1] || "256"), i = n.readBytes(32);
  return [
    r > 48 ? lw(i, { signed: t }) : ar(i, { signed: t }),
    32
  ];
}
function xw(n, e, { staticPosition: t }) {
  const r = e.components.length === 0 || e.components.some(({ name: a }) => !a), i = r ? [] : {};
  let s = 0;
  if (yo(e)) {
    const a = ar(n.readBytes(nd)), o = t + a;
    for (let c = 0; c < e.components.length; ++c) {
      const u = e.components[c];
      n.setPosition(o + s);
      const [l, d] = Es(n, u, {
        staticPosition: o
      });
      s += d, i[r ? c : u == null ? void 0 : u.name] = l;
    }
    return n.setPosition(t + 32), [i, 32];
  }
  for (let a = 0; a < e.components.length; ++a) {
    const o = e.components[a], [c, u] = Es(n, o, {
      staticPosition: t
    });
    i[r ? a : o == null ? void 0 : o.name] = c, s += u;
  }
  return [i, s];
}
function gw(n, { staticPosition: e }) {
  const t = ar(n.readBytes(32)), r = e + t;
  n.setPosition(r);
  const i = ar(n.readBytes(32));
  if (i === 0)
    return n.setPosition(e + 32), ["", 32];
  const s = n.readBytes(i, 32), a = fw(uf(s));
  return n.setPosition(e + 32), [a, 32];
}
function yo(n) {
  var r;
  const { type: e } = n;
  if (e === "string" || e === "bytes" || e.endsWith("[]"))
    return !0;
  if (e === "tuple")
    return (r = n.components) == null ? void 0 : r.some(yo);
  const t = bf(n.type);
  return !!(t && yo({ ...n, type: t[1] }));
}
function ww(n) {
  const { abi: e, data: t } = n, r = Zc(t, 0, 4);
  if (r === "0x")
    throw new of();
  const s = [...e || [], aw, ow].find((a) => a.type === "error" && r === xf(dr(a)));
  if (!s)
    throw new oy(r, {
      docsPath: "/docs/contract/decodeErrorResult"
    });
  return {
    abiItem: s,
    args: "inputs" in s && s.inputs && s.inputs.length > 0 ? _u(s.inputs, Zc(t, 4)) : void 0,
    errorName: s.name
  };
}
const mo = (n, e, t) => JSON.stringify(n, (r, i) => typeof i == "bigint" ? i.toString() : i, t);
function Ny({ abiItem: n, args: e, includeFunctionName: t = !0, includeName: r = !1 }) {
  if ("name" in n && "inputs" in n && n.inputs)
    return `${t ? n.name : ""}(${n.inputs.map((i, s) => `${r && i.name ? `${i.name}: ` : ""}${typeof e[s] == "object" ? mo(e[s]) : e[s]}`).join(", ")})`;
}
const Aw = {
  gwei: 9,
  wei: 18
}, Ew = {
  ether: -9,
  wei: 9
};
function Ry(n, e) {
  let t = n.toString();
  const r = t.startsWith("-");
  r && (t = t.slice(1)), t = t.padStart(e, "0");
  let [i, s] = [
    t.slice(0, t.length - e),
    t.slice(t.length - e)
  ];
  return s = s.replace(/(0+)$/, ""), `${r ? "-" : ""}${i || "0"}${s ? `.${s}` : ""}`;
}
function Af(n, e = "wei") {
  return Ry(n, Aw[e]);
}
function dt(n, e = "wei") {
  return Ry(n, Ew[e]);
}
class vw extends j {
  constructor({ address: e }) {
    super(`State for account "${e}" is set multiple times.`, {
      name: "AccountStateConflictError"
    });
  }
}
class Tw extends j {
  constructor() {
    super("state and stateDiff are set on the same account.", {
      name: "StateAssignmentConflictError"
    });
  }
}
function M0(n) {
  return n.reduce((e, { slot: t, value: r }) => `${e}        ${t}: ${r}
`, "");
}
function Pw(n) {
  return n.reduce((e, { address: t, ...r }) => {
    let i = `${e}    ${t}:
`;
    return r.nonce && (i += `      nonce: ${r.nonce}
`), r.balance && (i += `      balance: ${r.balance}
`), r.code && (i += `      code: ${r.code}
`), r.state && (i += `      state:
`, i += M0(r.state)), r.stateDiff && (i += `      stateDiff:
`, i += M0(r.stateDiff)), i;
  }, `  State Override:
`).slice(0, -1);
}
function Jo(n) {
  const e = Object.entries(n).map(([r, i]) => i === void 0 || i === !1 ? null : [r, i]).filter(Boolean), t = e.reduce((r, [i]) => Math.max(r, i.length), 0);
  return e.map(([r, i]) => `  ${`${r}:`.padEnd(t + 1)}  ${i}`).join(`
`);
}
class Sw extends j {
  constructor() {
    super([
      "Cannot specify both a `gasPrice` and a `maxFeePerGas`/`maxPriorityFeePerGas`.",
      "Use `maxFeePerGas`/`maxPriorityFeePerGas` for EIP-1559 compatible networks, and `gasPrice` for others."
    ].join(`
`), { name: "FeeConflictError" });
  }
}
class Iw extends j {
  constructor({ transaction: e }) {
    super("Cannot infer a transaction type from provided transaction.", {
      metaMessages: [
        "Provided Transaction:",
        "{",
        Jo(e),
        "}",
        "",
        "To infer the type, either provide:",
        "- a `type` to the Transaction, or",
        "- an EIP-1559 Transaction with `maxFeePerGas`, or",
        "- an EIP-2930 Transaction with `gasPrice` & `accessList`, or",
        "- an EIP-4844 Transaction with `blobs`, `blobVersionedHashes`, `sidecars`, or",
        "- an EIP-7702 Transaction with `authorizationList`, or",
        "- a Legacy Transaction with `gasPrice`"
      ],
      name: "InvalidSerializableTransactionError"
    });
  }
}
class Cw extends j {
  constructor(e, { account: t, docsPath: r, chain: i, data: s, gas: a, gasPrice: o, maxFeePerGas: c, maxPriorityFeePerGas: u, nonce: l, to: d, value: f }) {
    var y;
    const p = Jo({
      chain: i && `${i == null ? void 0 : i.name} (id: ${i == null ? void 0 : i.id})`,
      from: t == null ? void 0 : t.address,
      to: d,
      value: typeof f < "u" && `${Af(f)} ${((y = i == null ? void 0 : i.nativeCurrency) == null ? void 0 : y.symbol) || "ETH"}`,
      data: s,
      gas: a,
      gasPrice: typeof o < "u" && `${dt(o)} gwei`,
      maxFeePerGas: typeof c < "u" && `${dt(c)} gwei`,
      maxPriorityFeePerGas: typeof u < "u" && `${dt(u)} gwei`,
      nonce: l
    });
    super(e.shortMessage, {
      cause: e,
      docsPath: r,
      metaMessages: [
        ...e.metaMessages ? [...e.metaMessages, " "] : [],
        "Request Arguments:",
        p
      ].filter(Boolean),
      name: "TransactionExecutionError"
    }), Object.defineProperty(this, "cause", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this.cause = e;
  }
}
const Ow = (n) => n, By = (n) => n;
class Nw extends j {
  constructor(e, { account: t, docsPath: r, chain: i, data: s, gas: a, gasPrice: o, maxFeePerGas: c, maxPriorityFeePerGas: u, nonce: l, to: d, value: f, stateOverride: p }) {
    var b;
    const y = t ? xr(t) : void 0;
    let h = Jo({
      from: y == null ? void 0 : y.address,
      to: d,
      value: typeof f < "u" && `${Af(f)} ${((b = i == null ? void 0 : i.nativeCurrency) == null ? void 0 : b.symbol) || "ETH"}`,
      data: s,
      gas: a,
      gasPrice: typeof o < "u" && `${dt(o)} gwei`,
      maxFeePerGas: typeof c < "u" && `${dt(c)} gwei`,
      maxPriorityFeePerGas: typeof u < "u" && `${dt(u)} gwei`,
      nonce: l
    });
    p && (h += `
${Pw(p)}`), super(e.shortMessage, {
      cause: e,
      docsPath: r,
      metaMessages: [
        ...e.metaMessages ? [...e.metaMessages, " "] : [],
        "Raw Call Arguments:",
        h
      ].filter(Boolean),
      name: "CallExecutionError"
    }), Object.defineProperty(this, "cause", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this.cause = e;
  }
}
class Rw extends j {
  constructor(e, { abi: t, args: r, contractAddress: i, docsPath: s, functionName: a, sender: o }) {
    const c = qo({ abi: t, args: r, name: a }), u = c ? Ny({
      abiItem: c,
      args: r,
      includeFunctionName: !1,
      includeName: !1
    }) : void 0, l = c ? dr(c, { includeName: !0 }) : void 0, d = Jo({
      address: i && Ow(i),
      function: l,
      args: u && u !== "()" && `${[...Array((a == null ? void 0 : a.length) ?? 0).keys()].map(() => " ").join("")}${u}`,
      sender: o
    });
    super(e.shortMessage || `An unknown error occurred while executing the contract function "${a}".`, {
      cause: e,
      docsPath: s,
      metaMessages: [
        ...e.metaMessages ? [...e.metaMessages, " "] : [],
        d && "Contract Call:",
        d
      ].filter(Boolean),
      name: "ContractFunctionExecutionError"
    }), Object.defineProperty(this, "abi", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "args", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "cause", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "contractAddress", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "formattedArgs", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "functionName", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "sender", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this.abi = t, this.args = r, this.cause = e, this.contractAddress = i, this.functionName = a, this.sender = o;
  }
}
class Bw extends j {
  constructor({ abi: e, data: t, functionName: r, message: i }) {
    let s, a, o, c;
    if (t && t !== "0x")
      try {
        a = ww({ abi: e, data: t });
        const { abiItem: l, errorName: d, args: f } = a;
        if (d === "Error")
          c = f[0];
        else if (d === "Panic") {
          const [p] = f;
          c = sw[p];
        } else {
          const p = l ? dr(l, { includeName: !0 }) : void 0, y = l && f ? Ny({
            abiItem: l,
            args: f,
            includeFunctionName: !1,
            includeName: !1
          }) : void 0;
          o = [
            p ? `Error: ${p}` : "",
            y && y !== "()" ? `       ${[...Array((d == null ? void 0 : d.length) ?? 0).keys()].map(() => " ").join("")}${y}` : ""
          ];
        }
      } catch (l) {
        s = l;
      }
    else i && (c = i);
    let u;
    s instanceof oy && (u = s.signature, o = [
      `Unable to decode signature "${u}" as it was not found on the provided ABI.`,
      "Make sure you are using the correct ABI and that the error exists on it.",
      `You can look up the decoded signature here: https://openchain.xyz/signatures?query=${u}.`
    ]), super(c && c !== "execution reverted" || u ? [
      `The contract function "${r}" reverted with the following ${u ? "signature" : "reason"}:`,
      c || u
    ].join(`
`) : `The contract function "${r}" reverted.`, {
      cause: s,
      metaMessages: o,
      name: "ContractFunctionRevertedError"
    }), Object.defineProperty(this, "data", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "raw", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "reason", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "signature", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this.data = a, this.raw = t, this.reason = c, this.signature = u;
  }
}
class _w extends j {
  constructor({ functionName: e }) {
    super(`The contract function "${e}" returned no data ("0x").`, {
      metaMessages: [
        "This could be due to any of the following:",
        `  - The contract does not have the function "${e}",`,
        "  - The parameters passed to the contract function may be invalid, or",
        "  - The address is not a contract."
      ],
      name: "ContractFunctionZeroDataError"
    });
  }
}
class kw extends j {
  constructor({ factory: e }) {
    super(`Deployment for counterfactual contract call failed${e ? ` for factory "${e}".` : ""}`, {
      metaMessages: [
        "Please ensure:",
        "- The `factory` is a valid contract deployment factory (ie. Create2 Factory, ERC-4337 Factory, etc).",
        "- The `factoryData` is a valid encoded function call for contract deployment function on the factory."
      ],
      name: "CounterfactualDeploymentFailedError"
    });
  }
}
class _y extends j {
  constructor({ data: e, message: t }) {
    super(t || "", { name: "RawContractError" }), Object.defineProperty(this, "code", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: 3
    }), Object.defineProperty(this, "data", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this.data = e;
  }
}
class rT extends j {
  constructor({ body: e, cause: t, details: r, headers: i, status: s, url: a }) {
    super("HTTP request failed.", {
      cause: t,
      details: r,
      metaMessages: [
        s && `Status: ${s}`,
        `URL: ${By(a)}`,
        e && `Request body: ${mo(e)}`
      ].filter(Boolean),
      name: "HttpRequestError"
    }), Object.defineProperty(this, "body", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "headers", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "status", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "url", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this.body = e, this.headers = i, this.status = s, this.url = a;
  }
}
class ky extends j {
  constructor({ body: e, error: t, url: r }) {
    super("RPC Request failed.", {
      cause: t,
      details: t.message,
      metaMessages: [`URL: ${By(r)}`, `Request body: ${mo(e)}`],
      name: "RpcRequestError"
    }), Object.defineProperty(this, "code", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "data", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this.code = t.code, this.data = t.data;
  }
}
const Lw = -1;
class Ly extends j {
  constructor(e, { code: t, docsPath: r, metaMessages: i, name: s, shortMessage: a }) {
    super(a, {
      cause: e,
      docsPath: r,
      metaMessages: i || (e == null ? void 0 : e.metaMessages),
      name: s || "RpcError"
    }), Object.defineProperty(this, "code", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this.name = s || e.name, this.code = e instanceof ky ? e.code : t ?? Lw;
  }
}
class ku extends Ly {
  constructor(e) {
    super(e, {
      code: ku.code,
      name: "InternalRpcError",
      shortMessage: "An internal error was received."
    });
  }
}
Object.defineProperty(ku, "code", {
  enumerable: !0,
  configurable: !0,
  writable: !0,
  value: -32603
});
class Lu extends Ly {
  constructor(e) {
    super(e, {
      code: Lu.code,
      name: "InvalidInputRpcError",
      shortMessage: [
        "Missing or invalid parameters.",
        "Double check you have provided the correct parameters."
      ].join(`
`)
    });
  }
}
Object.defineProperty(Lu, "code", {
  enumerable: !0,
  configurable: !0,
  writable: !0,
  value: -32e3
});
const Mw = 3;
function Mu(n, { abi: e, address: t, args: r, docsPath: i, functionName: s, sender: a }) {
  const o = n instanceof _y ? n : n instanceof j ? n.walk((y) => "data" in y) || n.walk() : {}, { code: c, data: u, details: l, message: d, shortMessage: f } = o, p = n instanceof of ? new _w({ functionName: s }) : [Mw, ku.code].includes(c) && (u || l || d || f) ? new Bw({
    abi: e,
    data: typeof u == "object" ? u.data : u,
    functionName: s,
    message: o instanceof ky ? l : f ?? d
  }) : n;
  return new Rw(p, {
    abi: e,
    args: r,
    contractAddress: t,
    docsPath: i,
    functionName: s,
    sender: a
  });
}
function Dw(n) {
  const e = Xi(`0x${n.substring(4)}`).substring(26);
  return Ru(`0x${e}`);
}
async function Uw({ hash: n, signature: e }) {
  const t = Jr(n) ? n : Yr(n), { secp256k1: r } = await Promise.resolve().then(() => jA);
  return `0x${(() => {
    if (typeof e == "object" && "r" in e && "s" in e) {
      const { r: u, s: l, v: d, yParity: f } = e, p = Number(f ?? d), y = D0(p);
      return new r.Signature(fo(u), fo(l)).addRecoveryBit(y);
    }
    const a = Jr(e) ? e : Yr(e);
    if (Ne(a) !== 65)
      throw new Error("invalid signature length");
    const o = ha(`0x${a.slice(130)}`), c = D0(o);
    return r.Signature.fromCompact(a.substring(2, 130)).addRecoveryBit(c);
  })().recoverPublicKey(t.substring(2)).toHex(!1)}`;
}
function D0(n) {
  if (n === 0 || n === 1)
    return n;
  if (n === 27)
    return 0;
  if (n === 28)
    return 1;
  throw new Error("Invalid yParityOrV value");
}
async function Fw({ hash: n, signature: e }) {
  return Dw(await Uw({ hash: n, signature: e }));
}
function Gw(n, e = "hex") {
  const t = My(n), r = wf(new Uint8Array(t.length));
  return t.encode(r), e === "hex" ? pt(r.bytes) : r.bytes;
}
function My(n) {
  return Array.isArray(n) ? Hw(n.map((e) => My(e))) : $w(n);
}
function Hw(n) {
  const e = n.reduce((i, s) => i + s.length, 0), t = Dy(e);
  return {
    length: e <= 55 ? 1 + e : 1 + t + e,
    encode(i) {
      e <= 55 ? i.pushByte(192 + e) : (i.pushByte(247 + t), t === 1 ? i.pushUint8(e) : t === 2 ? i.pushUint16(e) : t === 3 ? i.pushUint24(e) : i.pushUint32(e));
      for (const { encode: s } of n)
        s(i);
    }
  };
}
function $w(n) {
  const e = typeof n == "string" ? fr(n) : n, t = Dy(e.length);
  return {
    length: e.length === 1 && e[0] < 128 ? 1 : e.length <= 55 ? 1 + e.length : 1 + t + e.length,
    encode(i) {
      e.length === 1 && e[0] < 128 ? i.pushBytes(e) : e.length <= 55 ? (i.pushByte(128 + e.length), i.pushBytes(e)) : (i.pushByte(183 + t), t === 1 ? i.pushUint8(e.length) : t === 2 ? i.pushUint16(e.length) : t === 3 ? i.pushUint24(e.length) : i.pushUint32(e.length), i.pushBytes(e));
    }
  };
}
function Dy(n) {
  if (n < 2 ** 8)
    return 1;
  if (n < 2 ** 16)
    return 2;
  if (n < 2 ** 24)
    return 3;
  if (n < 2 ** 32)
    return 4;
  throw new j("Length is too large.");
}
function Vw(n) {
  const { chainId: e, nonce: t, to: r } = n, i = n.contractAddress ?? n.address, s = Xi(Bu([
    "0x05",
    Gw([
      e ? re(e) : "0x",
      i,
      t ? re(t) : "0x"
    ])
  ]));
  return r === "bytes" ? fr(s) : s;
}
async function Uy(n) {
  const { authorization: e, signature: t } = n;
  return Fw({
    hash: Vw(e),
    signature: t ?? e
  });
}
class zw extends j {
  constructor(e, { account: t, docsPath: r, chain: i, data: s, gas: a, gasPrice: o, maxFeePerGas: c, maxPriorityFeePerGas: u, nonce: l, to: d, value: f }) {
    var y;
    const p = Jo({
      from: t == null ? void 0 : t.address,
      to: d,
      value: typeof f < "u" && `${Af(f)} ${((y = i == null ? void 0 : i.nativeCurrency) == null ? void 0 : y.symbol) || "ETH"}`,
      data: s,
      gas: a,
      gasPrice: typeof o < "u" && `${dt(o)} gwei`,
      maxFeePerGas: typeof c < "u" && `${dt(c)} gwei`,
      maxPriorityFeePerGas: typeof u < "u" && `${dt(u)} gwei`,
      nonce: l
    });
    super(e.shortMessage, {
      cause: e,
      docsPath: r,
      metaMessages: [
        ...e.metaMessages ? [...e.metaMessages, " "] : [],
        "Estimate Gas Arguments:",
        p
      ].filter(Boolean),
      name: "EstimateGasExecutionError"
    }), Object.defineProperty(this, "cause", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this.cause = e;
  }
}
class ms extends j {
  constructor({ cause: e, message: t } = {}) {
    var i;
    const r = (i = t == null ? void 0 : t.replace("execution reverted: ", "")) == null ? void 0 : i.replace("execution reverted", "");
    super(`Execution reverted ${r ? `with reason: ${r}` : "for an unknown reason"}.`, {
      cause: e,
      name: "ExecutionRevertedError"
    });
  }
}
Object.defineProperty(ms, "code", {
  enumerable: !0,
  configurable: !0,
  writable: !0,
  value: 3
});
Object.defineProperty(ms, "nodeMessage", {
  enumerable: !0,
  configurable: !0,
  writable: !0,
  value: /execution reverted/
});
class Xc extends j {
  constructor({ cause: e, maxFeePerGas: t } = {}) {
    super(`The fee cap (\`maxFeePerGas\`${t ? ` = ${dt(t)} gwei` : ""}) cannot be higher than the maximum allowed value (2^256-1).`, {
      cause: e,
      name: "FeeCapTooHighError"
    });
  }
}
Object.defineProperty(Xc, "nodeMessage", {
  enumerable: !0,
  configurable: !0,
  writable: !0,
  value: /max fee per gas higher than 2\^256-1|fee cap higher than 2\^256-1/
});
class rd extends j {
  constructor({ cause: e, maxFeePerGas: t } = {}) {
    super(`The fee cap (\`maxFeePerGas\`${t ? ` = ${dt(t)}` : ""} gwei) cannot be lower than the block base fee.`, {
      cause: e,
      name: "FeeCapTooLowError"
    });
  }
}
Object.defineProperty(rd, "nodeMessage", {
  enumerable: !0,
  configurable: !0,
  writable: !0,
  value: /max fee per gas less than block base fee|fee cap less than block base fee|transaction is outdated/
});
class id extends j {
  constructor({ cause: e, nonce: t } = {}) {
    super(`Nonce provided for the transaction ${t ? `(${t}) ` : ""}is higher than the next one expected.`, { cause: e, name: "NonceTooHighError" });
  }
}
Object.defineProperty(id, "nodeMessage", {
  enumerable: !0,
  configurable: !0,
  writable: !0,
  value: /nonce too high/
});
class sd extends j {
  constructor({ cause: e, nonce: t } = {}) {
    super([
      `Nonce provided for the transaction ${t ? `(${t}) ` : ""}is lower than the current nonce of the account.`,
      "Try increasing the nonce or find the latest nonce with `getTransactionCount`."
    ].join(`
`), { cause: e, name: "NonceTooLowError" });
  }
}
Object.defineProperty(sd, "nodeMessage", {
  enumerable: !0,
  configurable: !0,
  writable: !0,
  value: /nonce too low|transaction already imported|already known/
});
class ad extends j {
  constructor({ cause: e, nonce: t } = {}) {
    super(`Nonce provided for the transaction ${t ? `(${t}) ` : ""}exceeds the maximum allowed nonce.`, { cause: e, name: "NonceMaxValueError" });
  }
}
Object.defineProperty(ad, "nodeMessage", {
  enumerable: !0,
  configurable: !0,
  writable: !0,
  value: /nonce has max value/
});
class od extends j {
  constructor({ cause: e } = {}) {
    super([
      "The total cost (gas * gas fee + value) of executing this transaction exceeds the balance of the account."
    ].join(`
`), {
      cause: e,
      metaMessages: [
        "This error could arise when the account does not have enough funds to:",
        " - pay for the total gas fee,",
        " - pay for the value to send.",
        " ",
        "The cost of the transaction is calculated as `gas * gas fee + value`, where:",
        " - `gas` is the amount of gas needed for transaction to execute,",
        " - `gas fee` is the gas fee,",
        " - `value` is the amount of ether to send to the recipient."
      ],
      name: "InsufficientFundsError"
    });
  }
}
Object.defineProperty(od, "nodeMessage", {
  enumerable: !0,
  configurable: !0,
  writable: !0,
  value: /insufficient funds|exceeds transaction sender account balance/
});
class cd extends j {
  constructor({ cause: e, gas: t } = {}) {
    super(`The amount of gas ${t ? `(${t}) ` : ""}provided for the transaction exceeds the limit allowed for the block.`, {
      cause: e,
      name: "IntrinsicGasTooHighError"
    });
  }
}
Object.defineProperty(cd, "nodeMessage", {
  enumerable: !0,
  configurable: !0,
  writable: !0,
  value: /intrinsic gas too high|gas limit reached/
});
class ud extends j {
  constructor({ cause: e, gas: t } = {}) {
    super(`The amount of gas ${t ? `(${t}) ` : ""}provided for the transaction is too low.`, {
      cause: e,
      name: "IntrinsicGasTooLowError"
    });
  }
}
Object.defineProperty(ud, "nodeMessage", {
  enumerable: !0,
  configurable: !0,
  writable: !0,
  value: /intrinsic gas too low/
});
class ld extends j {
  constructor({ cause: e }) {
    super("The transaction type is not supported for this chain.", {
      cause: e,
      name: "TransactionTypeNotSupportedError"
    });
  }
}
Object.defineProperty(ld, "nodeMessage", {
  enumerable: !0,
  configurable: !0,
  writable: !0,
  value: /transaction type not valid/
});
class eu extends j {
  constructor({ cause: e, maxPriorityFeePerGas: t, maxFeePerGas: r } = {}) {
    super([
      `The provided tip (\`maxPriorityFeePerGas\`${t ? ` = ${dt(t)} gwei` : ""}) cannot be higher than the fee cap (\`maxFeePerGas\`${r ? ` = ${dt(r)} gwei` : ""}).`
    ].join(`
`), {
      cause: e,
      name: "TipAboveFeeCapError"
    });
  }
}
Object.defineProperty(eu, "nodeMessage", {
  enumerable: !0,
  configurable: !0,
  writable: !0,
  value: /max priority fee per gas higher than max fee per gas|tip higher than fee cap/
});
class Du extends j {
  constructor({ cause: e }) {
    super(`An error occurred while executing: ${e == null ? void 0 : e.shortMessage}`, {
      cause: e,
      name: "UnknownNodeError"
    });
  }
}
function Ef(n, e) {
  const t = (n.details || "").toLowerCase(), r = n instanceof j ? n.walk((i) => (i == null ? void 0 : i.code) === ms.code) : n;
  return r instanceof j ? new ms({
    cause: n,
    message: r.details
  }) : ms.nodeMessage.test(t) ? new ms({
    cause: n,
    message: n.details
  }) : Xc.nodeMessage.test(t) ? new Xc({
    cause: n,
    maxFeePerGas: e == null ? void 0 : e.maxFeePerGas
  }) : rd.nodeMessage.test(t) ? new rd({
    cause: n,
    maxFeePerGas: e == null ? void 0 : e.maxFeePerGas
  }) : id.nodeMessage.test(t) ? new id({ cause: n, nonce: e == null ? void 0 : e.nonce }) : sd.nodeMessage.test(t) ? new sd({ cause: n, nonce: e == null ? void 0 : e.nonce }) : ad.nodeMessage.test(t) ? new ad({ cause: n, nonce: e == null ? void 0 : e.nonce }) : od.nodeMessage.test(t) ? new od({ cause: n }) : cd.nodeMessage.test(t) ? new cd({ cause: n, gas: e == null ? void 0 : e.gas }) : ud.nodeMessage.test(t) ? new ud({ cause: n, gas: e == null ? void 0 : e.gas }) : ld.nodeMessage.test(t) ? new ld({ cause: n }) : eu.nodeMessage.test(t) ? new eu({
    cause: n,
    maxFeePerGas: e == null ? void 0 : e.maxFeePerGas,
    maxPriorityFeePerGas: e == null ? void 0 : e.maxPriorityFeePerGas
  }) : new Du({
    cause: n
  });
}
function jw(n, { docsPath: e, ...t }) {
  const r = (() => {
    const i = Ef(n, t);
    return i instanceof Du ? n : i;
  })();
  return new zw(r, {
    docsPath: e,
    ...t
  });
}
function vf(n, { format: e }) {
  if (!e)
    return {};
  const t = {};
  function r(s) {
    const a = Object.keys(s);
    for (const o of a)
      o in n && (t[o] = n[o]), s[o] && typeof s[o] == "object" && !Array.isArray(s[o]) && r(s[o]);
  }
  const i = e(n || {});
  return r(i), t;
}
const Ww = {
  legacy: "0x0",
  eip2930: "0x1",
  eip1559: "0x2",
  eip4844: "0x3",
  eip7702: "0x4"
};
function Tf(n) {
  const e = {};
  return typeof n.authorizationList < "u" && (e.authorizationList = Kw(n.authorizationList)), typeof n.accessList < "u" && (e.accessList = n.accessList), typeof n.blobVersionedHashes < "u" && (e.blobVersionedHashes = n.blobVersionedHashes), typeof n.blobs < "u" && (typeof n.blobs[0] != "string" ? e.blobs = n.blobs.map((t) => pt(t)) : e.blobs = n.blobs), typeof n.data < "u" && (e.data = n.data), typeof n.from < "u" && (e.from = n.from), typeof n.gas < "u" && (e.gas = re(n.gas)), typeof n.gasPrice < "u" && (e.gasPrice = re(n.gasPrice)), typeof n.maxFeePerBlobGas < "u" && (e.maxFeePerBlobGas = re(n.maxFeePerBlobGas)), typeof n.maxFeePerGas < "u" && (e.maxFeePerGas = re(n.maxFeePerGas)), typeof n.maxPriorityFeePerGas < "u" && (e.maxPriorityFeePerGas = re(n.maxPriorityFeePerGas)), typeof n.nonce < "u" && (e.nonce = re(n.nonce)), typeof n.to < "u" && (e.to = n.to), typeof n.type < "u" && (e.type = Ww[n.type]), typeof n.value < "u" && (e.value = re(n.value)), e;
}
function Kw(n) {
  return n.map((e) => ({
    address: e.address,
    r: e.r ? re(BigInt(e.r)) : e.r,
    s: e.s ? re(BigInt(e.s)) : e.s,
    chainId: re(e.chainId),
    nonce: re(e.nonce),
    ...typeof e.yParity < "u" ? { yParity: re(e.yParity) } : {},
    ...typeof e.v < "u" && typeof e.yParity > "u" ? { v: re(e.v) } : {}
  }));
}
function U0(n) {
  if (!(!n || n.length === 0))
    return n.reduce((e, { slot: t, value: r }) => {
      if (t.length !== 66)
        throw new T0({
          size: t.length,
          targetSize: 66,
          type: "hex"
        });
      if (r.length !== 66)
        throw new T0({
          size: r.length,
          targetSize: 66,
          type: "hex"
        });
      return e[t] = r, e;
    }, {});
}
function Qw(n) {
  const { balance: e, nonce: t, state: r, stateDiff: i, code: s } = n, a = {};
  if (s !== void 0 && (a.code = s), e !== void 0 && (a.balance = re(e)), t !== void 0 && (a.nonce = re(t)), r !== void 0 && (a.state = U0(r)), i !== void 0) {
    if (a.state)
      throw new Tw();
    a.stateDiff = U0(i);
  }
  return a;
}
function Fy(n) {
  if (!n)
    return;
  const e = {};
  for (const { address: t, ...r } of n) {
    if (!Bn(t, { strict: !1 }))
      throw new Wi({ address: t });
    if (e[t])
      throw new vw({ address: t });
    e[t] = Qw(r);
  }
  return e;
}
const qw = 2n ** 256n - 1n;
function Uu(n) {
  const { account: e, gasPrice: t, maxFeePerGas: r, maxPriorityFeePerGas: i, to: s } = n, a = e ? xr(e) : void 0;
  if (a && !Bn(a.address))
    throw new Wi({ address: a.address });
  if (s && !Bn(s))
    throw new Wi({ address: s });
  if (typeof t < "u" && (typeof r < "u" || typeof i < "u"))
    throw new Sw();
  if (r && r > qw)
    throw new Xc({ maxFeePerGas: r });
  if (i && r && i > r)
    throw new eu({ maxFeePerGas: r, maxPriorityFeePerGas: i });
}
class Jw extends j {
  constructor() {
    super("`baseFeeMultiplier` must be greater than 1.", {
      name: "BaseFeeScalarError"
    });
  }
}
class Pf extends j {
  constructor() {
    super("Chain does not support EIP-1559 fees.", {
      name: "Eip1559FeesNotSupportedError"
    });
  }
}
class Yw extends j {
  constructor({ maxPriorityFeePerGas: e }) {
    super(`\`maxFeePerGas\` cannot be less than the \`maxPriorityFeePerGas\` (${dt(e)} gwei).`, { name: "MaxFeePerGasTooLowError" });
  }
}
class Zw extends j {
  constructor({ blockHash: e, blockNumber: t }) {
    let r = "Block";
    e && (r = `Block at hash "${e}"`), t && (r = `Block at number "${t}"`), super(`${r} could not be found.`, { name: "BlockNotFoundError" });
  }
}
const Xw = {
  "0x0": "legacy",
  "0x1": "eip2930",
  "0x2": "eip1559",
  "0x3": "eip4844",
  "0x4": "eip7702"
};
function e6(n) {
  const e = {
    ...n,
    blockHash: n.blockHash ? n.blockHash : null,
    blockNumber: n.blockNumber ? BigInt(n.blockNumber) : null,
    chainId: n.chainId ? ha(n.chainId) : void 0,
    gas: n.gas ? BigInt(n.gas) : void 0,
    gasPrice: n.gasPrice ? BigInt(n.gasPrice) : void 0,
    maxFeePerBlobGas: n.maxFeePerBlobGas ? BigInt(n.maxFeePerBlobGas) : void 0,
    maxFeePerGas: n.maxFeePerGas ? BigInt(n.maxFeePerGas) : void 0,
    maxPriorityFeePerGas: n.maxPriorityFeePerGas ? BigInt(n.maxPriorityFeePerGas) : void 0,
    nonce: n.nonce ? ha(n.nonce) : void 0,
    to: n.to ? n.to : null,
    transactionIndex: n.transactionIndex ? Number(n.transactionIndex) : null,
    type: n.type ? Xw[n.type] : void 0,
    typeHex: n.type ? n.type : void 0,
    value: n.value ? BigInt(n.value) : void 0,
    v: n.v ? BigInt(n.v) : void 0
  };
  return n.authorizationList && (e.authorizationList = t6(n.authorizationList)), e.yParity = (() => {
    if (n.yParity)
      return Number(n.yParity);
    if (typeof e.v == "bigint") {
      if (e.v === 0n || e.v === 27n)
        return 0;
      if (e.v === 1n || e.v === 28n)
        return 1;
      if (e.v >= 35n)
        return e.v % 2n === 0n ? 1 : 0;
    }
  })(), e.type === "legacy" && (delete e.accessList, delete e.maxFeePerBlobGas, delete e.maxFeePerGas, delete e.maxPriorityFeePerGas, delete e.yParity), e.type === "eip2930" && (delete e.maxFeePerBlobGas, delete e.maxFeePerGas, delete e.maxPriorityFeePerGas), e.type === "eip1559" && delete e.maxFeePerBlobGas, e;
}
function t6(n) {
  return n.map((e) => ({
    address: e.address,
    chainId: Number(e.chainId),
    nonce: Number(e.nonce),
    r: e.r,
    s: e.s,
    yParity: Number(e.yParity)
  }));
}
function n6(n) {
  const e = (n.transactions ?? []).map((t) => typeof t == "string" ? t : e6(t));
  return {
    ...n,
    baseFeePerGas: n.baseFeePerGas ? BigInt(n.baseFeePerGas) : null,
    blobGasUsed: n.blobGasUsed ? BigInt(n.blobGasUsed) : void 0,
    difficulty: n.difficulty ? BigInt(n.difficulty) : void 0,
    excessBlobGas: n.excessBlobGas ? BigInt(n.excessBlobGas) : void 0,
    gasLimit: n.gasLimit ? BigInt(n.gasLimit) : void 0,
    gasUsed: n.gasUsed ? BigInt(n.gasUsed) : void 0,
    hash: n.hash ? n.hash : null,
    logsBloom: n.logsBloom ? n.logsBloom : null,
    nonce: n.nonce ? n.nonce : null,
    number: n.number ? BigInt(n.number) : null,
    size: n.size ? BigInt(n.size) : void 0,
    timestamp: n.timestamp ? BigInt(n.timestamp) : void 0,
    transactions: e,
    totalDifficulty: n.totalDifficulty ? BigInt(n.totalDifficulty) : null
  };
}
async function tu(n, { blockHash: e, blockNumber: t, blockTag: r, includeTransactions: i } = {}) {
  var l, d, f;
  const s = r ?? "latest", a = i ?? !1, o = t !== void 0 ? re(t) : void 0;
  let c = null;
  if (e ? c = await n.request({
    method: "eth_getBlockByHash",
    params: [e, a]
  }, { dedupe: !0 }) : c = await n.request({
    method: "eth_getBlockByNumber",
    params: [o || s, a]
  }, { dedupe: !!o }), !c)
    throw new Zw({ blockHash: e, blockNumber: t });
  return (((f = (d = (l = n.chain) == null ? void 0 : l.formatters) == null ? void 0 : d.block) == null ? void 0 : f.format) || n6)(c);
}
async function Gy(n) {
  const e = await n.request({
    method: "eth_gasPrice"
  });
  return BigInt(e);
}
async function r6(n, e) {
  var s, a;
  const { block: t, chain: r = n.chain, request: i } = e || {};
  try {
    const o = ((s = r == null ? void 0 : r.fees) == null ? void 0 : s.maxPriorityFeePerGas) ?? ((a = r == null ? void 0 : r.fees) == null ? void 0 : a.defaultPriorityFee);
    if (typeof o == "function") {
      const u = t || await he(n, tu, "getBlock")({}), l = await o({
        block: u,
        client: n,
        request: i
      });
      if (l === null)
        throw new Error();
      return l;
    }
    if (typeof o < "u")
      return o;
    const c = await n.request({
      method: "eth_maxPriorityFeePerGas"
    });
    return fo(c);
  } catch {
    const [o, c] = await Promise.all([
      t ? Promise.resolve(t) : he(n, tu, "getBlock")({}),
      he(n, Gy, "getGasPrice")({})
    ]);
    if (typeof o.baseFeePerGas != "bigint")
      throw new Pf();
    const u = c - o.baseFeePerGas;
    return u < 0n ? 0n : u;
  }
}
async function F0(n, e) {
  var f, p;
  const { block: t, chain: r = n.chain, request: i, type: s = "eip1559" } = e || {}, a = await (async () => {
    var y, h;
    return typeof ((y = r == null ? void 0 : r.fees) == null ? void 0 : y.baseFeeMultiplier) == "function" ? r.fees.baseFeeMultiplier({
      block: t,
      client: n,
      request: i
    }) : ((h = r == null ? void 0 : r.fees) == null ? void 0 : h.baseFeeMultiplier) ?? 1.2;
  })();
  if (a < 1)
    throw new Jw();
  const c = 10 ** (((f = a.toString().split(".")[1]) == null ? void 0 : f.length) ?? 0), u = (y) => y * BigInt(Math.ceil(a * c)) / BigInt(c), l = t || await he(n, tu, "getBlock")({});
  if (typeof ((p = r == null ? void 0 : r.fees) == null ? void 0 : p.estimateFeesPerGas) == "function") {
    const y = await r.fees.estimateFeesPerGas({
      block: t,
      client: n,
      multiply: u,
      request: i,
      type: s
    });
    if (y !== null)
      return y;
  }
  if (s === "eip1559") {
    if (typeof l.baseFeePerGas != "bigint")
      throw new Pf();
    const y = typeof (i == null ? void 0 : i.maxPriorityFeePerGas) == "bigint" ? i.maxPriorityFeePerGas : await r6(n, {
      block: l,
      chain: r,
      request: i
    }), h = u(l.baseFeePerGas);
    return {
      maxFeePerGas: (i == null ? void 0 : i.maxFeePerGas) ?? h + y,
      maxPriorityFeePerGas: y
    };
  }
  return {
    gasPrice: (i == null ? void 0 : i.gasPrice) ?? u(await he(n, Gy, "getGasPrice")({}))
  };
}
async function i6(n, { address: e, blockTag: t = "latest", blockNumber: r }) {
  const i = await n.request({
    method: "eth_getTransactionCount",
    params: [
      e,
      typeof r == "bigint" ? re(r) : t
    ]
  }, {
    dedupe: !!r
  });
  return ha(i);
}
function Hy(n) {
  const { kzg: e } = n, t = n.to ?? (typeof n.blobs[0] == "string" ? "hex" : "bytes"), r = typeof n.blobs[0] == "string" ? n.blobs.map((s) => fr(s)) : n.blobs, i = [];
  for (const s of r)
    i.push(Uint8Array.from(e.blobToKzgCommitment(s)));
  return t === "bytes" ? i : i.map((s) => pt(s));
}
function $y(n) {
  const { kzg: e } = n, t = n.to ?? (typeof n.blobs[0] == "string" ? "hex" : "bytes"), r = typeof n.blobs[0] == "string" ? n.blobs.map((a) => fr(a)) : n.blobs, i = typeof n.commitments[0] == "string" ? n.commitments.map((a) => fr(a)) : n.commitments, s = [];
  for (let a = 0; a < r.length; a++) {
    const o = r[a], c = i[a];
    s.push(Uint8Array.from(e.computeBlobKzgProof(o, c)));
  }
  return t === "bytes" ? s : s.map((a) => pt(a));
}
function s6(n, e, t, r) {
  if (typeof n.setBigUint64 == "function")
    return n.setBigUint64(e, t, r);
  const i = BigInt(32), s = BigInt(4294967295), a = Number(t >> i & s), o = Number(t & s), c = r ? 4 : 0, u = r ? 0 : 4;
  n.setUint32(e + c, a, r), n.setUint32(e + u, o, r);
}
function a6(n, e, t) {
  return n & e ^ ~n & t;
}
function o6(n, e, t) {
  return n & e ^ n & t ^ e & t;
}
class c6 extends ff {
  constructor(e, t, r, i) {
    super(), this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.blockLen = e, this.outputLen = t, this.padOffset = r, this.isLE = i, this.buffer = new Uint8Array(e), this.view = fl(this.buffer);
  }
  update(e) {
    ya(this), e = Ou(e), an(e);
    const { view: t, buffer: r, blockLen: i } = this, s = e.length;
    for (let a = 0; a < s; ) {
      const o = Math.min(i - this.pos, s - a);
      if (o === i) {
        const c = fl(e);
        for (; i <= s - a; a += i)
          this.process(c, a);
        continue;
      }
      r.set(e.subarray(a, a + o), this.pos), this.pos += o, a += o, this.pos === i && (this.process(t, 0), this.pos = 0);
    }
    return this.length += e.length, this.roundClean(), this;
  }
  digestInto(e) {
    ya(this), yy(e, this), this.finished = !0;
    const { buffer: t, view: r, blockLen: i, isLE: s } = this;
    let { pos: a } = this;
    t[a++] = 128, ma(this.buffer.subarray(a)), this.padOffset > i - a && (this.process(r, 0), a = 0);
    for (let d = a; d < i; d++)
      t[d] = 0;
    s6(r, i - 8, BigInt(this.length * 8), s), this.process(r, 0);
    const o = fl(e), c = this.outputLen;
    if (c % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const u = c / 4, l = this.get();
    if (u > l.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let d = 0; d < u; d++)
      o.setUint32(4 * d, l[d], s);
  }
  digest() {
    const { buffer: e, outputLen: t } = this;
    this.digestInto(e);
    const r = e.slice(0, t);
    return this.destroy(), r;
  }
  _cloneInto(e) {
    e || (e = new this.constructor()), e.set(...this.get());
    const { blockLen: t, buffer: r, length: i, finished: s, destroyed: a, pos: o } = this;
    return e.destroyed = a, e.finished = s, e.length = i, e.pos = o, i % t && e.buffer.set(r), e;
  }
  clone() {
    return this._cloneInto();
  }
}
const Er = /* @__PURE__ */ Uint32Array.from([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]), u6 = /* @__PURE__ */ Uint32Array.from([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]), vr = /* @__PURE__ */ new Uint32Array(64);
let l6 = class extends c6 {
  constructor(e = 32) {
    super(64, e, 8, !1), this.A = Er[0] | 0, this.B = Er[1] | 0, this.C = Er[2] | 0, this.D = Er[3] | 0, this.E = Er[4] | 0, this.F = Er[5] | 0, this.G = Er[6] | 0, this.H = Er[7] | 0;
  }
  get() {
    const { A: e, B: t, C: r, D: i, E: s, F: a, G: o, H: c } = this;
    return [e, t, r, i, s, a, o, c];
  }
  // prettier-ignore
  set(e, t, r, i, s, a, o, c) {
    this.A = e | 0, this.B = t | 0, this.C = r | 0, this.D = i | 0, this.E = s | 0, this.F = a | 0, this.G = o | 0, this.H = c | 0;
  }
  process(e, t) {
    for (let d = 0; d < 16; d++, t += 4)
      vr[d] = e.getUint32(t, !1);
    for (let d = 16; d < 64; d++) {
      const f = vr[d - 15], p = vr[d - 2], y = ln(f, 7) ^ ln(f, 18) ^ f >>> 3, h = ln(p, 17) ^ ln(p, 19) ^ p >>> 10;
      vr[d] = h + vr[d - 7] + y + vr[d - 16] | 0;
    }
    let { A: r, B: i, C: s, D: a, E: o, F: c, G: u, H: l } = this;
    for (let d = 0; d < 64; d++) {
      const f = ln(o, 6) ^ ln(o, 11) ^ ln(o, 25), p = l + f + a6(o, c, u) + u6[d] + vr[d] | 0, h = (ln(r, 2) ^ ln(r, 13) ^ ln(r, 22)) + o6(r, i, s) | 0;
      l = u, u = c, c = o, o = a + p | 0, a = s, s = i, i = r, r = p + h | 0;
    }
    r = r + this.A | 0, i = i + this.B | 0, s = s + this.C | 0, a = a + this.D | 0, o = o + this.E | 0, c = c + this.F | 0, u = u + this.G | 0, l = l + this.H | 0, this.set(r, i, s, a, o, c, u, l);
  }
  roundClean() {
    ma(vr);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), ma(this.buffer);
  }
};
const Vy = /* @__PURE__ */ by(() => new l6()), d6 = Vy;
function f6(n, e) {
  return d6(Jr(n, { strict: !1 }) ? Qo(n) : n);
}
function p6(n) {
  const { commitment: e, version: t = 1 } = n, r = n.to ?? (typeof e == "string" ? "hex" : "bytes"), i = f6(e);
  return i.set([t], 0), r === "bytes" ? i : pt(i);
}
function h6(n) {
  const { commitments: e, version: t } = n, r = n.to, i = [];
  for (const s of e)
    i.push(p6({
      commitment: s,
      to: r,
      version: t
    }));
  return i;
}
const G0 = 6, zy = 32, Sf = 4096, jy = zy * Sf, H0 = jy * G0 - // terminator byte (0x80).
1 - // zero byte (0x00) appended to each field element.
1 * Sf * G0;
class y6 extends j {
  constructor({ maxSize: e, size: t }) {
    super("Blob size is too large.", {
      metaMessages: [`Max: ${e} bytes`, `Given: ${t} bytes`],
      name: "BlobSizeTooLargeError"
    });
  }
}
class m6 extends j {
  constructor() {
    super("Blob data must not be empty.", { name: "EmptyBlobError" });
  }
}
function b6(n) {
  const e = typeof n.data == "string" ? fr(n.data) : n.data, t = Ne(e);
  if (!t)
    throw new m6();
  if (t > H0)
    throw new y6({
      maxSize: H0,
      size: t
    });
  const r = [];
  let i = !0, s = 0;
  for (; i; ) {
    const a = wf(new Uint8Array(jy));
    let o = 0;
    for (; o < Sf; ) {
      const c = e.slice(s, s + (zy - 1));
      if (a.pushByte(0), a.pushBytes(c), c.length < 31) {
        a.pushByte(128), i = !1;
        break;
      }
      o++, s += 31;
    }
    r.push(a);
  }
  return r.map((a) => pt(a.bytes));
}
function x6(n) {
  const { data: e, kzg: t, to: r } = n, i = n.blobs ?? b6({ data: e }), s = n.commitments ?? Hy({ blobs: i, kzg: t, to: r }), a = n.proofs ?? $y({ blobs: i, commitments: s, kzg: t, to: r }), o = [];
  for (let c = 0; c < i.length; c++)
    o.push({
      blob: i[c],
      commitment: s[c],
      proof: a[c]
    });
  return o;
}
function g6(n) {
  if (n.type)
    return n.type;
  if (typeof n.authorizationList < "u")
    return "eip7702";
  if (typeof n.blobs < "u" || typeof n.blobVersionedHashes < "u" || typeof n.maxFeePerBlobGas < "u" || typeof n.sidecars < "u")
    return "eip4844";
  if (typeof n.maxFeePerGas < "u" || typeof n.maxPriorityFeePerGas < "u")
    return "eip1559";
  if (typeof n.gasPrice < "u")
    return typeof n.accessList < "u" ? "eip2930" : "legacy";
  throw new Iw({ transaction: n });
}
async function Wy(n) {
  const e = await n.request({
    method: "eth_chainId"
  }, { dedupe: !0 });
  return ha(e);
}
const Ky = [
  "blobVersionedHashes",
  "chainId",
  "fees",
  "gas",
  "nonce",
  "type"
], $0 = /* @__PURE__ */ new Map();
async function Qy(n, e) {
  const { account: t = n.account, blobs: r, chain: i, gas: s, kzg: a, nonce: o, nonceManager: c, parameters: u = Ky, type: l } = e, d = t && xr(t), f = { ...e, ...d ? { from: d == null ? void 0 : d.address } : {} };
  let p;
  async function y() {
    return p || (p = await he(n, tu, "getBlock")({ blockTag: "latest" }), p);
  }
  let h;
  async function b() {
    return h || (i ? i.id : typeof e.chainId < "u" ? e.chainId : (h = await he(n, Wy, "getChainId")({}), h));
  }
  if (u.includes("nonce") && typeof o > "u" && d)
    if (c) {
      const x = await b();
      f.nonce = await c.consume({
        address: d.address,
        chainId: x,
        client: n
      });
    } else
      f.nonce = await he(n, i6, "getTransactionCount")({
        address: d.address,
        blockTag: "pending"
      });
  if ((u.includes("blobVersionedHashes") || u.includes("sidecars")) && r && a) {
    const x = Hy({ blobs: r, kzg: a });
    if (u.includes("blobVersionedHashes")) {
      const w = h6({
        commitments: x,
        to: "hex"
      });
      f.blobVersionedHashes = w;
    }
    if (u.includes("sidecars")) {
      const w = $y({ blobs: r, commitments: x, kzg: a }), E = x6({
        blobs: r,
        commitments: x,
        proofs: w,
        to: "hex"
      });
      f.sidecars = E;
    }
  }
  if (u.includes("chainId") && (f.chainId = await b()), (u.includes("fees") || u.includes("type")) && typeof l > "u")
    try {
      f.type = g6(f);
    } catch {
      let x = $0.get(n.uid);
      if (typeof x > "u") {
        const w = await y();
        x = typeof (w == null ? void 0 : w.baseFeePerGas) == "bigint", $0.set(n.uid, x);
      }
      f.type = x ? "eip1559" : "legacy";
    }
  if (u.includes("fees"))
    if (f.type !== "legacy" && f.type !== "eip2930") {
      if (typeof f.maxFeePerGas > "u" || typeof f.maxPriorityFeePerGas > "u") {
        const x = await y(), { maxFeePerGas: w, maxPriorityFeePerGas: E } = await F0(n, {
          block: x,
          chain: i,
          request: f
        });
        if (typeof e.maxPriorityFeePerGas > "u" && e.maxFeePerGas && e.maxFeePerGas < E)
          throw new Yw({
            maxPriorityFeePerGas: E
          });
        f.maxPriorityFeePerGas = E, f.maxFeePerGas = w;
      }
    } else {
      if (typeof e.maxFeePerGas < "u" || typeof e.maxPriorityFeePerGas < "u")
        throw new Pf();
      if (typeof e.gasPrice > "u") {
        const x = await y(), { gasPrice: w } = await F0(n, {
          block: x,
          chain: i,
          request: f,
          type: "legacy"
        });
        f.gasPrice = w;
      }
    }
  return u.includes("gas") && typeof s > "u" && (f.gas = await he(n, qy, "estimateGas")({
    ...f,
    account: d && { address: d.address, type: "json-rpc" }
  })), Uu(f), delete f.parameters, f;
}
async function w6(n, { address: e, blockNumber: t, blockTag: r = "latest" }) {
  const i = typeof t == "bigint" ? re(t) : void 0, s = await n.request({
    method: "eth_getBalance",
    params: [e, i || r]
  });
  return BigInt(s);
}
async function qy(n, e) {
  var i, s, a;
  const { account: t = n.account } = e, r = t ? xr(t) : void 0;
  try {
    let M = function(S) {
      const { block: k, request: D, rpcStateOverride: $ } = S;
      return n.request({
        method: "eth_estimateGas",
        params: $ ? [D, k ?? "latest", $] : k ? [D, k] : [D]
      });
    };
    const { accessList: o, authorizationList: c, blobs: u, blobVersionedHashes: l, blockNumber: d, blockTag: f, data: p, gas: y, gasPrice: h, maxFeePerBlobGas: b, maxFeePerGas: x, maxPriorityFeePerGas: w, nonce: E, value: N, stateOverride: I, ...B } = await Qy(n, {
      ...e,
      parameters: (
        // Some RPC Providers do not compute versioned hashes from blobs. We will need
        // to compute them.
        (r == null ? void 0 : r.type) === "local" ? void 0 : ["blobVersionedHashes"]
      )
    }), C = (typeof d == "bigint" ? re(d) : void 0) || f, v = Fy(I), L = await (async () => {
      if (B.to)
        return B.to;
      if (c && c.length > 0)
        return await Uy({
          authorization: c[0]
        }).catch(() => {
          throw new j("`to` is required. Could not infer from `authorizationList`");
        });
    })();
    Uu(e);
    const O = (a = (s = (i = n.chain) == null ? void 0 : i.formatters) == null ? void 0 : s.transactionRequest) == null ? void 0 : a.format, F = (O || Tf)({
      // Pick out extra data that might exist on the chain's transaction request type.
      ...vf(B, { format: O }),
      from: r == null ? void 0 : r.address,
      accessList: o,
      authorizationList: c,
      blobs: u,
      blobVersionedHashes: l,
      data: p,
      gas: y,
      gasPrice: h,
      maxFeePerBlobGas: b,
      maxFeePerGas: x,
      maxPriorityFeePerGas: w,
      nonce: E,
      to: L,
      value: N
    });
    let P = BigInt(await M({ block: C, request: F, rpcStateOverride: v }));
    if (c) {
      const S = await w6(n, { address: F.from }), k = await Promise.all(c.map(async (D) => {
        const { address: $ } = D, H = await M({
          block: C,
          request: {
            authorizationList: void 0,
            data: p,
            from: r == null ? void 0 : r.address,
            to: $,
            value: re(S)
          },
          rpcStateOverride: v
        }).catch(() => 100000n);
        return 2n * BigInt(H);
      }));
      P += k.reduce((D, $) => D + $, 0n);
    }
    return P;
  } catch (o) {
    throw jw(o, {
      ...e,
      account: r,
      chain: n.chain
    });
  }
}
async function A6(n, e) {
  const { abi: t, address: r, args: i, functionName: s, dataSuffix: a, ...o } = e, c = ei({
    abi: t,
    args: i,
    functionName: s
  });
  try {
    return await he(n, qy, "estimateGas")({
      data: `${c}${a ? a.replace("0x", "") : ""}`,
      to: r,
      ...o
    });
  } catch (u) {
    const l = o.account ? xr(o.account) : void 0;
    throw Mu(u, {
      abi: t,
      address: r,
      args: i,
      docsPath: "/docs/contract/estimateContractGas",
      functionName: s,
      sender: l == null ? void 0 : l.address
    });
  }
}
function E6(n, e) {
  if (!Bn(n, { strict: !1 }))
    throw new Wi({ address: n });
  if (!Bn(e, { strict: !1 }))
    throw new Wi({ address: e });
  return n.toLowerCase() === e.toLowerCase();
}
const V0 = "/docs/contract/decodeEventLog";
function Jy(n) {
  const { abi: e, data: t, strict: r, topics: i } = n, s = r ?? !0, [a, ...o] = i;
  if (!a)
    throw new e1({ docsPath: V0 });
  const c = e.find((h) => h.type === "event" && a === Nu(dr(h)));
  if (!(c && "name" in c) || c.type !== "event")
    throw new cy(a, { docsPath: V0 });
  const { name: u, inputs: l } = c, d = l == null ? void 0 : l.some((h) => !("name" in h && h.name)), f = d ? [] : {}, p = l.map((h, b) => [h, b]).filter(([h]) => "indexed" in h && h.indexed);
  for (let h = 0; h < p.length; h++) {
    const [b, x] = p[h], w = o[h];
    if (!w)
      throw new cf({
        abiItem: c,
        param: b
      });
    f[d ? x : b.name || x] = v6({
      param: b,
      value: w
    });
  }
  const y = l.filter((h) => !("indexed" in h && h.indexed));
  if (y.length > 0) {
    if (t && t !== "0x")
      try {
        const h = _u(y, t);
        if (h)
          if (d)
            for (let b = 0; b < l.length; b++)
              f[b] = f[b] ?? h.shift();
          else
            for (let b = 0; b < y.length; b++)
              f[y[b].name] = h[b];
      } catch (h) {
        if (s)
          throw h instanceof ay || h instanceof Oy ? new Yc({
            abiItem: c,
            data: t,
            params: y,
            size: Ne(t)
          }) : h;
      }
    else if (s)
      throw new Yc({
        abiItem: c,
        data: "0x",
        params: y,
        size: 0
      });
  }
  return {
    eventName: u,
    args: Object.values(f).length > 0 ? f : void 0
  };
}
function v6({ param: n, value: e }) {
  return n.type === "string" || n.type === "bytes" || n.type === "tuple" || n.type.match(/^(.*)\[(\d+)?\]$/) ? e : (_u([n], e) || [])[0];
}
function Yo(n) {
  const { abi: e, args: t, logs: r, strict: i = !0 } = n, s = (() => {
    if (n.eventName)
      return Array.isArray(n.eventName) ? n.eventName : [n.eventName];
  })();
  return r.map((a) => {
    var o;
    try {
      const c = e.find((l) => l.type === "event" && a.topics[0] === Nu(l));
      if (!c)
        return null;
      const u = Jy({
        ...a,
        abi: [c],
        strict: i
      });
      return s && !s.includes(u.eventName) || !T6({
        args: u.args,
        inputs: c.inputs,
        matchArgs: t
      }) ? null : { ...u, ...a };
    } catch (c) {
      let u, l;
      if (c instanceof cy)
        return null;
      if (c instanceof Yc || c instanceof cf) {
        if (i)
          return null;
        u = c.abiItem.name, l = (o = c.abiItem.inputs) == null ? void 0 : o.some((d) => !("name" in d && d.name));
      }
      return { ...a, args: l ? [] : {}, eventName: u };
    }
  }).filter(Boolean);
}
function T6(n) {
  const { args: e, inputs: t, matchArgs: r } = n;
  if (!r)
    return !0;
  if (!e)
    return !1;
  function i(s, a, o) {
    try {
      return s.type === "address" ? E6(a, o) : s.type === "string" || s.type === "bytes" ? Xi(Qo(a)) === o : a === o;
    } catch {
      return !1;
    }
  }
  return Array.isArray(e) && Array.isArray(r) ? r.every((s, a) => {
    if (s == null)
      return !0;
    const o = t[a];
    return o ? (Array.isArray(s) ? s : [s]).some((u) => i(o, u, e[a])) : !1;
  }) : typeof e == "object" && !Array.isArray(e) && typeof r == "object" && !Array.isArray(r) ? Object.entries(r).every(([s, a]) => {
    if (a == null)
      return !0;
    const o = t.find((u) => u.name === s);
    return o ? (Array.isArray(a) ? a : [a]).some((u) => i(o, u, e[s])) : !1;
  }) : !1;
}
function nu(n, { args: e, eventName: t } = {}) {
  return {
    ...n,
    blockHash: n.blockHash ? n.blockHash : null,
    blockNumber: n.blockNumber ? BigInt(n.blockNumber) : null,
    logIndex: n.logIndex ? Number(n.logIndex) : null,
    transactionHash: n.transactionHash ? n.transactionHash : null,
    transactionIndex: n.transactionIndex ? Number(n.transactionIndex) : null,
    ...t ? { args: e, eventName: t } : {}
  };
}
async function P6(n, { address: e, blockHash: t, fromBlock: r, toBlock: i, event: s, events: a, args: o, strict: c } = {}) {
  const u = c ?? !1, l = a ?? (s ? [s] : void 0);
  let d = [];
  l && (d = [l.flatMap((h) => gf({
    abi: [h],
    eventName: h.name,
    args: a ? void 0 : o
  }))], s && (d = d[0]));
  let f;
  t ? f = await n.request({
    method: "eth_getLogs",
    params: [{ address: e, topics: d, blockHash: t }]
  }) : f = await n.request({
    method: "eth_getLogs",
    params: [
      {
        address: e,
        topics: d,
        fromBlock: typeof r == "bigint" ? re(r) : r,
        toBlock: typeof i == "bigint" ? re(i) : i
      }
    ]
  });
  const p = f.map((y) => nu(y));
  return l ? Yo({
    abi: l,
    args: o,
    logs: p,
    strict: u
  }) : p;
}
async function Yy(n, e) {
  const { abi: t, address: r, args: i, blockHash: s, eventName: a, fromBlock: o, toBlock: c, strict: u } = e, l = a ? qo({ abi: t, name: a }) : void 0, d = l ? void 0 : t.filter((f) => f.type === "event");
  return he(n, P6, "getLogs")({
    address: r,
    args: i,
    blockHash: s,
    event: l,
    events: d,
    fromBlock: o,
    toBlock: c,
    strict: u
  });
}
const yl = "/docs/contract/decodeFunctionResult";
function If(n) {
  const { abi: e, args: t, functionName: r, data: i } = n;
  let s = e[0];
  if (r) {
    const o = qo({ abi: e, args: t, name: r });
    if (!o)
      throw new Jc(r, { docsPath: yl });
    s = o;
  }
  if (s.type !== "function")
    throw new Jc(void 0, { docsPath: yl });
  if (!s.outputs)
    throw new t1(s.name, { docsPath: yl });
  const a = _u(s.outputs, i);
  if (a && a.length > 1)
    return a;
  if (a && a.length === 1)
    return a[0];
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const Cf = /* @__PURE__ */ BigInt(0), dd = /* @__PURE__ */ BigInt(1);
function ru(n, e) {
  if (typeof e != "boolean")
    throw new Error(n + " boolean expected, got " + e);
}
function fc(n) {
  const e = n.toString(16);
  return e.length & 1 ? "0" + e : e;
}
function Zy(n) {
  if (typeof n != "string")
    throw new Error("hex string expected, got " + typeof n);
  return n === "" ? Cf : BigInt("0x" + n);
}
function Fu(n) {
  return Zy(ho(n));
}
function Xy(n) {
  return an(n), Zy(ho(Uint8Array.from(n).reverse()));
}
function Of(n, e) {
  return df(n.toString(16).padStart(e * 2, "0"));
}
function em(n, e) {
  return Of(n, e).reverse();
}
function Lt(n, e, t) {
  let r;
  if (typeof e == "string")
    try {
      r = df(e);
    } catch (s) {
      throw new Error(n + " must be hex string or Uint8Array, cause: " + s);
    }
  else if (lf(e))
    r = Uint8Array.from(e);
  else
    throw new Error(n + " must be hex string or Uint8Array");
  const i = r.length;
  if (typeof t == "number" && i !== t)
    throw new Error(n + " of length " + t + " expected, got " + i);
  return r;
}
const ml = (n) => typeof n == "bigint" && Cf <= n;
function S6(n, e, t) {
  return ml(n) && ml(e) && ml(t) && e <= n && n < t;
}
function I6(n, e, t, r) {
  if (!S6(e, t, r))
    throw new Error("expected valid " + n + ": " + t + " <= n < " + r + ", got " + e);
}
function C6(n) {
  let e;
  for (e = 0; n > Cf; n >>= dd, e += 1)
    ;
  return e;
}
const Gu = (n) => (dd << BigInt(n)) - dd;
function O6(n, e, t) {
  if (typeof n != "number" || n < 2)
    throw new Error("hashLen must be a number");
  if (typeof e != "number" || e < 2)
    throw new Error("qByteLen must be a number");
  if (typeof t != "function")
    throw new Error("hmacFn must be a function");
  const r = (p) => new Uint8Array(p), i = (p) => Uint8Array.of(p);
  let s = r(n), a = r(n), o = 0;
  const c = () => {
    s.fill(1), a.fill(0), o = 0;
  }, u = (...p) => t(a, s, ...p), l = (p = r(0)) => {
    a = u(i(0), p), s = u(), p.length !== 0 && (a = u(i(1), p), s = u());
  }, d = () => {
    if (o++ >= 1e3)
      throw new Error("drbg: tried 1000 values");
    let p = 0;
    const y = [];
    for (; p < e; ) {
      s = u();
      const h = s.slice();
      y.push(h), p += s.length;
    }
    return hi(...y);
  };
  return (p, y) => {
    c(), l(p);
    let h;
    for (; !(h = y(d())); )
      l();
    return c(), h;
  };
}
function Nf(n, e, t = {}) {
  if (!n || typeof n != "object")
    throw new Error("expected valid options object");
  function r(i, s, a) {
    const o = n[i];
    if (a && o === void 0)
      return;
    const c = typeof o;
    if (c !== s || o === null)
      throw new Error(`param "${i}" is invalid: expected ${s}, got ${c}`);
  }
  Object.entries(e).forEach(([i, s]) => r(i, s, !1)), Object.entries(t).forEach(([i, s]) => r(i, s, !0));
}
function z0(n) {
  const e = /* @__PURE__ */ new WeakMap();
  return (t, ...r) => {
    const i = e.get(t);
    if (i !== void 0)
      return i;
    const s = n(t, ...r);
    return e.set(t, s), s;
  };
}
const N6 = "0.1.1";
function R6() {
  return N6;
}
class bo extends Error {
  constructor(e, t = {}) {
    const r = (() => {
      var c;
      if (t.cause instanceof bo) {
        if (t.cause.details)
          return t.cause.details;
        if (t.cause.shortMessage)
          return t.cause.shortMessage;
      }
      return t.cause && "details" in t.cause && typeof t.cause.details == "string" ? t.cause.details : (c = t.cause) != null && c.message ? t.cause.message : t.details;
    })(), i = t.cause instanceof bo && t.cause.docsPath || t.docsPath, a = `https://oxlib.sh${i ?? ""}`, o = [
      e || "An error occurred.",
      ...t.metaMessages ? ["", ...t.metaMessages] : [],
      ...r || i ? [
        "",
        r ? `Details: ${r}` : void 0,
        i ? `See: ${a}` : void 0
      ] : []
    ].filter((c) => typeof c == "string").join(`
`);
    super(o, t.cause ? { cause: t.cause } : void 0), Object.defineProperty(this, "details", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "docs", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "docsPath", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "shortMessage", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "cause", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "name", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: "BaseError"
    }), Object.defineProperty(this, "version", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: `ox@${R6()}`
    }), this.cause = t.cause, this.details = r, this.docs = a, this.docsPath = i, this.shortMessage = e;
  }
  walk(e) {
    return tm(this, e);
  }
}
function tm(n, e) {
  return e != null && e(n) ? n : n && typeof n == "object" && "cause" in n && n.cause ? tm(n.cause, e) : e ? null : n;
}
function B6(n, e = {}) {
  const { dir: t, size: r = 32 } = e;
  if (r === 0)
    return n;
  const i = n.replace("0x", "");
  if (i.length > r * 2)
    throw new L6({
      size: Math.ceil(i.length / 2),
      targetSize: r,
      type: "Hex"
    });
  return `0x${i[t === "right" ? "padEnd" : "padStart"](r * 2, "0")}`;
}
function $n(n, e = {}) {
  const { signed: t, size: r } = e, i = BigInt(n);
  let s;
  r ? t ? s = (1n << BigInt(r) * 8n - 1n) - 1n : s = 2n ** (BigInt(r) * 8n) - 1n : typeof n == "number" && (s = BigInt(Number.MAX_SAFE_INTEGER));
  const a = typeof s == "bigint" && t ? -s - 1n : 0;
  if (s && i > s || i < a) {
    const u = typeof n == "bigint" ? "n" : "";
    throw new k6({
      max: s ? `${s}${u}` : void 0,
      min: `${a}${u}`,
      signed: t,
      size: r,
      value: `${n}${u}`
    });
  }
  const c = `0x${(t && i < 0 ? (1n << BigInt(r * 8)) + BigInt(i) : i).toString(16)}`;
  return r ? _6(c, r) : c;
}
function _6(n, e) {
  return B6(n, { dir: "left", size: e });
}
class k6 extends bo {
  constructor({ max: e, min: t, signed: r, size: i, value: s }) {
    super(`Number \`${s}\` is not in safe${i ? ` ${i * 8}-bit` : ""}${r ? " signed" : " unsigned"} integer range ${e ? `(\`${t}\` to \`${e}\`)` : `(above \`${t}\`)`}`), Object.defineProperty(this, "name", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: "Hex.IntegerOutOfRangeError"
    });
  }
}
class L6 extends bo {
  constructor({ size: e, targetSize: t, type: r }) {
    super(`${r.charAt(0).toUpperCase()}${r.slice(1).toLowerCase()} size (\`${e}\`) exceeds padding size (\`${t}\`).`), Object.defineProperty(this, "name", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: "Hex.SizeExceedsPaddingSizeError"
    });
  }
}
function M6(n) {
  return {
    address: n.address,
    amount: $n(n.amount),
    index: $n(n.index),
    validatorIndex: $n(n.validatorIndex)
  };
}
function D6(n) {
  return {
    ...typeof n.baseFeePerGas == "bigint" && {
      baseFeePerGas: $n(n.baseFeePerGas)
    },
    ...typeof n.blobBaseFee == "bigint" && {
      blobBaseFee: $n(n.blobBaseFee)
    },
    ...typeof n.feeRecipient == "string" && {
      feeRecipient: n.feeRecipient
    },
    ...typeof n.gasLimit == "bigint" && {
      gasLimit: $n(n.gasLimit)
    },
    ...typeof n.number == "bigint" && {
      number: $n(n.number)
    },
    ...typeof n.prevRandao == "bigint" && {
      prevRandao: $n(n.prevRandao)
    },
    ...typeof n.time == "bigint" && {
      time: $n(n.time)
    },
    ...n.withdrawals && {
      withdrawals: n.withdrawals.map(M6)
    }
  };
}
const j0 = [
  {
    inputs: [
      {
        components: [
          {
            name: "target",
            type: "address"
          },
          {
            name: "allowFailure",
            type: "bool"
          },
          {
            name: "callData",
            type: "bytes"
          }
        ],
        name: "calls",
        type: "tuple[]"
      }
    ],
    name: "aggregate3",
    outputs: [
      {
        components: [
          {
            name: "success",
            type: "bool"
          },
          {
            name: "returnData",
            type: "bytes"
          }
        ],
        name: "returnData",
        type: "tuple[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
], sT = [
  {
    name: "query",
    type: "function",
    stateMutability: "view",
    inputs: [
      {
        type: "tuple[]",
        name: "queries",
        components: [
          {
            type: "address",
            name: "sender"
          },
          {
            type: "string[]",
            name: "urls"
          },
          {
            type: "bytes",
            name: "data"
          }
        ]
      }
    ],
    outputs: [
      {
        type: "bool[]",
        name: "failures"
      },
      {
        type: "bytes[]",
        name: "responses"
      }
    ]
  },
  {
    name: "HttpError",
    type: "error",
    inputs: [
      {
        type: "uint16",
        name: "status"
      },
      {
        type: "string",
        name: "message"
      }
    ]
  }
], pc = [
  {
    type: "event",
    name: "Approval",
    inputs: [
      {
        indexed: !0,
        name: "owner",
        type: "address"
      },
      {
        indexed: !0,
        name: "spender",
        type: "address"
      },
      {
        indexed: !1,
        name: "value",
        type: "uint256"
      }
    ]
  },
  {
    type: "event",
    name: "Transfer",
    inputs: [
      {
        indexed: !0,
        name: "from",
        type: "address"
      },
      {
        indexed: !0,
        name: "to",
        type: "address"
      },
      {
        indexed: !1,
        name: "value",
        type: "uint256"
      }
    ]
  },
  {
    type: "function",
    name: "allowance",
    stateMutability: "view",
    inputs: [
      {
        name: "owner",
        type: "address"
      },
      {
        name: "spender",
        type: "address"
      }
    ],
    outputs: [
      {
        type: "uint256"
      }
    ]
  },
  {
    type: "function",
    name: "approve",
    stateMutability: "nonpayable",
    inputs: [
      {
        name: "spender",
        type: "address"
      },
      {
        name: "amount",
        type: "uint256"
      }
    ],
    outputs: [
      {
        type: "bool"
      }
    ]
  },
  {
    type: "function",
    name: "balanceOf",
    stateMutability: "view",
    inputs: [
      {
        name: "account",
        type: "address"
      }
    ],
    outputs: [
      {
        type: "uint256"
      }
    ]
  },
  {
    type: "function",
    name: "decimals",
    stateMutability: "view",
    inputs: [],
    outputs: [
      {
        type: "uint8"
      }
    ]
  },
  {
    type: "function",
    name: "name",
    stateMutability: "view",
    inputs: [],
    outputs: [
      {
        type: "string"
      }
    ]
  },
  {
    type: "function",
    name: "symbol",
    stateMutability: "view",
    inputs: [],
    outputs: [
      {
        type: "string"
      }
    ]
  },
  {
    type: "function",
    name: "totalSupply",
    stateMutability: "view",
    inputs: [],
    outputs: [
      {
        type: "uint256"
      }
    ]
  },
  {
    type: "function",
    name: "transfer",
    stateMutability: "nonpayable",
    inputs: [
      {
        name: "recipient",
        type: "address"
      },
      {
        name: "amount",
        type: "uint256"
      }
    ],
    outputs: [
      {
        type: "bool"
      }
    ]
  },
  {
    type: "function",
    name: "transferFrom",
    stateMutability: "nonpayable",
    inputs: [
      {
        name: "sender",
        type: "address"
      },
      {
        name: "recipient",
        type: "address"
      },
      {
        name: "amount",
        type: "uint256"
      }
    ],
    outputs: [
      {
        type: "bool"
      }
    ]
  }
], U6 = "0x82ad56cb", F6 = "0x608060405234801561001057600080fd5b5060405161018e38038061018e83398101604081905261002f91610124565b6000808351602085016000f59050803b61004857600080fd5b6000808351602085016000855af16040513d6000823e81610067573d81fd5b3d81f35b634e487b7160e01b600052604160045260246000fd5b600082601f83011261009257600080fd5b81516001600160401b038111156100ab576100ab61006b565b604051601f8201601f19908116603f011681016001600160401b03811182821017156100d9576100d961006b565b6040528181528382016020018510156100f157600080fd5b60005b82811015610110576020818601810151838301820152016100f4565b506000918101602001919091529392505050565b6000806040838503121561013757600080fd5b82516001600160401b0381111561014d57600080fd5b61015985828601610081565b602085015190935090506001600160401b0381111561017757600080fd5b61018385828601610081565b915050925092905056fe", G6 = "0x608060405234801561001057600080fd5b506040516102c03803806102c083398101604081905261002f916101e6565b836001600160a01b03163b6000036100e457600080836001600160a01b03168360405161005c9190610270565b6000604051808303816000865af19150503d8060008114610099576040519150601f19603f3d011682016040523d82523d6000602084013e61009e565b606091505b50915091508115806100b857506001600160a01b0386163b155b156100e1578060405163101bb98d60e01b81526004016100d8919061028c565b60405180910390fd5b50505b6000808451602086016000885af16040513d6000823e81610103573d81fd5b3d81f35b80516001600160a01b038116811461011e57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561015457818101518382015260200161013c565b50506000910152565b600082601f83011261016e57600080fd5b81516001600160401b0381111561018757610187610123565b604051601f8201601f19908116603f011681016001600160401b03811182821017156101b5576101b5610123565b6040528181528382016020018510156101cd57600080fd5b6101de826020830160208701610139565b949350505050565b600080600080608085870312156101fc57600080fd5b61020585610107565b60208601519094506001600160401b0381111561022157600080fd5b61022d8782880161015d565b93505061023c60408601610107565b60608601519092506001600160401b0381111561025857600080fd5b6102648782880161015d565b91505092959194509250565b60008251610282818460208701610139565b9190910192915050565b60208152600082518060208401526102ab816040850160208701610139565b601f01601f1916919091016040019291505056fe";
class fd extends j {
  constructor({ blockNumber: e, chain: t, contract: r }) {
    super(`Chain "${t.name}" does not support contract "${r.name}".`, {
      metaMessages: [
        "This could be due to any of the following:",
        ...e && r.blockCreated && r.blockCreated > e ? [
          `- The contract "${r.name}" was not deployed until block ${r.blockCreated} (current block ${e}).`
        ] : [
          `- The chain does not have the contract "${r.name}" configured.`
        ]
      ],
      name: "ChainDoesNotSupportContract"
    });
  }
}
class H6 extends j {
  constructor({ chain: e, currentChainId: t }) {
    super(`The current chain of the wallet (id: ${t}) does not match the target chain for the transaction (id: ${e.id} – ${e.name}).`, {
      metaMessages: [
        `Current Chain ID:  ${t}`,
        `Expected Chain ID: ${e.id} – ${e.name}`
      ],
      name: "ChainMismatchError"
    });
  }
}
class $6 extends j {
  constructor() {
    super([
      "No chain was provided to the request.",
      "Please provide a chain with the `chain` argument on the Action, or by supplying a `chain` to WalletClient."
    ].join(`
`), {
      name: "ChainNotFoundError"
    });
  }
}
class nm extends j {
  constructor() {
    super("No chain was provided to the Client.", {
      name: "ClientChainNotConfiguredError"
    });
  }
}
const bl = "/docs/contract/encodeDeployData";
function rm(n) {
  const { abi: e, args: t, bytecode: r } = n;
  if (!t || t.length === 0)
    return r;
  const i = e.find((a) => "type" in a && a.type === "constructor");
  if (!i)
    throw new J2({ docsPath: bl });
  if (!("inputs" in i))
    throw new E0({ docsPath: bl });
  if (!i.inputs || i.inputs.length === 0)
    throw new E0({ docsPath: bl });
  const s = hf(i.inputs, t);
  return Bu([r, s]);
}
function V6({ blockNumber: n, chain: e, contract: t }) {
  var i;
  const r = (i = e == null ? void 0 : e.contracts) == null ? void 0 : i[t];
  if (!r)
    throw new fd({
      chain: e,
      contract: { name: t }
    });
  if (n && r.blockCreated && r.blockCreated > n)
    throw new fd({
      blockNumber: n,
      chain: e,
      contract: {
        name: t,
        blockCreated: r.blockCreated
      }
    });
  return r.address;
}
function z6(n, { docsPath: e, ...t }) {
  const r = (() => {
    const i = Ef(n, t);
    return i instanceof Du ? n : i;
  })();
  return new Nw(r, {
    docsPath: e,
    ...t
  });
}
function j6() {
  let n = () => {
  }, e = () => {
  };
  return { promise: new Promise((r, i) => {
    n = r, e = i;
  }), resolve: n, reject: e };
}
const xl = /* @__PURE__ */ new Map();
function W6({ fn: n, id: e, shouldSplitBatch: t, wait: r = 0, sort: i }) {
  const s = async () => {
    const l = c();
    a();
    const d = l.map(({ args: f }) => f);
    d.length !== 0 && n(d).then((f) => {
      i && Array.isArray(f) && f.sort(i);
      for (let p = 0; p < l.length; p++) {
        const { resolve: y } = l[p];
        y == null || y([f[p], f]);
      }
    }).catch((f) => {
      for (let p = 0; p < l.length; p++) {
        const { reject: y } = l[p];
        y == null || y(f);
      }
    });
  }, a = () => xl.delete(e), o = () => c().map(({ args: l }) => l), c = () => xl.get(e) || [], u = (l) => xl.set(e, [...c(), l]);
  return {
    flush: a,
    async schedule(l) {
      const { promise: d, resolve: f, reject: p } = j6();
      return (t == null ? void 0 : t([...o(), l])) && s(), c().length > 0 ? (u({ args: l, resolve: f, reject: p }), d) : (u({ args: l, resolve: f, reject: p }), setTimeout(s, r), d);
    }
  };
}
async function im(n, e) {
  var F, M, P, S;
  const { account: t = n.account, authorizationList: r, batch: i = !!((F = n.batch) != null && F.multicall), blockNumber: s, blockTag: a = "latest", accessList: o, blobs: c, blockOverrides: u, code: l, data: d, factory: f, factoryData: p, gas: y, gasPrice: h, maxFeePerBlobGas: b, maxFeePerGas: x, maxPriorityFeePerGas: w, nonce: E, to: N, value: I, stateOverride: B, ...U } = e, C = t ? xr(t) : void 0;
  if (l && (f || p))
    throw new j("Cannot provide both `code` & `factory`/`factoryData` as parameters.");
  if (l && N)
    throw new j("Cannot provide both `code` & `to` as parameters.");
  const v = l && d, L = f && p && N && d, O = v || L, R = v ? q6({
    code: l,
    data: d
  }) : L ? J6({
    data: d,
    factory: f,
    factoryData: p,
    to: N
  }) : d;
  try {
    Uu(e);
    const D = (typeof s == "bigint" ? re(s) : void 0) || a, $ = u ? D6(u) : void 0, H = Fy(B), W = (S = (P = (M = n.chain) == null ? void 0 : M.formatters) == null ? void 0 : P.transactionRequest) == null ? void 0 : S.format, ie = (W || Tf)({
      // Pick out extra data that might exist on the chain's transaction request type.
      ...vf(U, { format: W }),
      from: C == null ? void 0 : C.address,
      accessList: o,
      authorizationList: r,
      blobs: c,
      data: R,
      gas: y,
      gasPrice: h,
      maxFeePerBlobGas: b,
      maxFeePerGas: x,
      maxPriorityFeePerGas: w,
      nonce: E,
      to: O ? void 0 : N,
      value: I
    });
    if (i && K6({ request: ie }) && !H && !$)
      try {
        return await Q6(n, {
          ...ie,
          blockNumber: s,
          blockTag: a
        });
      } catch (Z) {
        if (!(Z instanceof nm) && !(Z instanceof fd))
          throw Z;
      }
    const se = (() => {
      const Z = [
        ie,
        D
      ];
      return H && $ ? [...Z, H, $] : H ? [...Z, H] : $ ? [...Z, {}, $] : Z;
    })(), Q = await n.request({
      method: "eth_call",
      params: se
    });
    return Q === "0x" ? { data: void 0 } : { data: Q };
  } catch (k) {
    const D = Y6(k), { offchainLookup: $, offchainLookupSignature: H } = await import("./ccip-BQlDRGA6.js");
    if (n.ccipRead !== !1 && (D == null ? void 0 : D.slice(0, 10)) === H && N)
      return { data: await $(n, { data: D, to: N }) };
    throw O && (D == null ? void 0 : D.slice(0, 10)) === "0x101bb98d" ? new kw({ factory: f }) : z6(k, {
      ...e,
      account: C,
      chain: n.chain
    });
  }
}
function K6({ request: n }) {
  const { data: e, to: t, ...r } = n;
  return !(!e || e.startsWith(U6) || !t || Object.values(r).filter((i) => typeof i < "u").length > 0);
}
async function Q6(n, e) {
  var h;
  const { batchSize: t = 1024, wait: r = 0 } = typeof ((h = n.batch) == null ? void 0 : h.multicall) == "object" ? n.batch.multicall : {}, { blockNumber: i, blockTag: s = "latest", data: a, multicallAddress: o, to: c } = e;
  let u = o;
  if (!u) {
    if (!n.chain)
      throw new nm();
    u = V6({
      blockNumber: i,
      chain: n.chain,
      contract: "multicall3"
    });
  }
  const d = (typeof i == "bigint" ? re(i) : void 0) || s, { schedule: f } = W6({
    id: `${n.uid}.${d}`,
    wait: r,
    shouldSplitBatch(b) {
      return b.reduce((w, { data: E }) => w + (E.length - 2), 0) > t * 2;
    },
    fn: async (b) => {
      const x = b.map((N) => ({
        allowFailure: !0,
        callData: N.data,
        target: N.to
      })), w = ei({
        abi: j0,
        args: [x],
        functionName: "aggregate3"
      }), E = await n.request({
        method: "eth_call",
        params: [
          {
            data: w,
            to: u
          },
          d
        ]
      });
      return If({
        abi: j0,
        args: [x],
        functionName: "aggregate3",
        data: E || "0x"
      });
    }
  }), [{ returnData: p, success: y }] = await f({ data: a, to: c });
  if (!y)
    throw new _y({ data: p });
  return p === "0x" ? { data: void 0 } : { data: p };
}
function q6(n) {
  const { code: e, data: t } = n;
  return rm({
    abi: ry(["constructor(bytes, bytes)"]),
    bytecode: F6,
    args: [e, t]
  });
}
function J6(n) {
  const { data: e, factory: t, factoryData: r, to: i } = n;
  return rm({
    abi: ry(["constructor(address, bytes, address, bytes)"]),
    bytecode: G6,
    args: [i, e, t, r]
  });
}
function Y6(n) {
  var t;
  if (!(n instanceof j))
    return;
  const e = n.walk();
  return typeof (e == null ? void 0 : e.data) == "object" ? (t = e.data) == null ? void 0 : t.data : e.data;
}
async function Z6(n, e) {
  const { abi: t, address: r, args: i, functionName: s, ...a } = e, o = ei({
    abi: t,
    args: i,
    functionName: s
  });
  try {
    const { data: c } = await he(n, im, "call")({
      ...a,
      data: o,
      to: r
    });
    return If({
      abi: t,
      args: i,
      functionName: s,
      data: c || "0x"
    });
  } catch (c) {
    throw Mu(c, {
      abi: t,
      address: r,
      args: i,
      docsPath: "/docs/contract/readContract",
      functionName: s
    });
  }
}
async function X6(n, e) {
  const { abi: t, address: r, args: i, dataSuffix: s, functionName: a, ...o } = e, c = o.account ? xr(o.account) : n.account, u = ei({ abi: t, args: i, functionName: a });
  try {
    const { data: l } = await he(n, im, "call")({
      batch: !1,
      data: `${u}${s ? s.replace("0x", "") : ""}`,
      to: r,
      ...o,
      account: c
    }), d = If({
      abi: t,
      args: i,
      functionName: a,
      data: l || "0x"
    }), f = t.filter((p) => "name" in p && p.name === e.functionName);
    return {
      result: d,
      request: {
        abi: f,
        address: r,
        args: i,
        dataSuffix: s,
        functionName: a,
        ...o,
        account: c
      }
    };
  } catch (l) {
    throw Mu(l, {
      abi: t,
      address: r,
      args: i,
      docsPath: "/docs/contract/simulateContract",
      functionName: a,
      sender: c == null ? void 0 : c.address
    });
  }
}
const gl = /* @__PURE__ */ new Map(), W0 = /* @__PURE__ */ new Map();
let eA = 0;
function K0(n, e, t) {
  const r = ++eA, i = () => gl.get(n) || [], s = () => {
    const l = i();
    gl.set(n, l.filter((d) => d.id !== r));
  }, a = () => {
    const l = i();
    if (!l.some((f) => f.id === r))
      return;
    const d = W0.get(n);
    if (l.length === 1 && d) {
      const f = d();
      f instanceof Promise && f.catch(() => {
      });
    }
    s();
  }, o = i();
  if (gl.set(n, [
    ...o,
    { id: r, fns: e }
  ]), o && o.length > 0)
    return a;
  const c = {};
  for (const l in e)
    c[l] = (...d) => {
      var p, y;
      const f = i();
      if (f.length !== 0)
        for (const h of f)
          (y = (p = h.fns)[l]) == null || y.call(p, ...d);
    };
  const u = t(c);
  return typeof u == "function" && W0.set(n, u), a;
}
async function Q0(n) {
  return new Promise((e) => setTimeout(e, n));
}
function tA(n, { emitOnBegin: e, initialWaitTime: t, interval: r }) {
  let i = !0;
  const s = () => i = !1;
  return (async () => {
    let o;
    o = await n({ unpoll: s });
    const c = await (t == null ? void 0 : t(o)) ?? r;
    await Q0(c);
    const u = async () => {
      i && (await n({ unpoll: s }), await Q0(r), u());
    };
    u();
  })(), s;
}
const nA = /* @__PURE__ */ new Map(), rA = /* @__PURE__ */ new Map();
function iA(n) {
  const e = (i, s) => ({
    clear: () => s.delete(i),
    get: () => s.get(i),
    set: (a) => s.set(i, a)
  }), t = e(n, nA), r = e(n, rA);
  return {
    clear: () => {
      t.clear(), r.clear();
    },
    promise: t,
    response: r
  };
}
async function sA(n, { cacheKey: e, cacheTime: t = Number.POSITIVE_INFINITY }) {
  const r = iA(e), i = r.response.get();
  if (i && t > 0 && (/* @__PURE__ */ new Date()).getTime() - i.created.getTime() < t)
    return i.data;
  let s = r.promise.get();
  s || (s = n(), r.promise.set(s));
  try {
    const a = await s;
    return r.response.set({ created: /* @__PURE__ */ new Date(), data: a }), a;
  } finally {
    r.promise.clear();
  }
}
const aA = (n) => `blockNumber.${n}`;
async function oA(n, { cacheTime: e = n.cacheTime } = {}) {
  const t = await sA(() => n.request({
    method: "eth_blockNumber"
  }), { cacheKey: aA(n.uid), cacheTime: e });
  return BigInt(t);
}
async function cA(n, { filter: e }) {
  const t = "strict" in e && e.strict, r = await e.request({
    method: "eth_getFilterChanges",
    params: [e.id]
  });
  if (typeof r[0] == "string")
    return r;
  const i = r.map((s) => nu(s));
  return !("abi" in e) || !e.abi ? i : Yo({
    abi: e.abi,
    logs: i,
    strict: t
  });
}
async function uA(n, { filter: e }) {
  return e.request({
    method: "eth_uninstallFilter",
    params: [e.id]
  });
}
function lA(n, e) {
  const { abi: t, address: r, args: i, batch: s = !0, eventName: a, fromBlock: o, onError: c, onLogs: u, poll: l, pollingInterval: d = n.pollingInterval, strict: f } = e;
  return (typeof l < "u" ? l : typeof o == "bigint" ? !0 : !(n.transport.type === "webSocket" || n.transport.type === "ipc" || n.transport.type === "fallback" && (n.transport.transports[0].config.type === "webSocket" || n.transport.transports[0].config.type === "ipc"))) ? (() => {
    const b = f ?? !1, x = mo([
      "watchContractEvent",
      r,
      i,
      s,
      n.uid,
      a,
      d,
      b,
      o
    ]);
    return K0(x, { onLogs: u, onError: c }, (w) => {
      let E;
      o !== void 0 && (E = o - 1n);
      let N, I = !1;
      const B = tA(async () => {
        var U;
        if (!I) {
          try {
            N = await he(n, Cy, "createContractEventFilter")({
              abi: t,
              address: r,
              args: i,
              eventName: a,
              strict: b,
              fromBlock: o
            });
          } catch {
          }
          I = !0;
          return;
        }
        try {
          let C;
          if (N)
            C = await he(n, cA, "getFilterChanges")({ filter: N });
          else {
            const v = await he(n, oA, "getBlockNumber")({});
            E && E < v ? C = await he(n, Yy, "getContractEvents")({
              abi: t,
              address: r,
              args: i,
              eventName: a,
              fromBlock: E + 1n,
              toBlock: v,
              strict: b
            }) : C = [], E = v;
          }
          if (C.length === 0)
            return;
          if (s)
            w.onLogs(C);
          else
            for (const v of C)
              w.onLogs([v]);
        } catch (C) {
          N && C instanceof Lu && (I = !1), (U = w.onError) == null || U.call(w, C);
        }
      }, {
        emitOnBegin: !0,
        interval: d
      });
      return async () => {
        N && await he(n, uA, "uninstallFilter")({ filter: N }), B();
      };
    });
  })() : (() => {
    const b = f ?? !1, x = mo([
      "watchContractEvent",
      r,
      i,
      s,
      n.uid,
      a,
      d,
      b
    ]);
    let w = !0, E = () => w = !1;
    return K0(x, { onLogs: u, onError: c }, (N) => ((async () => {
      try {
        const I = (() => {
          if (n.transport.type === "fallback") {
            const C = n.transport.transports.find((v) => v.config.type === "webSocket" || v.config.type === "ipc");
            return C ? C.value : n.transport;
          }
          return n.transport;
        })(), B = a ? gf({
          abi: t,
          eventName: a,
          args: i
        }) : [], { unsubscribe: U } = await I.subscribe({
          params: ["logs", { address: r, topics: B }],
          onData(C) {
            var L;
            if (!w)
              return;
            const v = C.result;
            try {
              const { eventName: O, args: R } = Jy({
                abi: t,
                data: v.data,
                topics: v.topics,
                strict: f
              }), F = nu(v, {
                args: R,
                eventName: O
              });
              N.onLogs([F]);
            } catch (O) {
              let R, F;
              if (O instanceof Yc || O instanceof cf) {
                if (f)
                  return;
                R = O.abiItem.name, F = (L = O.abiItem.inputs) == null ? void 0 : L.some((P) => !("name" in P && P.name));
              }
              const M = nu(v, {
                args: F ? [] : {},
                eventName: R
              });
              N.onLogs([M]);
            }
          },
          onError(C) {
            var v;
            (v = N.onError) == null || v.call(N, C);
          }
        });
        E = U, w || E();
      } catch (I) {
        c == null || c(I);
      }
    })(), () => E()));
  })();
}
class sm extends j {
  constructor({ docsPath: e } = {}) {
    super([
      "Could not find an Account to execute with this Action.",
      "Please provide an Account with the `account` argument on the Action, or by supplying an `account` to the Client."
    ].join(`
`), {
      docsPath: e,
      docsSlug: "account",
      name: "AccountNotFoundError"
    });
  }
}
class wl extends j {
  constructor({ docsPath: e, metaMessages: t, type: r }) {
    super(`Account type "${r}" is not supported.`, {
      docsPath: e,
      metaMessages: t,
      name: "AccountTypeNotSupportedError"
    });
  }
}
function dA({ chain: n, currentChainId: e }) {
  if (!n)
    throw new $6();
  if (e !== n.id)
    throw new H6({ chain: n, currentChainId: e });
}
function fA(n, { docsPath: e, ...t }) {
  const r = (() => {
    const i = Ef(n, t);
    return i instanceof Du ? n : i;
  })();
  return new Cw(r, {
    docsPath: e,
    ...t
  });
}
async function pA(n, { serializedTransaction: e }) {
  return n.request({
    method: "eth_sendRawTransaction",
    params: [e]
  }, { retryCount: 0 });
}
const Al = new pf(128);
async function hA(n, e) {
  var w, E, N, I;
  const { account: t = n.account, chain: r = n.chain, accessList: i, authorizationList: s, blobs: a, data: o, gas: c, gasPrice: u, maxFeePerBlobGas: l, maxFeePerGas: d, maxPriorityFeePerGas: f, nonce: p, type: y, value: h, ...b } = e;
  if (typeof t > "u")
    throw new sm({
      docsPath: "/docs/actions/wallet/sendTransaction"
    });
  const x = t ? xr(t) : null;
  try {
    Uu(e);
    const B = await (async () => {
      if (e.to)
        return e.to;
      if (e.to !== null && s && s.length > 0)
        return await Uy({
          authorization: s[0]
        }).catch(() => {
          throw new j("`to` is required. Could not infer from `authorizationList`.");
        });
    })();
    if ((x == null ? void 0 : x.type) === "json-rpc" || x === null) {
      let U;
      r !== null && (U = await he(n, Wy, "getChainId")({}), dA({
        currentChainId: U,
        chain: r
      }));
      const C = (N = (E = (w = n.chain) == null ? void 0 : w.formatters) == null ? void 0 : E.transactionRequest) == null ? void 0 : N.format, L = (C || Tf)({
        // Pick out extra data that might exist on the chain's transaction request type.
        ...vf(b, { format: C }),
        accessList: i,
        authorizationList: s,
        blobs: a,
        chainId: U,
        data: o,
        from: x == null ? void 0 : x.address,
        gas: c,
        gasPrice: u,
        maxFeePerBlobGas: l,
        maxFeePerGas: d,
        maxPriorityFeePerGas: f,
        nonce: p,
        to: B,
        type: y,
        value: h
      }), O = Al.get(n.uid), R = O ? "wallet_sendTransaction" : "eth_sendTransaction";
      try {
        return await n.request({
          method: R,
          params: [L]
        }, { retryCount: 0 });
      } catch (F) {
        if (O === !1)
          throw F;
        const M = F;
        if (M.name === "InvalidInputRpcError" || M.name === "InvalidParamsRpcError" || M.name === "MethodNotFoundRpcError" || M.name === "MethodNotSupportedRpcError")
          return await n.request({
            method: "wallet_sendTransaction",
            params: [L]
          }, { retryCount: 0 }).then((P) => (Al.set(n.uid, !0), P)).catch((P) => {
            const S = P;
            throw S.name === "MethodNotFoundRpcError" || S.name === "MethodNotSupportedRpcError" ? (Al.set(n.uid, !1), M) : S;
          });
        throw M;
      }
    }
    if ((x == null ? void 0 : x.type) === "local") {
      const U = await he(n, Qy, "prepareTransactionRequest")({
        account: x,
        accessList: i,
        authorizationList: s,
        blobs: a,
        chain: r,
        data: o,
        gas: c,
        gasPrice: u,
        maxFeePerBlobGas: l,
        maxFeePerGas: d,
        maxPriorityFeePerGas: f,
        nonce: p,
        nonceManager: x.nonceManager,
        parameters: [...Ky, "sidecars"],
        type: y,
        value: h,
        ...b,
        to: B
      }), C = (I = r == null ? void 0 : r.serializers) == null ? void 0 : I.transaction, v = await x.signTransaction(U, {
        serializer: C
      });
      return await he(n, pA, "sendRawTransaction")({
        serializedTransaction: v
      });
    }
    throw (x == null ? void 0 : x.type) === "smart" ? new wl({
      metaMessages: [
        "Consider using the `sendUserOperation` Action instead."
      ],
      docsPath: "/docs/actions/bundler/sendUserOperation",
      type: "smart"
    }) : new wl({
      docsPath: "/docs/actions/wallet/sendTransaction",
      type: x == null ? void 0 : x.type
    });
  } catch (B) {
    throw B instanceof wl ? B : fA(B, {
      ...e,
      account: x,
      chain: e.chain || void 0
    });
  }
}
async function yA(n, e) {
  const { abi: t, account: r = n.account, address: i, args: s, dataSuffix: a, functionName: o, ...c } = e;
  if (typeof r > "u")
    throw new sm({
      docsPath: "/docs/contract/writeContract"
    });
  const u = r ? xr(r) : null, l = ei({
    abi: t,
    args: s,
    functionName: o
  });
  try {
    return await he(n, hA, "sendTransaction")({
      data: `${l}${a ? a.replace("0x", "") : ""}`,
      to: i,
      account: u,
      ...c
    });
  } catch (d) {
    throw Mu(d, {
      abi: t,
      address: i,
      args: s,
      docsPath: "/docs/contract/writeContract",
      functionName: o,
      sender: u == null ? void 0 : u.address
    });
  }
}
function Cn({ abi: n, address: e, client: t }) {
  const r = t, [i, s] = r ? "public" in r && "wallet" in r ? [r.public, r.wallet] : "public" in r ? [r.public, void 0] : "wallet" in r ? [void 0, r.wallet] : [r, r] : [void 0, void 0], a = i != null, o = s != null, c = {};
  let u = !1, l = !1, d = !1;
  for (const f of n)
    if (f.type === "function" ? f.stateMutability === "view" || f.stateMutability === "pure" ? u = !0 : l = !0 : f.type === "event" && (d = !0), u && l && d)
      break;
  return a && (u && (c.read = new Proxy({}, {
    get(f, p) {
      return (...y) => {
        const { args: h, options: b } = hc(y);
        return he(i, Z6, "readContract")({
          abi: n,
          address: e,
          functionName: p,
          args: h,
          ...b
        });
      };
    }
  })), l && (c.simulate = new Proxy({}, {
    get(f, p) {
      return (...y) => {
        const { args: h, options: b } = hc(y);
        return he(i, X6, "simulateContract")({
          abi: n,
          address: e,
          functionName: p,
          args: h,
          ...b
        });
      };
    }
  })), d && (c.createEventFilter = new Proxy({}, {
    get(f, p) {
      return (...y) => {
        const h = n.find((w) => w.type === "event" && w.name === p), { args: b, options: x } = El(y, h);
        return he(i, Cy, "createContractEventFilter")({
          abi: n,
          address: e,
          eventName: p,
          args: b,
          ...x
        });
      };
    }
  }), c.getEvents = new Proxy({}, {
    get(f, p) {
      return (...y) => {
        const h = n.find((w) => w.type === "event" && w.name === p), { args: b, options: x } = El(y, h);
        return he(i, Yy, "getContractEvents")({
          abi: n,
          address: e,
          eventName: p,
          args: b,
          ...x
        });
      };
    }
  }), c.watchEvent = new Proxy({}, {
    get(f, p) {
      return (...y) => {
        const h = n.find((w) => w.type === "event" && w.name === p), { args: b, options: x } = El(y, h);
        return he(i, lA, "watchContractEvent")({
          abi: n,
          address: e,
          eventName: p,
          args: b,
          ...x
        });
      };
    }
  }))), o && l && (c.write = new Proxy({}, {
    get(f, p) {
      return (...y) => {
        const { args: h, options: b } = hc(y);
        return he(s, yA, "writeContract")({
          abi: n,
          address: e,
          functionName: p,
          args: h,
          ...b
        });
      };
    }
  })), (a || o) && l && (c.estimateGas = new Proxy({}, {
    get(f, p) {
      return (...y) => {
        const { args: h, options: b } = hc(y);
        return he(i ?? s, A6, "estimateContractGas")({
          abi: n,
          address: e,
          functionName: p,
          args: h,
          ...b,
          account: b.account ?? s.account
        });
      };
    }
  })), c.address = e, c.abi = n, c;
}
function hc(n) {
  const e = n.length && Array.isArray(n[0]), t = e ? n[0] : [], r = (e ? n[1] : n[0]) ?? {};
  return { args: t, options: r };
}
function El(n, e) {
  let t = !1;
  Array.isArray(n[0]) ? t = !0 : n.length === 1 ? t = e.inputs.some((s) => s.indexed) : n.length === 2 && (t = !0);
  const r = t ? n[0] : void 0, i = (t ? n[1] : n[0]) ?? {};
  return { args: r, options: i };
}
let am = class extends ff {
  constructor(e, t) {
    super(), this.finished = !1, this.destroyed = !1, E1(e);
    const r = Ou(t);
    if (this.iHash = e.create(), typeof this.iHash.update != "function")
      throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const i = this.blockLen, s = new Uint8Array(i);
    s.set(r.length > i ? e.create().update(r).digest() : r);
    for (let a = 0; a < s.length; a++)
      s[a] ^= 54;
    this.iHash.update(s), this.oHash = e.create();
    for (let a = 0; a < s.length; a++)
      s[a] ^= 106;
    this.oHash.update(s), ma(s);
  }
  update(e) {
    return ya(this), this.iHash.update(e), this;
  }
  digestInto(e) {
    ya(this), an(e, this.outputLen), this.finished = !0, this.iHash.digestInto(e), this.oHash.update(e), this.oHash.digestInto(e), this.destroy();
  }
  digest() {
    const e = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(e), e;
  }
  _cloneInto(e) {
    e || (e = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: t, iHash: r, finished: i, destroyed: s, blockLen: a, outputLen: o } = this;
    return e = e, e.finished = i, e.destroyed = s, e.blockLen = a, e.outputLen = o, e.oHash = t._cloneInto(e.oHash), e.iHash = r._cloneInto(e.iHash), e;
  }
  clone() {
    return this._cloneInto();
  }
  destroy() {
    this.destroyed = !0, this.oHash.destroy(), this.iHash.destroy();
  }
};
const om = (n, e, t) => new am(n, e).update(t).digest();
om.create = (n, e) => new am(n, e);
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const lt = BigInt(0), nt = BigInt(1), yi = /* @__PURE__ */ BigInt(2), mA = /* @__PURE__ */ BigInt(3), cm = /* @__PURE__ */ BigInt(4), um = /* @__PURE__ */ BigInt(5), lm = /* @__PURE__ */ BigInt(8);
function Ht(n, e) {
  const t = n % e;
  return t >= lt ? t : e + t;
}
function Tt(n, e, t) {
  let r = n;
  for (; e-- > lt; )
    r *= r, r %= t;
  return r;
}
function q0(n, e) {
  if (n === lt)
    throw new Error("invert: expected non-zero number");
  if (e <= lt)
    throw new Error("invert: expected positive modulus, got " + e);
  let t = Ht(n, e), r = e, i = lt, s = nt;
  for (; t !== lt; ) {
    const o = r / t, c = r % t, u = i - s * o;
    r = t, t = c, i = s, s = u;
  }
  if (r !== nt)
    throw new Error("invert: does not exist");
  return Ht(i, e);
}
function dm(n, e) {
  const t = (n.ORDER + nt) / cm, r = n.pow(e, t);
  if (!n.eql(n.sqr(r), e))
    throw new Error("Cannot find square root");
  return r;
}
function bA(n, e) {
  const t = (n.ORDER - um) / lm, r = n.mul(e, yi), i = n.pow(r, t), s = n.mul(e, i), a = n.mul(n.mul(s, yi), i), o = n.mul(s, n.sub(a, n.ONE));
  if (!n.eql(n.sqr(o), e))
    throw new Error("Cannot find square root");
  return o;
}
function xA(n) {
  if (n < BigInt(3))
    throw new Error("sqrt is not defined for small field");
  let e = n - nt, t = 0;
  for (; e % yi === lt; )
    e /= yi, t++;
  let r = yi;
  const i = Hu(n);
  for (; J0(i, r) === 1; )
    if (r++ > 1e3)
      throw new Error("Cannot find square root: probably non-prime P");
  if (t === 1)
    return dm;
  let s = i.pow(r, e);
  const a = (e + nt) / yi;
  return function(c, u) {
    if (c.is0(u))
      return u;
    if (J0(c, u) !== 1)
      throw new Error("Cannot find square root");
    let l = t, d = c.mul(c.ONE, s), f = c.pow(u, e), p = c.pow(u, a);
    for (; !c.eql(f, c.ONE); ) {
      if (c.is0(f))
        return c.ZERO;
      let y = 1, h = c.sqr(f);
      for (; !c.eql(h, c.ONE); )
        if (y++, h = c.sqr(h), y === l)
          throw new Error("Cannot find square root");
      const b = nt << BigInt(l - y - 1), x = c.pow(d, b);
      l = y, d = c.sqr(x), f = c.mul(f, d), p = c.mul(p, x);
    }
    return p;
  };
}
function gA(n) {
  return n % cm === mA ? dm : n % lm === um ? bA : xA(n);
}
const wA = [
  "create",
  "isValid",
  "is0",
  "neg",
  "inv",
  "sqrt",
  "sqr",
  "eql",
  "add",
  "sub",
  "mul",
  "pow",
  "div",
  "addN",
  "subN",
  "mulN",
  "sqrN"
];
function AA(n) {
  const e = {
    ORDER: "bigint",
    MASK: "bigint",
    BYTES: "number",
    BITS: "number"
  }, t = wA.reduce((r, i) => (r[i] = "function", r), e);
  return Nf(n, t), n;
}
function EA(n, e, t) {
  if (t < lt)
    throw new Error("invalid exponent, negatives unsupported");
  if (t === lt)
    return n.ONE;
  if (t === nt)
    return e;
  let r = n.ONE, i = e;
  for (; t > lt; )
    t & nt && (r = n.mul(r, i)), i = n.sqr(i), t >>= nt;
  return r;
}
function fm(n, e, t = !1) {
  const r = new Array(e.length).fill(t ? n.ZERO : void 0), i = e.reduce((a, o, c) => n.is0(o) ? a : (r[c] = a, n.mul(a, o)), n.ONE), s = n.inv(i);
  return e.reduceRight((a, o, c) => n.is0(o) ? a : (r[c] = n.mul(a, r[c]), n.mul(a, o)), s), r;
}
function J0(n, e) {
  const t = (n.ORDER - nt) / yi, r = n.pow(e, t), i = n.eql(r, n.ONE), s = n.eql(r, n.ZERO), a = n.eql(r, n.neg(n.ONE));
  if (!i && !s && !a)
    throw new Error("invalid Legendre symbol result");
  return i ? 1 : s ? 0 : -1;
}
function vA(n, e) {
  e !== void 0 && po(e);
  const t = e !== void 0 ? e : n.toString(2).length, r = Math.ceil(t / 8);
  return { nBitLength: t, nByteLength: r };
}
function Hu(n, e, t = !1, r = {}) {
  if (n <= lt)
    throw new Error("invalid field: expected ORDER > 0, got " + n);
  let i, s;
  if (typeof e == "object" && e != null) {
    if (r.sqrt || t)
      throw new Error("cannot specify opts in two arguments");
    const l = e;
    l.BITS && (i = l.BITS), l.sqrt && (s = l.sqrt), typeof l.isLE == "boolean" && (t = l.isLE);
  } else
    typeof e == "number" && (i = e), r.sqrt && (s = r.sqrt);
  const { nBitLength: a, nByteLength: o } = vA(n, i);
  if (o > 2048)
    throw new Error("invalid field: expected ORDER of <= 2048 bytes");
  let c;
  const u = Object.freeze({
    ORDER: n,
    isLE: t,
    BITS: a,
    BYTES: o,
    MASK: Gu(a),
    ZERO: lt,
    ONE: nt,
    create: (l) => Ht(l, n),
    isValid: (l) => {
      if (typeof l != "bigint")
        throw new Error("invalid field element: expected bigint, got " + typeof l);
      return lt <= l && l < n;
    },
    is0: (l) => l === lt,
    // is valid and invertible
    isValidNot0: (l) => !u.is0(l) && u.isValid(l),
    isOdd: (l) => (l & nt) === nt,
    neg: (l) => Ht(-l, n),
    eql: (l, d) => l === d,
    sqr: (l) => Ht(l * l, n),
    add: (l, d) => Ht(l + d, n),
    sub: (l, d) => Ht(l - d, n),
    mul: (l, d) => Ht(l * d, n),
    pow: (l, d) => EA(u, l, d),
    div: (l, d) => Ht(l * q0(d, n), n),
    // Same as above, but doesn't normalize
    sqrN: (l) => l * l,
    addN: (l, d) => l + d,
    subN: (l, d) => l - d,
    mulN: (l, d) => l * d,
    inv: (l) => q0(l, n),
    sqrt: s || ((l) => (c || (c = gA(n)), c(u, l))),
    toBytes: (l) => t ? em(l, o) : Of(l, o),
    fromBytes: (l) => {
      if (l.length !== o)
        throw new Error("Field.fromBytes: expected " + o + " bytes, got " + l.length);
      return t ? Xy(l) : Fu(l);
    },
    // TODO: we don't need it here, move out to separate fn
    invertBatch: (l) => fm(u, l),
    // We can't move this out because Fp6, Fp12 implement it
    // and it's unclear what to return in there.
    cmov: (l, d, f) => f ? d : l
  });
  return Object.freeze(u);
}
function pm(n) {
  if (typeof n != "bigint")
    throw new Error("field order must be bigint");
  const e = n.toString(2).length;
  return Math.ceil(e / 8);
}
function hm(n) {
  const e = pm(n);
  return e + Math.ceil(e / 2);
}
function TA(n, e, t = !1) {
  const r = n.length, i = pm(e), s = hm(e);
  if (r < 16 || r < s || r > 1024)
    throw new Error("expected " + s + "-1024 bytes of input, got " + r);
  const a = t ? Xy(n) : Fu(n), o = Ht(a, e - nt) + nt;
  return t ? em(o, i) : Of(o, i);
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const xa = BigInt(0), mi = BigInt(1);
function ro(n, e) {
  const t = e.negate();
  return n ? t : e;
}
function PA(n, e, t) {
  const r = (a) => a.pz, i = fm(n.Fp, t.map(r));
  return t.map((a, o) => a.toAffine(i[o])).map(n.fromAffine);
}
function ym(n, e) {
  if (!Number.isSafeInteger(n) || n <= 0 || n > e)
    throw new Error("invalid window size, expected [1.." + e + "], got W=" + n);
}
function vl(n, e) {
  ym(n, e);
  const t = Math.ceil(e / n) + 1, r = 2 ** (n - 1), i = 2 ** n, s = Gu(n), a = BigInt(n);
  return { windows: t, windowSize: r, mask: s, maxNumber: i, shiftBy: a };
}
function Y0(n, e, t) {
  const { windowSize: r, mask: i, maxNumber: s, shiftBy: a } = t;
  let o = Number(n & i), c = n >> a;
  o > r && (o -= s, c += mi);
  const u = e * r, l = u + Math.abs(o) - 1, d = o === 0, f = o < 0, p = e % 2 !== 0;
  return { nextN: c, offset: l, isZero: d, isNeg: f, isNegF: p, offsetF: u };
}
function SA(n, e) {
  if (!Array.isArray(n))
    throw new Error("array expected");
  n.forEach((t, r) => {
    if (!(t instanceof e))
      throw new Error("invalid point at index " + r);
  });
}
function IA(n, e) {
  if (!Array.isArray(n))
    throw new Error("array of scalars expected");
  n.forEach((t, r) => {
    if (!e.isValid(t))
      throw new Error("invalid scalar at index " + r);
  });
}
const Tl = /* @__PURE__ */ new WeakMap(), mm = /* @__PURE__ */ new WeakMap();
function Pl(n) {
  return mm.get(n) || 1;
}
function Z0(n) {
  if (n !== xa)
    throw new Error("invalid wNAF");
}
function CA(n, e) {
  return {
    constTimeNegate: ro,
    hasPrecomputes(t) {
      return Pl(t) !== 1;
    },
    // non-const time multiplication ladder
    unsafeLadder(t, r, i = n.ZERO) {
      let s = t;
      for (; r > xa; )
        r & mi && (i = i.add(s)), s = s.double(), r >>= mi;
      return i;
    },
    /**
     * Creates a wNAF precomputation window. Used for caching.
     * Default window size is set by `utils.precompute()` and is equal to 8.
     * Number of precomputed points depends on the curve size:
     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
     * - 𝑊 is the window size
     * - 𝑛 is the bitlength of the curve order.
     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
     * @param elm Point instance
     * @param W window size
     * @returns precomputed point tables flattened to a single array
     */
    precomputeWindow(t, r) {
      const { windows: i, windowSize: s } = vl(r, e), a = [];
      let o = t, c = o;
      for (let u = 0; u < i; u++) {
        c = o, a.push(c);
        for (let l = 1; l < s; l++)
          c = c.add(o), a.push(c);
        o = c.double();
      }
      return a;
    },
    /**
     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
     * @param W window size
     * @param precomputes precomputed tables
     * @param n scalar (we don't check here, but should be less than curve order)
     * @returns real and fake (for const-time) points
     */
    wNAF(t, r, i) {
      let s = n.ZERO, a = n.BASE;
      const o = vl(t, e);
      for (let c = 0; c < o.windows; c++) {
        const { nextN: u, offset: l, isZero: d, isNeg: f, isNegF: p, offsetF: y } = Y0(i, c, o);
        i = u, d ? a = a.add(ro(p, r[y])) : s = s.add(ro(f, r[l]));
      }
      return Z0(i), { p: s, f: a };
    },
    /**
     * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.
     * @param W window size
     * @param precomputes precomputed tables
     * @param n scalar (we don't check here, but should be less than curve order)
     * @param acc accumulator point to add result of multiplication
     * @returns point
     */
    wNAFUnsafe(t, r, i, s = n.ZERO) {
      const a = vl(t, e);
      for (let o = 0; o < a.windows && i !== xa; o++) {
        const { nextN: c, offset: u, isZero: l, isNeg: d } = Y0(i, o, a);
        if (i = c, !l) {
          const f = r[u];
          s = s.add(d ? f.negate() : f);
        }
      }
      return Z0(i), s;
    },
    getPrecomputes(t, r, i) {
      let s = Tl.get(r);
      return s || (s = this.precomputeWindow(r, t), t !== 1 && (typeof i == "function" && (s = i(s)), Tl.set(r, s))), s;
    },
    wNAFCached(t, r, i) {
      const s = Pl(t);
      return this.wNAF(s, this.getPrecomputes(s, t, i), r);
    },
    wNAFCachedUnsafe(t, r, i, s) {
      const a = Pl(t);
      return a === 1 ? this.unsafeLadder(t, r, s) : this.wNAFUnsafe(a, this.getPrecomputes(a, t, i), r, s);
    },
    // We calculate precomputes for elliptic curve point multiplication
    // using windowed method. This specifies window size and
    // stores precomputed values. Usually only base point would be precomputed.
    setWindowSize(t, r) {
      ym(r, e), mm.set(t, r), Tl.delete(t);
    }
  };
}
function OA(n, e, t, r) {
  let i = e, s = n.ZERO, a = n.ZERO;
  for (; t > xa || r > xa; )
    t & mi && (s = s.add(i)), r & mi && (a = a.add(i)), i = i.double(), t >>= mi, r >>= mi;
  return { p1: s, p2: a };
}
function NA(n, e, t, r) {
  SA(t, n), IA(r, e);
  const i = t.length, s = r.length;
  if (i !== s)
    throw new Error("arrays of points and scalars must have equal length");
  const a = n.ZERO, o = C6(BigInt(i));
  let c = 1;
  o > 12 ? c = o - 3 : o > 4 ? c = o - 2 : o > 0 && (c = 2);
  const u = Gu(c), l = new Array(Number(u) + 1).fill(a), d = Math.floor((e.BITS - 1) / c) * c;
  let f = a;
  for (let p = d; p >= 0; p -= c) {
    l.fill(a);
    for (let h = 0; h < s; h++) {
      const b = r[h], x = Number(b >> BigInt(p) & u);
      l[x] = l[x].add(t[h]);
    }
    let y = a;
    for (let h = l.length - 1, b = a; h > 0; h--)
      b = b.add(l[h]), y = y.add(b);
    if (f = f.add(y), p !== 0)
      for (let h = 0; h < c; h++)
        f = f.double();
  }
  return f;
}
function X0(n, e) {
  if (e) {
    if (e.ORDER !== n)
      throw new Error("Field.ORDER must match order: Fp == p, Fn == n");
    return AA(e), e;
  } else
    return Hu(n);
}
function RA(n, e, t = {}) {
  if (!e || typeof e != "object")
    throw new Error(`expected valid ${n} CURVE object`);
  for (const o of ["p", "n", "h"]) {
    const c = e[o];
    if (!(typeof c == "bigint" && c > xa))
      throw new Error(`CURVE.${o} must be positive bigint`);
  }
  const r = X0(e.p, t.Fp), i = X0(e.n, t.Fn), a = ["Gx", "Gy", "a", "b"];
  for (const o of a)
    if (!r.isValid(e[o]))
      throw new Error(`CURVE.${o} must be valid field element of CURVE.Fp`);
  return { Fp: r, Fn: i };
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function ep(n) {
  n.lowS !== void 0 && ru("lowS", n.lowS), n.prehash !== void 0 && ru("prehash", n.prehash);
}
class BA extends Error {
  constructor(e = "") {
    super(e);
  }
}
const Vn = {
  // asn.1 DER encoding utils
  Err: BA,
  // Basic building block is TLV (Tag-Length-Value)
  _tlv: {
    encode: (n, e) => {
      const { Err: t } = Vn;
      if (n < 0 || n > 256)
        throw new t("tlv.encode: wrong tag");
      if (e.length & 1)
        throw new t("tlv.encode: unpadded data");
      const r = e.length / 2, i = fc(r);
      if (i.length / 2 & 128)
        throw new t("tlv.encode: long form length too big");
      const s = r > 127 ? fc(i.length / 2 | 128) : "";
      return fc(n) + s + i + e;
    },
    // v - value, l - left bytes (unparsed)
    decode(n, e) {
      const { Err: t } = Vn;
      let r = 0;
      if (n < 0 || n > 256)
        throw new t("tlv.encode: wrong tag");
      if (e.length < 2 || e[r++] !== n)
        throw new t("tlv.decode: wrong tlv");
      const i = e[r++], s = !!(i & 128);
      let a = 0;
      if (!s)
        a = i;
      else {
        const c = i & 127;
        if (!c)
          throw new t("tlv.decode(long): indefinite length not supported");
        if (c > 4)
          throw new t("tlv.decode(long): byte length is too big");
        const u = e.subarray(r, r + c);
        if (u.length !== c)
          throw new t("tlv.decode: length bytes not complete");
        if (u[0] === 0)
          throw new t("tlv.decode(long): zero leftmost byte");
        for (const l of u)
          a = a << 8 | l;
        if (r += c, a < 128)
          throw new t("tlv.decode(long): not minimal encoding");
      }
      const o = e.subarray(r, r + a);
      if (o.length !== a)
        throw new t("tlv.decode: wrong value length");
      return { v: o, l: e.subarray(r + a) };
    }
  },
  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,
  // since we always use positive integers here. It must always be empty:
  // - add zero byte if exists
  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)
  _int: {
    encode(n) {
      const { Err: e } = Vn;
      if (n < io)
        throw new e("integer: negative integers are not allowed");
      let t = fc(n);
      if (Number.parseInt(t[0], 16) & 8 && (t = "00" + t), t.length & 1)
        throw new e("unexpected DER parsing assertion: unpadded hex");
      return t;
    },
    decode(n) {
      const { Err: e } = Vn;
      if (n[0] & 128)
        throw new e("invalid signature integer: negative");
      if (n[0] === 0 && !(n[1] & 128))
        throw new e("invalid signature integer: unnecessary leading zero");
      return Fu(n);
    }
  },
  toSig(n) {
    const { Err: e, _int: t, _tlv: r } = Vn, i = Lt("signature", n), { v: s, l: a } = r.decode(48, i);
    if (a.length)
      throw new e("invalid signature: left bytes after parsing");
    const { v: o, l: c } = r.decode(2, s), { v: u, l } = r.decode(2, c);
    if (l.length)
      throw new e("invalid signature: left bytes after parsing");
    return { r: t.decode(o), s: t.decode(u) };
  },
  hexFromSig(n) {
    const { _tlv: e, _int: t } = Vn, r = e.encode(2, t.encode(n.r)), i = e.encode(2, t.encode(n.s)), s = r + i;
    return e.encode(48, s);
  }
}, io = BigInt(0), so = BigInt(1), _A = BigInt(2), yc = BigInt(3), kA = BigInt(4);
function LA(n, e, t) {
  function r(i) {
    const s = n.sqr(i), a = n.mul(s, i);
    return n.add(n.add(a, n.mul(i, e)), t);
  }
  return r;
}
function bm(n, e, t) {
  const { BYTES: r } = n;
  function i(s) {
    let a;
    if (typeof s == "bigint")
      a = s;
    else {
      let o = Lt("private key", s);
      if (e) {
        if (!e.includes(o.length * 2))
          throw new Error("invalid private key");
        const c = new Uint8Array(r);
        c.set(o, c.length - o.length), o = c;
      }
      try {
        a = n.fromBytes(o);
      } catch {
        throw new Error(`invalid private key: expected ui8a of size ${r}, got ${typeof s}`);
      }
    }
    if (t && (a = n.create(a)), !n.isValidNot0(a))
      throw new Error("invalid private key: out of range [1..N-1]");
    return a;
  }
  return i;
}
function MA(n, e = {}) {
  const { Fp: t, Fn: r } = RA("weierstrass", n, e), { h: i, n: s } = n;
  Nf(e, {}, {
    allowInfinityPoint: "boolean",
    clearCofactor: "function",
    isTorsionFree: "function",
    fromBytes: "function",
    toBytes: "function",
    endo: "object",
    wrapPrivateKey: "boolean"
  });
  const { endo: a } = e;
  if (a && (!t.is0(n.a) || typeof a.beta != "bigint" || typeof a.splitScalar != "function"))
    throw new Error('invalid endo: expected "beta": bigint and "splitScalar": function');
  function o() {
    if (!t.isOdd)
      throw new Error("compression is not supported: Field does not have .isOdd()");
  }
  function c(C, v, L) {
    const { x: O, y: R } = v.toAffine(), F = t.toBytes(O);
    if (ru("isCompressed", L), L) {
      o();
      const M = !t.isOdd(R);
      return hi(xm(M), F);
    } else
      return hi(Uint8Array.of(4), F, t.toBytes(R));
  }
  function u(C) {
    an(C);
    const v = t.BYTES, L = v + 1, O = 2 * v + 1, R = C.length, F = C[0], M = C.subarray(1);
    if (R === L && (F === 2 || F === 3)) {
      const P = t.fromBytes(M);
      if (!t.isValid(P))
        throw new Error("bad point: is not on curve, wrong x");
      const S = f(P);
      let k;
      try {
        k = t.sqrt(S);
      } catch (H) {
        const W = H instanceof Error ? ": " + H.message : "";
        throw new Error("bad point: is not on curve, sqrt error" + W);
      }
      o();
      const D = t.isOdd(k);
      return (F & 1) === 1 !== D && (k = t.neg(k)), { x: P, y: k };
    } else if (R === O && F === 4) {
      const P = t.fromBytes(M.subarray(v * 0, v * 1)), S = t.fromBytes(M.subarray(v * 1, v * 2));
      if (!p(P, S))
        throw new Error("bad point: is not on curve");
      return { x: P, y: S };
    } else
      throw new Error(`bad point: got length ${R}, expected compressed=${L} or uncompressed=${O}`);
  }
  const l = e.toBytes || c, d = e.fromBytes || u, f = LA(t, n.a, n.b);
  function p(C, v) {
    const L = t.sqr(v), O = f(C);
    return t.eql(L, O);
  }
  if (!p(n.Gx, n.Gy))
    throw new Error("bad curve params: generator point");
  const y = t.mul(t.pow(n.a, yc), kA), h = t.mul(t.sqr(n.b), BigInt(27));
  if (t.is0(t.add(y, h)))
    throw new Error("bad curve params: a or b");
  function b(C, v, L = !1) {
    if (!t.isValid(v) || L && t.is0(v))
      throw new Error(`bad point coordinate ${C}`);
    return v;
  }
  function x(C) {
    if (!(C instanceof I))
      throw new Error("ProjectivePoint expected");
  }
  const w = z0((C, v) => {
    const { px: L, py: O, pz: R } = C;
    if (t.eql(R, t.ONE))
      return { x: L, y: O };
    const F = C.is0();
    v == null && (v = F ? t.ONE : t.inv(R));
    const M = t.mul(L, v), P = t.mul(O, v), S = t.mul(R, v);
    if (F)
      return { x: t.ZERO, y: t.ZERO };
    if (!t.eql(S, t.ONE))
      throw new Error("invZ was invalid");
    return { x: M, y: P };
  }), E = z0((C) => {
    if (C.is0()) {
      if (e.allowInfinityPoint && !t.is0(C.py))
        return;
      throw new Error("bad point: ZERO");
    }
    const { x: v, y: L } = C.toAffine();
    if (!t.isValid(v) || !t.isValid(L))
      throw new Error("bad point: x or y not field elements");
    if (!p(v, L))
      throw new Error("bad point: equation left != right");
    if (!C.isTorsionFree())
      throw new Error("bad point: not in prime-order subgroup");
    return !0;
  });
  function N(C, v, L, O, R) {
    return L = new I(t.mul(L.px, C), L.py, L.pz), v = ro(O, v), L = ro(R, L), v.add(L);
  }
  class I {
    /** Does NOT validate if the point is valid. Use `.assertValidity()`. */
    constructor(v, L, O) {
      this.px = b("x", v), this.py = b("y", L, !0), this.pz = b("z", O), Object.freeze(this);
    }
    /** Does NOT validate if the point is valid. Use `.assertValidity()`. */
    static fromAffine(v) {
      const { x: L, y: O } = v || {};
      if (!v || !t.isValid(L) || !t.isValid(O))
        throw new Error("invalid affine point");
      if (v instanceof I)
        throw new Error("projective point not allowed");
      return t.is0(L) && t.is0(O) ? I.ZERO : new I(L, O, t.ONE);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    static normalizeZ(v) {
      return PA(I, "pz", v);
    }
    static fromBytes(v) {
      return an(v), I.fromHex(v);
    }
    /** Converts hash string or Uint8Array to Point. */
    static fromHex(v) {
      const L = I.fromAffine(d(Lt("pointHex", v)));
      return L.assertValidity(), L;
    }
    /** Multiplies generator point by privateKey. */
    static fromPrivateKey(v) {
      const L = bm(r, e.allowedPrivateKeyLengths, e.wrapPrivateKey);
      return I.BASE.multiply(L(v));
    }
    /** Multiscalar Multiplication */
    static msm(v, L) {
      return NA(I, r, v, L);
    }
    /**
     *
     * @param windowSize
     * @param isLazy true will defer table computation until the first multiplication
     * @returns
     */
    precompute(v = 8, L = !0) {
      return U.setWindowSize(this, v), L || this.multiply(yc), this;
    }
    /** "Private method", don't use it directly */
    _setWindowSize(v) {
      this.precompute(v);
    }
    // TODO: return `this`
    /** A point on curve is valid if it conforms to equation. */
    assertValidity() {
      E(this);
    }
    hasEvenY() {
      const { y: v } = this.toAffine();
      if (!t.isOdd)
        throw new Error("Field doesn't support isOdd");
      return !t.isOdd(v);
    }
    /** Compare one point to another. */
    equals(v) {
      x(v);
      const { px: L, py: O, pz: R } = this, { px: F, py: M, pz: P } = v, S = t.eql(t.mul(L, P), t.mul(F, R)), k = t.eql(t.mul(O, P), t.mul(M, R));
      return S && k;
    }
    /** Flips point to one corresponding to (x, -y) in Affine coordinates. */
    negate() {
      return new I(this.px, t.neg(this.py), this.pz);
    }
    // Renes-Costello-Batina exception-free doubling formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 3
    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
    double() {
      const { a: v, b: L } = n, O = t.mul(L, yc), { px: R, py: F, pz: M } = this;
      let P = t.ZERO, S = t.ZERO, k = t.ZERO, D = t.mul(R, R), $ = t.mul(F, F), H = t.mul(M, M), W = t.mul(R, F);
      return W = t.add(W, W), k = t.mul(R, M), k = t.add(k, k), P = t.mul(v, k), S = t.mul(O, H), S = t.add(P, S), P = t.sub($, S), S = t.add($, S), S = t.mul(P, S), P = t.mul(W, P), k = t.mul(O, k), H = t.mul(v, H), W = t.sub(D, H), W = t.mul(v, W), W = t.add(W, k), k = t.add(D, D), D = t.add(k, D), D = t.add(D, H), D = t.mul(D, W), S = t.add(S, D), H = t.mul(F, M), H = t.add(H, H), D = t.mul(H, W), P = t.sub(P, D), k = t.mul(H, $), k = t.add(k, k), k = t.add(k, k), new I(P, S, k);
    }
    // Renes-Costello-Batina exception-free addition formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 1
    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
    add(v) {
      x(v);
      const { px: L, py: O, pz: R } = this, { px: F, py: M, pz: P } = v;
      let S = t.ZERO, k = t.ZERO, D = t.ZERO;
      const $ = n.a, H = t.mul(n.b, yc);
      let W = t.mul(L, F), X = t.mul(O, M), ie = t.mul(R, P), se = t.add(L, O), Q = t.add(F, M);
      se = t.mul(se, Q), Q = t.add(W, X), se = t.sub(se, Q), Q = t.add(L, R);
      let Z = t.add(F, P);
      return Q = t.mul(Q, Z), Z = t.add(W, ie), Q = t.sub(Q, Z), Z = t.add(O, R), S = t.add(M, P), Z = t.mul(Z, S), S = t.add(X, ie), Z = t.sub(Z, S), D = t.mul($, Q), S = t.mul(H, ie), D = t.add(S, D), S = t.sub(X, D), D = t.add(X, D), k = t.mul(S, D), X = t.add(W, W), X = t.add(X, W), ie = t.mul($, ie), Q = t.mul(H, Q), X = t.add(X, ie), ie = t.sub(W, ie), ie = t.mul($, ie), Q = t.add(Q, ie), W = t.mul(X, Q), k = t.add(k, W), W = t.mul(Z, Q), S = t.mul(se, S), S = t.sub(S, W), W = t.mul(se, X), D = t.mul(Z, D), D = t.add(D, W), new I(S, k, D);
    }
    subtract(v) {
      return this.add(v.negate());
    }
    is0() {
      return this.equals(I.ZERO);
    }
    /**
     * Constant time multiplication.
     * Uses wNAF method. Windowed method may be 10% faster,
     * but takes 2x longer to generate and consumes 2x memory.
     * Uses precomputes when available.
     * Uses endomorphism for Koblitz curves.
     * @param scalar by which the point would be multiplied
     * @returns New point
     */
    multiply(v) {
      const { endo: L } = e;
      if (!r.isValidNot0(v))
        throw new Error("invalid scalar: out of range");
      let O, R;
      const F = (M) => U.wNAFCached(this, M, I.normalizeZ);
      if (L) {
        const { k1neg: M, k1: P, k2neg: S, k2: k } = L.splitScalar(v), { p: D, f: $ } = F(P), { p: H, f: W } = F(k);
        R = $.add(W), O = N(L.beta, D, H, M, S);
      } else {
        const { p: M, f: P } = F(v);
        O = M, R = P;
      }
      return I.normalizeZ([O, R])[0];
    }
    /**
     * Non-constant-time multiplication. Uses double-and-add algorithm.
     * It's faster, but should only be used when you don't care about
     * an exposed private key e.g. sig verification, which works over *public* keys.
     */
    multiplyUnsafe(v) {
      const { endo: L } = e, O = this;
      if (!r.isValid(v))
        throw new Error("invalid scalar: out of range");
      if (v === io || O.is0())
        return I.ZERO;
      if (v === so)
        return O;
      if (U.hasPrecomputes(this))
        return this.multiply(v);
      if (L) {
        const { k1neg: R, k1: F, k2neg: M, k2: P } = L.splitScalar(v), { p1: S, p2: k } = OA(I, O, F, P);
        return N(L.beta, S, k, R, M);
      } else
        return U.wNAFCachedUnsafe(O, v);
    }
    multiplyAndAddUnsafe(v, L, O) {
      const R = this.multiplyUnsafe(L).add(v.multiplyUnsafe(O));
      return R.is0() ? void 0 : R;
    }
    /**
     * Converts Projective point to affine (x, y) coordinates.
     * @param invertedZ Z^-1 (inverted zero) - optional, precomputation is useful for invertBatch
     */
    toAffine(v) {
      return w(this, v);
    }
    /**
     * Checks whether Point is free of torsion elements (is in prime subgroup).
     * Always torsion-free for cofactor=1 curves.
     */
    isTorsionFree() {
      const { isTorsionFree: v } = e;
      return i === so ? !0 : v ? v(I, this) : U.wNAFCachedUnsafe(this, s).is0();
    }
    clearCofactor() {
      const { clearCofactor: v } = e;
      return i === so ? this : v ? v(I, this) : this.multiplyUnsafe(i);
    }
    toBytes(v = !0) {
      return ru("isCompressed", v), this.assertValidity(), l(I, this, v);
    }
    /** @deprecated use `toBytes` */
    toRawBytes(v = !0) {
      return this.toBytes(v);
    }
    toHex(v = !0) {
      return ho(this.toBytes(v));
    }
    toString() {
      return `<Point ${this.is0() ? "ZERO" : this.toHex()}>`;
    }
  }
  I.BASE = new I(n.Gx, n.Gy, t.ONE), I.ZERO = new I(t.ZERO, t.ONE, t.ZERO), I.Fp = t, I.Fn = r;
  const B = r.BITS, U = CA(I, e.endo ? Math.ceil(B / 2) : B);
  return I;
}
function xm(n) {
  return Uint8Array.of(n ? 2 : 3);
}
function DA(n, e, t = {}) {
  Nf(e, { hash: "function" }, {
    hmac: "function",
    lowS: "boolean",
    randomBytes: "function",
    bits2int: "function",
    bits2int_modN: "function"
  });
  const r = e.randomBytes || O1, i = e.hmac || ((O, ...R) => om(e.hash, O, hi(...R))), { Fp: s, Fn: a } = n, { ORDER: o, BITS: c } = a;
  function u(O) {
    const R = o >> so;
    return O > R;
  }
  function l(O) {
    return u(O) ? a.neg(O) : O;
  }
  function d(O, R) {
    if (!a.isValidNot0(R))
      throw new Error(`invalid signature ${O}: out of range 1..CURVE.n`);
  }
  class f {
    constructor(R, F, M) {
      d("r", R), d("s", F), this.r = R, this.s = F, M != null && (this.recovery = M), Object.freeze(this);
    }
    // pair (bytes of r, bytes of s)
    static fromCompact(R) {
      const F = a.BYTES, M = Lt("compactSignature", R, F * 2);
      return new f(a.fromBytes(M.subarray(0, F)), a.fromBytes(M.subarray(F, F * 2)));
    }
    // DER encoded ECDSA signature
    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
    static fromDER(R) {
      const { r: F, s: M } = Vn.toSig(Lt("DER", R));
      return new f(F, M);
    }
    /**
     * @todo remove
     * @deprecated
     */
    assertValidity() {
    }
    addRecoveryBit(R) {
      return new f(this.r, this.s, R);
    }
    // ProjPointType<bigint>
    recoverPublicKey(R) {
      const F = s.ORDER, { r: M, s: P, recovery: S } = this;
      if (S == null || ![0, 1, 2, 3].includes(S))
        throw new Error("recovery id invalid");
      if (o * _A < F && S > 1)
        throw new Error("recovery id is ambiguous for h>1 curve");
      const D = S === 2 || S === 3 ? M + o : M;
      if (!s.isValid(D))
        throw new Error("recovery id 2 or 3 invalid");
      const $ = s.toBytes(D), H = n.fromHex(hi(xm((S & 1) === 0), $)), W = a.inv(D), X = E(Lt("msgHash", R)), ie = a.create(-X * W), se = a.create(P * W), Q = n.BASE.multiplyUnsafe(ie).add(H.multiplyUnsafe(se));
      if (Q.is0())
        throw new Error("point at infinify");
      return Q.assertValidity(), Q;
    }
    // Signatures should be low-s, to prevent malleability.
    hasHighS() {
      return u(this.s);
    }
    normalizeS() {
      return this.hasHighS() ? new f(this.r, a.neg(this.s), this.recovery) : this;
    }
    toBytes(R) {
      if (R === "compact")
        return hi(a.toBytes(this.r), a.toBytes(this.s));
      if (R === "der")
        return df(Vn.hexFromSig(this));
      throw new Error("invalid format");
    }
    // DER-encoded
    toDERRawBytes() {
      return this.toBytes("der");
    }
    toDERHex() {
      return ho(this.toBytes("der"));
    }
    // padded bytes of r, then padded bytes of s
    toCompactRawBytes() {
      return this.toBytes("compact");
    }
    toCompactHex() {
      return ho(this.toBytes("compact"));
    }
  }
  const p = bm(a, t.allowedPrivateKeyLengths, t.wrapPrivateKey), y = {
    isValidPrivateKey(O) {
      try {
        return p(O), !0;
      } catch {
        return !1;
      }
    },
    normPrivateKeyToScalar: p,
    /**
     * Produces cryptographically secure private key from random of size
     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
     */
    randomPrivateKey: () => {
      const O = o;
      return TA(r(hm(O)), O);
    },
    precompute(O = 8, R = n.BASE) {
      return R.precompute(O, !1);
    }
  };
  function h(O, R = !0) {
    return n.fromPrivateKey(O).toBytes(R);
  }
  function b(O) {
    if (typeof O == "bigint")
      return !1;
    if (O instanceof n)
      return !0;
    const F = Lt("key", O).length, M = s.BYTES, P = M + 1, S = 2 * M + 1;
    if (!(t.allowedPrivateKeyLengths || a.BYTES === P))
      return F === P || F === S;
  }
  function x(O, R, F = !0) {
    if (b(O) === !0)
      throw new Error("first arg must be private key");
    if (b(R) === !1)
      throw new Error("second arg must be public key");
    return n.fromHex(R).multiply(p(O)).toBytes(F);
  }
  const w = e.bits2int || function(O) {
    if (O.length > 8192)
      throw new Error("input is too large");
    const R = Fu(O), F = O.length * 8 - c;
    return F > 0 ? R >> BigInt(F) : R;
  }, E = e.bits2int_modN || function(O) {
    return a.create(w(O));
  }, N = Gu(c);
  function I(O) {
    return I6("num < 2^" + c, O, io, N), a.toBytes(O);
  }
  function B(O, R, F = U) {
    if (["recovered", "canonical"].some((se) => se in F))
      throw new Error("sign() legacy options not supported");
    const { hash: M } = e;
    let { lowS: P, prehash: S, extraEntropy: k } = F;
    P == null && (P = !0), O = Lt("msgHash", O), ep(F), S && (O = Lt("prehashed msgHash", M(O)));
    const D = E(O), $ = p(R), H = [I($), I(D)];
    if (k != null && k !== !1) {
      const se = k === !0 ? r(s.BYTES) : k;
      H.push(Lt("extraEntropy", se));
    }
    const W = hi(...H), X = D;
    function ie(se) {
      const Q = w(se);
      if (!a.isValidNot0(Q))
        return;
      const Z = a.inv(Q), Ce = n.BASE.multiply(Q).toAffine(), Je = a.create(Ce.x);
      if (Je === io)
        return;
      const Oe = a.create(Z * a.create(X + Je * $));
      if (Oe === io)
        return;
      let Ye = (Ce.x === Je ? 0 : 2) | Number(Ce.y & so), rt = Oe;
      return P && u(Oe) && (rt = l(Oe), Ye ^= 1), new f(Je, rt, Ye);
    }
    return { seed: W, k2sig: ie };
  }
  const U = { lowS: e.lowS, prehash: !1 }, C = { lowS: e.lowS, prehash: !1 };
  function v(O, R, F = U) {
    const { seed: M, k2sig: P } = B(O, R, F);
    return O6(e.hash.outputLen, a.BYTES, i)(M, P);
  }
  n.BASE.precompute(8);
  function L(O, R, F, M = C) {
    const P = O;
    R = Lt("msgHash", R), F = Lt("publicKey", F), ep(M);
    const { lowS: S, prehash: k, format: D } = M;
    if ("strict" in M)
      throw new Error("options.strict was renamed to lowS");
    if (D !== void 0 && !["compact", "der", "js"].includes(D))
      throw new Error('format must be "compact", "der" or "js"');
    const $ = typeof P == "string" || lf(P), H = !$ && !D && typeof P == "object" && P !== null && typeof P.r == "bigint" && typeof P.s == "bigint";
    if (!$ && !H)
      throw new Error("invalid signature, expected Uint8Array, hex string or Signature instance");
    let W, X;
    try {
      if (H)
        if (D === void 0 || D === "js")
          W = new f(P.r, P.s);
        else
          throw new Error("invalid format");
      if ($) {
        try {
          D !== "compact" && (W = f.fromDER(P));
        } catch (rt) {
          if (!(rt instanceof Vn.Err))
            throw rt;
        }
        !W && D !== "der" && (W = f.fromCompact(P));
      }
      X = n.fromHex(F);
    } catch {
      return !1;
    }
    if (!W || S && W.hasHighS())
      return !1;
    k && (R = e.hash(R));
    const { r: ie, s: se } = W, Q = E(R), Z = a.inv(se), Ce = a.create(Q * Z), Je = a.create(ie * Z), Oe = n.BASE.multiplyUnsafe(Ce).add(X.multiplyUnsafe(Je));
    return Oe.is0() ? !1 : a.create(Oe.x) === ie;
  }
  return Object.freeze({
    getPublicKey: h,
    getSharedSecret: x,
    sign: v,
    verify: L,
    utils: y,
    Point: n,
    Signature: f
  });
}
function UA(n) {
  const e = {
    a: n.a,
    b: n.b,
    p: n.Fp.ORDER,
    n: n.n,
    h: n.h,
    Gx: n.Gx,
    Gy: n.Gy
  }, t = n.Fp, r = Hu(e.n, n.nBitLength), i = {
    Fp: t,
    Fn: r,
    allowedPrivateKeyLengths: n.allowedPrivateKeyLengths,
    allowInfinityPoint: n.allowInfinityPoint,
    endo: n.endo,
    wrapPrivateKey: n.wrapPrivateKey,
    isTorsionFree: n.isTorsionFree,
    clearCofactor: n.clearCofactor,
    fromBytes: n.fromBytes,
    toBytes: n.toBytes
  };
  return { CURVE: e, curveOpts: i };
}
function FA(n) {
  const { CURVE: e, curveOpts: t } = UA(n), r = {
    hash: n.hash,
    hmac: n.hmac,
    randomBytes: n.randomBytes,
    lowS: n.lowS,
    bits2int: n.bits2int,
    bits2int_modN: n.bits2int_modN
  };
  return { CURVE: e, curveOpts: t, ecdsaOpts: r };
}
function GA(n, e) {
  return Object.assign({}, e, {
    ProjectivePoint: e.Point,
    CURVE: n
  });
}
function HA(n) {
  const { CURVE: e, curveOpts: t, ecdsaOpts: r } = FA(n), i = MA(e, t), s = DA(i, r, t);
  return GA(n, s);
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function $A(n, e) {
  const t = (r) => HA({ ...n, hash: r });
  return { ...t(e), create: t };
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const iu = {
  p: BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),
  n: BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),
  h: BigInt(1),
  a: BigInt(0),
  b: BigInt(7),
  Gx: BigInt("0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"),
  Gy: BigInt("0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8")
};
BigInt(0);
const VA = BigInt(1), pd = BigInt(2), tp = (n, e) => (n + e / pd) / e;
function zA(n) {
  const e = iu.p, t = BigInt(3), r = BigInt(6), i = BigInt(11), s = BigInt(22), a = BigInt(23), o = BigInt(44), c = BigInt(88), u = n * n * n % e, l = u * u * n % e, d = Tt(l, t, e) * l % e, f = Tt(d, t, e) * l % e, p = Tt(f, pd, e) * u % e, y = Tt(p, i, e) * p % e, h = Tt(y, s, e) * y % e, b = Tt(h, o, e) * h % e, x = Tt(b, c, e) * b % e, w = Tt(x, o, e) * h % e, E = Tt(w, t, e) * l % e, N = Tt(E, a, e) * y % e, I = Tt(N, r, e) * u % e, B = Tt(I, pd, e);
  if (!hd.eql(hd.sqr(B), n))
    throw new Error("Cannot find square root");
  return B;
}
const hd = Hu(iu.p, void 0, void 0, { sqrt: zA }), gm = $A({
  ...iu,
  Fp: hd,
  lowS: !0,
  // Allow only low-S signatures by default in sign() and verify()
  endo: {
    // Endomorphism, see above
    beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
    splitScalar: (n) => {
      const e = iu.n, t = BigInt("0x3086d221a7d46bcde86c90e49284eb15"), r = -VA * BigInt("0xe4437ed6010e88286f547fa90abfe4c3"), i = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"), s = t, a = BigInt("0x100000000000000000000000000000000"), o = tp(s * n, e), c = tp(-r * n, e);
      let u = Ht(n - o * t - c * i, e), l = Ht(-o * r - c * s, e);
      const d = u > a, f = l > a;
      if (d && (u = e - u), f && (l = e - l), u > a || l > a)
        throw new Error("splitScalar: Endomorphism failed, k=" + n);
      return { k1neg: d, k1: u, k2neg: f, k2: l };
    }
  }
}, Vy), jA = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  secp256k1: gm
}, Symbol.toStringTag, { value: "Module" }));
function Zo(n) {
  const { r: e, s: t } = gm.Signature.fromCompact(n.slice(2, 130)), r = +`0x${n.slice(130)}`, [i, s] = (() => {
    if (r === 0 || r === 1)
      return [void 0, r];
    if (r === 27)
      return [BigInt(r), 0];
    if (r === 28)
      return [BigInt(r), 1];
    throw new Error("Invalid yParityOrV value");
  })();
  return typeof i < "u" ? {
    r: re(e, { size: 32 }),
    s: re(t, { size: 32 }),
    v: i,
    yParity: s
  } : {
    r: re(e, { size: 32 }),
    s: re(t, { size: 32 }),
    yParity: s
  };
}
const vt = [
  {
    type: "function",
    name: "_CANCEL_ORDER_TYPEHASH",
    inputs: [],
    outputs: [{ name: "", type: "bytes32", internalType: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "_PERMIT_TYPEHASH",
    inputs: [],
    outputs: [{ name: "", type: "bytes32", internalType: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "__callback",
    inputs: [
      { name: "_orderId", type: "bytes32", internalType: "bytes32" },
      { name: "_price", type: "uint256", internalType: "uint256" },
      {
        name: "_unadjustedMarketPrice",
        type: "uint256",
        internalType: "uint256"
      },
      { name: "_spread", type: "uint256", internalType: "uint256" },
      {
        name: "_liquidationTimestamp",
        type: "uint256",
        internalType: "uint256"
      },
      { name: "_timeStamp", type: "uint256", internalType: "uint256" },
      {
        name: "_gasForNextCallback",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "createdPosition",
        type: "tuple",
        internalType: "struct MorpherTradeEngine.position",
        components: [
          {
            name: "lastUpdated",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "longShares",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "shortShares",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "meanEntryPrice",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "meanEntrySpread",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "meanEntryLeverage",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "liquidationPrice",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "positionHash",
            type: "bytes32",
            internalType: "bytes32"
          }
        ]
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "adminLiquidationOrder",
    inputs: [
      { name: "_address", type: "address", internalType: "address" },
      { name: "_marketId", type: "bytes32", internalType: "bytes32" }
    ],
    outputs: [
      { name: "_orderId", type: "bytes32", internalType: "bytes32" }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "callBackAddress",
    inputs: [{ name: "", type: "address", internalType: "address" }],
    outputs: [{ name: "", type: "bool", internalType: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "callBackCollectionAddress",
    inputs: [],
    outputs: [
      { name: "", type: "address", internalType: "address payable" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "cancelOrder",
    inputs: [
      { name: "_orderId", type: "bytes32", internalType: "bytes32" }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "checkOrderConditions",
    inputs: [
      { name: "_orderId", type: "bytes32", internalType: "bytes32" },
      { name: "_price", type: "uint256", internalType: "uint256" }
    ],
    outputs: [
      { name: "_conditionsMet", type: "bool", internalType: "bool" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "createLiquidationOrder",
    inputs: [
      { name: "_address", type: "address", internalType: "address" },
      { name: "_marketId", type: "bytes32", internalType: "bytes32" }
    ],
    outputs: [
      { name: "_orderId", type: "bytes32", internalType: "bytes32" }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    name: "createOrder",
    inputs: [
      {
        name: "createOrderParams",
        type: "tuple",
        internalType: "struct MorpherOracle.CreateOrderStruct",
        components: [
          {
            name: "_marketId",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "_closeSharesAmount",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "_openMPHTokenAmount",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "_tradeDirection",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "_orderLeverage",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "_onlyIfPriceAbove",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "_onlyIfPriceBelow",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "_goodUntil",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "_goodFrom",
            type: "uint256",
            internalType: "uint256"
          }
        ]
      }
    ],
    outputs: [
      { name: "_orderId", type: "bytes32", internalType: "bytes32" }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    name: "createOrder",
    inputs: [
      { name: "_marketId", type: "bytes32", internalType: "bytes32" },
      {
        name: "_closeSharesAmount",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "_openMPHTokenAmount",
        type: "uint256",
        internalType: "uint256"
      },
      { name: "_tradeDirection", type: "bool", internalType: "bool" },
      {
        name: "_orderLeverage",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "_onlyIfPriceAbove",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "_onlyIfPriceBelow",
        type: "uint256",
        internalType: "uint256"
      },
      { name: "_goodUntil", type: "uint256", internalType: "uint256" },
      { name: "_goodFrom", type: "uint256", internalType: "uint256" }
    ],
    outputs: [
      { name: "_orderId", type: "bytes32", internalType: "bytes32" }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    name: "createOrderFromGasToken",
    inputs: [
      {
        name: "createOrderParams",
        type: "tuple",
        internalType: "struct MorpherOracle.CreateOrderStruct",
        components: [
          {
            name: "_marketId",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "_closeSharesAmount",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "_openMPHTokenAmount",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "_tradeDirection",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "_orderLeverage",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "_onlyIfPriceAbove",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "_onlyIfPriceBelow",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "_goodUntil",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "_goodFrom",
            type: "uint256",
            internalType: "uint256"
          }
        ]
      }
    ],
    outputs: [
      { name: "orderId", type: "bytes32", internalType: "bytes32" }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    name: "createOrderFromToken",
    inputs: [
      {
        name: "createOrderParams",
        type: "tuple",
        internalType: "struct MorpherOracle.CreateOrderStruct",
        components: [
          {
            name: "_marketId",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "_closeSharesAmount",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "_openMPHTokenAmount",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "_tradeDirection",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "_orderLeverage",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "_onlyIfPriceAbove",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "_onlyIfPriceBelow",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "_goodUntil",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "_goodFrom",
            type: "uint256",
            internalType: "uint256"
          }
        ]
      },
      {
        name: "inputToken",
        type: "tuple",
        internalType: "struct MorpherOracle.TokenPermitEIP712Struct",
        components: [
          {
            name: "tokenAddress",
            type: "address",
            internalType: "address"
          },
          { name: "owner", type: "address", internalType: "address" },
          { name: "value", type: "uint256", internalType: "uint256" },
          {
            name: "minOutValue",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "deadline",
            type: "uint256",
            internalType: "uint256"
          },
          { name: "v", type: "uint8", internalType: "uint8" },
          { name: "r", type: "bytes32", internalType: "bytes32" },
          { name: "s", type: "bytes32", internalType: "bytes32" }
        ]
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "createOrderFromToken",
    inputs: [
      {
        name: "createOrderParams",
        type: "tuple",
        internalType: "struct MorpherOracle.CreateOrderStruct",
        components: [
          {
            name: "_marketId",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "_closeSharesAmount",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "_openMPHTokenAmount",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "_tradeDirection",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "_orderLeverage",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "_onlyIfPriceAbove",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "_onlyIfPriceBelow",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "_goodUntil",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "_goodFrom",
            type: "uint256",
            internalType: "uint256"
          }
        ]
      },
      {
        name: "inputToken",
        type: "tuple",
        internalType: "struct MorpherOracle.TokenPermitEIP712Struct",
        components: [
          {
            name: "tokenAddress",
            type: "address",
            internalType: "address"
          },
          { name: "owner", type: "address", internalType: "address" },
          { name: "value", type: "uint256", internalType: "uint256" },
          {
            name: "minOutValue",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "deadline",
            type: "uint256",
            internalType: "uint256"
          },
          { name: "v", type: "uint8", internalType: "uint8" },
          { name: "r", type: "bytes32", internalType: "bytes32" },
          { name: "s", type: "bytes32", internalType: "bytes32" }
        ]
      },
      {
        name: "_addressPositionOwner",
        type: "address",
        internalType: "address"
      },
      { name: "deadline", type: "uint256", internalType: "uint256" },
      { name: "v", type: "uint8", internalType: "uint8" },
      { name: "r", type: "bytes32", internalType: "bytes32" },
      { name: "s", type: "bytes32", internalType: "bytes32" }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "createOrderPermittedBySignature",
    inputs: [
      {
        name: "createOrderParams",
        type: "tuple",
        internalType: "struct MorpherOracle.CreateOrderStruct",
        components: [
          {
            name: "_marketId",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "_closeSharesAmount",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "_openMPHTokenAmount",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "_tradeDirection",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "_orderLeverage",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "_onlyIfPriceAbove",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "_onlyIfPriceBelow",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "_goodUntil",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "_goodFrom",
            type: "uint256",
            internalType: "uint256"
          }
        ]
      },
      {
        name: "_addressPositionOwner",
        type: "address",
        internalType: "address"
      },
      { name: "deadline", type: "uint256", internalType: "uint256" },
      { name: "v", type: "uint8", internalType: "uint8" },
      { name: "r", type: "bytes32", internalType: "bytes32" },
      { name: "s", type: "bytes32", internalType: "bytes32" }
    ],
    outputs: [
      { name: "orderId", type: "bytes32", internalType: "bytes32" }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "initiateCancelOrder",
    inputs: [
      { name: "_orderId", type: "bytes32", internalType: "bytes32" }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "initiateCancelOrderPermitted",
    inputs: [
      { name: "_orderId", type: "bytes32", internalType: "bytes32" },
      { name: "_owner", type: "address", internalType: "address" },
      { name: "deadline", type: "uint256", internalType: "uint256" },
      { name: "v", type: "uint8", internalType: "uint8" },
      { name: "r", type: "bytes32", internalType: "bytes32" },
      { name: "s", type: "bytes32", internalType: "bytes32" }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "nonces",
    inputs: [
      { name: "owner", type: "address", internalType: "address" }
    ],
    outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "orderCancellationRequested",
    inputs: [{ name: "", type: "bytes32", internalType: "bytes32" }],
    outputs: [{ name: "", type: "bool", internalType: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "setCallbackCollectionAddress",
    inputs: [
      {
        name: "_address",
        type: "address",
        internalType: "address payable"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "setMorpherSwapHelperAddress",
    inputs: [
      {
        name: "_helperAddress",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "setStateAddress",
    inputs: [
      { name: "_address", type: "address", internalType: "address" }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "uniswapRouter",
    inputs: [],
    outputs: [{ name: "", type: "address", internalType: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "useWhiteList",
    inputs: [],
    outputs: [{ name: "", type: "bool", internalType: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "wMaticAddress",
    inputs: [],
    outputs: [{ name: "", type: "address", internalType: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "whiteList",
    inputs: [{ name: "", type: "address", internalType: "address" }],
    outputs: [{ name: "", type: "bool", internalType: "bool" }],
    stateMutability: "view"
  },
  {
    type: "event",
    name: "AddressBlackListed",
    inputs: [
      {
        name: "_address",
        type: "address",
        indexed: !1,
        internalType: "address"
      }
    ],
    anonymous: !1
  },
  {
    type: "event",
    name: "AddressWhiteListed",
    inputs: [
      {
        name: "_address",
        type: "address",
        indexed: !1,
        internalType: "address"
      }
    ],
    anonymous: !1
  },
  {
    type: "event",
    name: "AdminLiquidationOrderCreated",
    inputs: [
      {
        name: "_orderId",
        type: "bytes32",
        indexed: !0,
        internalType: "bytes32"
      },
      {
        name: "_address",
        type: "address",
        indexed: !0,
        internalType: "address"
      },
      {
        name: "_marketId",
        type: "bytes32",
        indexed: !0,
        internalType: "bytes32"
      },
      {
        name: "_closeSharesAmount",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      },
      {
        name: "_openMPHTokenAmount",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      },
      {
        name: "_tradeDirection",
        type: "bool",
        indexed: !1,
        internalType: "bool"
      },
      {
        name: "_orderLeverage",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      }
    ],
    anonymous: !1
  },
  {
    type: "event",
    name: "AdminOrderCancelled",
    inputs: [
      {
        name: "_orderId",
        type: "bytes32",
        indexed: !0,
        internalType: "bytes32"
      },
      {
        name: "_sender",
        type: "address",
        indexed: !0,
        internalType: "address"
      },
      {
        name: "_oracleAddress",
        type: "address",
        indexed: !0,
        internalType: "address"
      }
    ],
    anonymous: !1
  },
  {
    type: "event",
    name: "LiquidationOrderCreated",
    inputs: [
      {
        name: "_orderId",
        type: "bytes32",
        indexed: !0,
        internalType: "bytes32"
      },
      {
        name: "_sender",
        type: "address",
        indexed: !1,
        internalType: "address"
      },
      {
        name: "_address",
        type: "address",
        indexed: !0,
        internalType: "address"
      },
      {
        name: "_marketId",
        type: "bytes32",
        indexed: !0,
        internalType: "bytes32"
      }
    ],
    anonymous: !1
  },
  {
    type: "event",
    name: "OrderCancellationRequestedEvent",
    inputs: [
      {
        name: "_orderId",
        type: "bytes32",
        indexed: !0,
        internalType: "bytes32"
      },
      {
        name: "_sender",
        type: "address",
        indexed: !0,
        internalType: "address"
      }
    ],
    anonymous: !1
  },
  {
    type: "event",
    name: "OrderCancelled",
    inputs: [
      {
        name: "_orderId",
        type: "bytes32",
        indexed: !0,
        internalType: "bytes32"
      },
      {
        name: "_sender",
        type: "address",
        indexed: !0,
        internalType: "address"
      },
      {
        name: "_oracleAddress",
        type: "address",
        indexed: !0,
        internalType: "address"
      }
    ],
    anonymous: !1
  },
  {
    type: "event",
    name: "OrderCreated",
    inputs: [
      {
        name: "_orderId",
        type: "bytes32",
        indexed: !0,
        internalType: "bytes32"
      },
      {
        name: "_address",
        type: "address",
        indexed: !0,
        internalType: "address"
      },
      {
        name: "_marketId",
        type: "bytes32",
        indexed: !0,
        internalType: "bytes32"
      },
      {
        name: "_closeSharesAmount",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      },
      {
        name: "_openMPHTokenAmount",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      },
      {
        name: "_tradeDirection",
        type: "bool",
        indexed: !1,
        internalType: "bool"
      },
      {
        name: "_orderLeverage",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      },
      {
        name: "_onlyIfPriceBelow",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      },
      {
        name: "_onlyIfPriceAbove",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      },
      {
        name: "_goodFrom",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      },
      {
        name: "_goodUntil",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      }
    ],
    anonymous: !1
  },
  {
    type: "event",
    name: "OrderFailed",
    inputs: [
      {
        name: "_orderId",
        type: "bytes32",
        indexed: !0,
        internalType: "bytes32"
      },
      {
        name: "_address",
        type: "address",
        indexed: !0,
        internalType: "address"
      },
      {
        name: "_marketId",
        type: "bytes32",
        indexed: !0,
        internalType: "bytes32"
      },
      {
        name: "_closeSharesAmount",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      },
      {
        name: "_openMPHTokenAmount",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      },
      {
        name: "_tradeDirection",
        type: "bool",
        indexed: !1,
        internalType: "bool"
      },
      {
        name: "_orderLeverage",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      },
      {
        name: "_onlyIfPriceBelow",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      },
      {
        name: "_onlyIfPriceAbove",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      },
      {
        name: "_goodFrom",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      },
      {
        name: "_goodUntil",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      }
    ],
    anonymous: !1
  },
  {
    type: "event",
    name: "OrderProcessed",
    inputs: [
      {
        name: "_orderId",
        type: "bytes32",
        indexed: !0,
        internalType: "bytes32"
      },
      {
        name: "_price",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      },
      {
        name: "_unadjustedMarketPrice",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      },
      {
        name: "_spread",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      },
      {
        name: "_positionLiquidationTimestamp",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      },
      {
        name: "_timeStamp",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      },
      {
        name: "_newLongShares",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      },
      {
        name: "_newShortShares",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      },
      {
        name: "_newMeanEntry",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      },
      {
        name: "_newMeanSprad",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      },
      {
        name: "_newMeanLeverage",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      },
      {
        name: "_liquidationPrice",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      }
    ],
    anonymous: !1
  }
], WA = [
  {
    inputs: [
      {
        internalType: "bool",
        name: "_mainChain",
        type: "bool"
      },
      {
        internalType: "address",
        name: "_sideChainOperator",
        type: "address"
      },
      {
        internalType: "address",
        name: "_morpherTreasury",
        type: "address"
      }
    ],
    payable: !1,
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !0,
        internalType: "address",
        name: "administratorAddress",
        type: "address"
      }
    ],
    name: "AdministratorChange",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !1,
        internalType: "address",
        name: "_bridgeAddress",
        type: "address"
      }
    ],
    name: "BridgeChange",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !0,
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        indexed: !1,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        indexed: !1,
        internalType: "uint256",
        name: "totalToken",
        type: "uint256"
      }
    ],
    name: "Burn",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [],
    name: "FastWithdrawsDisabled",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !0,
        internalType: "address",
        name: "governanceAddress",
        type: "address"
      }
    ],
    name: "GovernanceChange",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !1,
        internalType: "uint256",
        name: "_periodLength",
        type: "uint256"
      }
    ],
    name: "InactivityPeriodUpdated",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [],
    name: "Last24HoursAmountWithdrawnReset",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !0,
        internalType: "uint256",
        name: "rewardsTime",
        type: "uint256"
      }
    ],
    name: "LastRewardTime",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [],
    name: "LastWithdrawAt",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !0,
        internalType: "uint256",
        name: "mainChainWithdrawLimit24",
        type: "uint256"
      }
    ],
    name: "MainChainWithdrawLimitUpdate",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !0,
        internalType: "bytes32",
        name: "activateMarket",
        type: "bytes32"
      }
    ],
    name: "MarketActivated",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !0,
        internalType: "bytes32",
        name: "deActivateMarket",
        type: "bytes32"
      }
    ],
    name: "MarketDeActivated",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !1,
        internalType: "uint256",
        name: "maxLeverage",
        type: "uint256"
      }
    ],
    name: "MaximumLeverageChange",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !0,
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        indexed: !1,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        indexed: !1,
        internalType: "uint256",
        name: "totalToken",
        type: "uint256"
      }
    ],
    name: "Mint",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !1,
        internalType: "uint256",
        name: "_transferNonce",
        type: "uint256"
      }
    ],
    name: "NewBridgeNonce",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !0,
        internalType: "address",
        name: "sideChainOperator",
        type: "address"
      }
    ],
    name: "NewSideChainOperator",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !1,
        internalType: "uint256",
        name: "newTotalOnOtherChain",
        type: "uint256"
      }
    ],
    name: "NewTotalInPositions",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !1,
        internalType: "uint256",
        name: "newTotalOnOtherChain",
        type: "uint256"
      }
    ],
    name: "NewTotalOnOtherChain",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !1,
        internalType: "uint256",
        name: "newTotalSupply",
        type: "uint256"
      }
    ],
    name: "NewTotalSupply",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !1,
        internalType: "uint256",
        name: "_numberOfRequests",
        type: "uint256"
      }
    ],
    name: "NumberOfRequestsLimitUpdate",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !0,
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        indexed: !1,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "OperatingRewardMinted",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !0,
        internalType: "address",
        name: "oracleContract",
        type: "address"
      }
    ],
    name: "OracleChange",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !0,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: !0,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !0,
        internalType: "address",
        name: "rewardsAddress",
        type: "address"
      },
      {
        indexed: !0,
        internalType: "uint256",
        name: "rewardsBasisPoints",
        type: "uint256"
      }
    ],
    name: "RewardsChange",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !1,
        internalType: "uint256",
        name: "_last24HoursAmountWithdrawn",
        type: "uint256"
      },
      {
        indexed: !1,
        internalType: "uint256",
        name: "_lastWithdrawLimitReductionTime",
        type: "uint256"
      }
    ],
    name: "RollingWithdrawnAmountUpdated",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !0,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: !0,
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        indexed: !1,
        internalType: "uint256",
        name: "tokens",
        type: "uint256"
      }
    ],
    name: "SetAllowance",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !0,
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        indexed: !1,
        internalType: "uint256",
        name: "balance",
        type: "uint256"
      },
      {
        indexed: !0,
        internalType: "bytes32",
        name: "balanceHash",
        type: "bytes32"
      }
    ],
    name: "SetBalance",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !0,
        internalType: "bytes32",
        name: "positionHash",
        type: "bytes32"
      },
      {
        indexed: !0,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: !0,
        internalType: "bytes32",
        name: "marketId",
        type: "bytes32"
      },
      {
        indexed: !1,
        internalType: "uint256",
        name: "timeStamp",
        type: "uint256"
      },
      {
        indexed: !1,
        internalType: "uint256",
        name: "longShares",
        type: "uint256"
      },
      {
        indexed: !1,
        internalType: "uint256",
        name: "shortShares",
        type: "uint256"
      },
      {
        indexed: !1,
        internalType: "uint256",
        name: "meanEntryPrice",
        type: "uint256"
      },
      {
        indexed: !1,
        internalType: "uint256",
        name: "meanEntrySpread",
        type: "uint256"
      },
      {
        indexed: !1,
        internalType: "uint256",
        name: "meanEntryLeverage",
        type: "uint256"
      },
      {
        indexed: !1,
        internalType: "uint256",
        name: "liquidationPrice",
        type: "uint256"
      }
    ],
    name: "SetPosition",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !0,
        internalType: "bytes32",
        name: "sideChainMerkleRoot",
        type: "bytes32"
      }
    ],
    name: "SideChainMerkleRootUpdate",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !0,
        internalType: "address",
        name: "blackList",
        type: "address"
      },
      {
        indexed: !0,
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256"
      }
    ],
    name: "StateAccessDenied",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !0,
        internalType: "address",
        name: "whiteList",
        type: "address"
      },
      {
        indexed: !0,
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256"
      }
    ],
    name: "StateAccessGranted",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !1,
        internalType: "address",
        name: "administrator",
        type: "address"
      },
      {
        indexed: !1,
        internalType: "bool",
        name: "_paused",
        type: "bool"
      }
    ],
    name: "StatePaused",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !0,
        internalType: "address",
        name: "tokenAddress",
        type: "address"
      }
    ],
    name: "TokenChange",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !1,
        internalType: "address",
        name: "_address",
        type: "address"
      },
      {
        indexed: !1,
        internalType: "uint256",
        name: "_token",
        type: "uint256"
      },
      {
        indexed: !1,
        internalType: "uint256",
        name: "_totalTokenSent",
        type: "uint256"
      },
      {
        indexed: !0,
        internalType: "bytes32",
        name: "_tokenSentToLinkedChainHash",
        type: "bytes32"
      }
    ],
    name: "TokenSentToLinkedChain",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !0,
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        indexed: !1,
        internalType: "uint256",
        name: "tokenTransferredToOtherChain",
        type: "uint256"
      },
      {
        indexed: !0,
        internalType: "bytes32",
        name: "transferHash",
        type: "bytes32"
      }
    ],
    name: "TokenTransferredToOtherChain",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !0,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: !0,
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        indexed: !1,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "Transfer",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !1,
        internalType: "address",
        name: "_address",
        type: "address"
      },
      {
        indexed: !1,
        internalType: "uint256",
        name: "_token",
        type: "uint256"
      }
    ],
    name: "TransferredTokenClaimed",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !0,
        internalType: "address",
        name: "blackList",
        type: "address"
      }
    ],
    name: "TransfersDisabled",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !0,
        internalType: "address",
        name: "whiteList",
        type: "address"
      }
    ],
    name: "TransfersEnabled",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !1,
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      }
    ],
    name: "WithdrawLimitUpdated",
    type: "event"
  },
  {
    constant: !0,
    inputs: [],
    name: "_owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "administrator",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "fastTransfersEnabled",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "inactivityPeriod",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "isOwner",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "last24HoursAmountWithdrawn",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "lastRewardTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "lastWithdrawLimitReductionTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "mainChain",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "mainChainWithdrawLimit24",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "maximumLeverage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "morpherBridge",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "morpherGovernance",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "morpherRewards",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "morpherToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "numberOfRequestsLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "oracleContract",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !1,
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "rewardBasisPoints",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "sideChainMerkleRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "sideChainMerkleRootWrittenAtTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "sideChainOperator",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "totalInPositions",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "totalOnOtherChain",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "totalToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "address",
        name: "_tokenAddress",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_tokens",
        type: "uint256"
      }
    ],
    name: "transferAnyERC20Token",
    outputs: [
      {
        internalType: "bool",
        name: "_success",
        type: "bool"
      }
    ],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "transferNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "transferOwnership",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "withdrawLimit24Hours",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !0,
    inputs: [
      {
        internalType: "bytes32",
        name: "_marketId",
        type: "bytes32"
      }
    ],
    name: "getMaxMappingIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "_maxMappingIndex",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !0,
    inputs: [
      {
        internalType: "bytes32",
        name: "_marketId",
        type: "bytes32"
      },
      {
        internalType: "address",
        name: "_address",
        type: "address"
      }
    ],
    name: "getExposureMappingIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "_mappingIndex",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !0,
    inputs: [
      {
        internalType: "bytes32",
        name: "_marketId",
        type: "bytes32"
      },
      {
        internalType: "uint256",
        name: "_mappingIndex",
        type: "uint256"
      }
    ],
    name: "getExposureMappingAddress",
    outputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "bytes32",
        name: "_marketId",
        type: "bytes32"
      },
      {
        internalType: "uint256",
        name: "_maxMappingIndex",
        type: "uint256"
      }
    ],
    name: "setMaxMappingIndex",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "bytes32",
        name: "_marketId",
        type: "bytes32"
      },
      {
        internalType: "address",
        name: "_address",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256"
      }
    ],
    name: "setExposureMapping",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "bytes32",
        name: "_marketId",
        type: "bytes32"
      },
      {
        internalType: "address",
        name: "_address",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256"
      }
    ],
    name: "setExposureMappingIndex",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "bytes32",
        name: "_marketId",
        type: "bytes32"
      },
      {
        internalType: "address",
        name: "_address",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256"
      }
    ],
    name: "setExposureMappingAddress",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_token",
        type: "uint256"
      }
    ],
    name: "setTokenClaimedOnThisChain",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !0,
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address"
      }
    ],
    name: "getTokenClaimedOnThisChain",
    outputs: [
      {
        internalType: "uint256",
        name: "_token",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_token",
        type: "uint256"
      }
    ],
    name: "setTokenSentToLinkedChain",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !0,
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address"
      }
    ],
    name: "getTokenSentToLinkedChain",
    outputs: [
      {
        internalType: "uint256",
        name: "_token",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !0,
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address"
      }
    ],
    name: "getTokenSentToLinkedChainTime",
    outputs: [
      {
        internalType: "uint256",
        name: "_timeStamp",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      }
    ],
    name: "add24HoursWithdrawn",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      }
    ],
    name: "update24HoursWithdrawLimit",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "uint256",
        name: "_limit",
        type: "uint256"
      }
    ],
    name: "set24HourWithdrawLimit",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !1,
    inputs: [],
    name: "resetLast24HoursAmountWithdrawn",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "uint256",
        name: "_periodLength",
        type: "uint256"
      }
    ],
    name: "setInactivityPeriod",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !1,
    inputs: [],
    name: "getBridgeNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "_nonce",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !1,
    inputs: [],
    name: "disableFastWithdraws",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "bytes32",
        name: "_positionHash",
        type: "bytes32"
      }
    ],
    name: "setPositionClaimedOnMainChain",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !0,
    inputs: [
      {
        internalType: "bytes32",
        name: "_positionHash",
        type: "bytes32"
      }
    ],
    name: "getPositionClaimedOnMainChain",
    outputs: [
      {
        internalType: "bool",
        name: "_alreadyClaimed",
        type: "bool"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address"
      }
    ],
    name: "setLastRequestBlock",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !0,
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address"
      }
    ],
    name: "getLastRequestBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "_lastRequestBlock",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_numberOfRequests",
        type: "uint256"
      }
    ],
    name: "setNumberOfRequests",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address"
      }
    ],
    name: "increaseNumberOfRequests",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !0,
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address"
      }
    ],
    name: "getNumberOfRequests",
    outputs: [
      {
        internalType: "uint256",
        name: "_numberOfRequests",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "uint256",
        name: "_numberOfRequestsLimit",
        type: "uint256"
      }
    ],
    name: "setNumberOfRequestsLimit",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "getNumberOfRequestsLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "_numberOfRequestsLimit",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "uint256",
        name: "_mainChainWithdrawLimit24",
        type: "uint256"
      }
    ],
    name: "setMainChainWithdrawLimit",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "getMainChainWithdrawLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "_mainChainWithdrawLimit24",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address"
      }
    ],
    name: "grantAccess",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address"
      }
    ],
    name: "denyAccess",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !0,
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address"
      }
    ],
    name: "getStateAccess",
    outputs: [
      {
        internalType: "bool",
        name: "_hasAccess",
        type: "bool"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address"
      }
    ],
    name: "enableTransfers",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address"
      }
    ],
    name: "disableTransfers",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !0,
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address"
      }
    ],
    name: "getCanTransfer",
    outputs: [
      {
        internalType: "bool",
        name: "_hasAccess",
        type: "bool"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_token",
        type: "uint256"
      }
    ],
    name: "transfer",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_token",
        type: "uint256"
      }
    ],
    name: "mint",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_token",
        type: "uint256"
      }
    ],
    name: "burn",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "uint256",
        name: "_totalInPositions",
        type: "uint256"
      }
    ],
    name: "setTotalInPositions",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "uint256",
        name: "_newTotalOnOtherChain",
        type: "uint256"
      }
    ],
    name: "setTotalOnOtherChain",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !0,
    inputs: [
      {
        internalType: "address",
        name: "_tokenOwner",
        type: "address"
      }
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address"
      },
      {
        internalType: "address",
        name: "_spender",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_tokens",
        type: "uint256"
      }
    ],
    name: "setAllowance",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !0,
    inputs: [
      {
        internalType: "address",
        name: "_tokenOwner",
        type: "address"
      },
      {
        internalType: "address",
        name: "spender",
        type: "address"
      }
    ],
    name: "getAllowance",
    outputs: [
      {
        internalType: "uint256",
        name: "remaining",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "address",
        name: "_newGovernanceContractAddress",
        type: "address"
      }
    ],
    name: "setGovernanceContract",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "getGovernance",
    outputs: [
      {
        internalType: "address",
        name: "_governanceContract",
        type: "address"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "address",
        name: "_newBridge",
        type: "address"
      }
    ],
    name: "setMorpherBridge",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "getMorpherBridge",
    outputs: [
      {
        internalType: "address",
        name: "_currentBridge",
        type: "address"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "address",
        name: "_newOracleContract",
        type: "address"
      }
    ],
    name: "setOracleContract",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "getOracleContract",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "address",
        name: "_newTokenContract",
        type: "address"
      }
    ],
    name: "setTokenContract",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "getTokenContract",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "address",
        name: "_newAdministrator",
        type: "address"
      }
    ],
    name: "setAdministrator",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "getAdministrator",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "address",
        name: "_newRewardsAddress",
        type: "address"
      }
    ],
    name: "setRewardAddress",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "uint256",
        name: "_newRewardBasisPoints",
        type: "uint256"
      }
    ],
    name: "setRewardBasisPoints",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "bytes32",
        name: "_activateMarket",
        type: "bytes32"
      }
    ],
    name: "activateMarket",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "bytes32",
        name: "_deActivateMarket",
        type: "bytes32"
      }
    ],
    name: "deActivateMarket",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !0,
    inputs: [
      {
        internalType: "bytes32",
        name: "_marketId",
        type: "bytes32"
      }
    ],
    name: "getMarketActive",
    outputs: [
      {
        internalType: "bool",
        name: "_active",
        type: "bool"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "uint256",
        name: "_newMaximumLeverage",
        type: "uint256"
      }
    ],
    name: "setMaximumLeverage",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "getMaximumLeverage",
    outputs: [
      {
        internalType: "uint256",
        name: "_maxLeverage",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !1,
    inputs: [],
    name: "pauseState",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !1,
    inputs: [],
    name: "unPauseState",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "bytes32",
        name: "_sideChainMerkleRoot",
        type: "bytes32"
      }
    ],
    name: "setSideChainMerkleRoot",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "getSideChainMerkleRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "_sideChainMerkleRoot",
        type: "bytes32"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address"
      }
    ],
    name: "setSideChainOperator",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "getSideChainOperator",
    outputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "getSideChainMerkleRootWrittenAtTime",
    outputs: [
      {
        internalType: "uint256",
        name: "_sideChainMerkleRoot",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_marketId",
        type: "bytes32"
      },
      {
        internalType: "uint256",
        name: "_timeStamp",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_longShares",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_shortShares",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_meanEntryPrice",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_meanEntrySpread",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_meanEntryLeverage",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_liquidationPrice",
        type: "uint256"
      }
    ],
    name: "setPosition",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !0,
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_marketId",
        type: "bytes32"
      }
    ],
    name: "getPosition",
    outputs: [
      {
        internalType: "uint256",
        name: "_longShares",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_shortShares",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_meanEntryPrice",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_meanEntrySpread",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_meanEntryLeverage",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_liquidationPrice",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !0,
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_marketId",
        type: "bytes32"
      },
      {
        internalType: "uint256",
        name: "_timeStamp",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_longShares",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_shortShares",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_meanEntryPrice",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_meanEntrySpread",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_meanEntryLeverage",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_liquidationPrice",
        type: "uint256"
      }
    ],
    name: "getPositionHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "_hash",
        type: "bytes32"
      }
    ],
    payable: !1,
    stateMutability: "pure",
    type: "function"
  },
  {
    constant: !0,
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_balance",
        type: "uint256"
      }
    ],
    name: "getBalanceHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "_hash",
        type: "bytes32"
      }
    ],
    payable: !1,
    stateMutability: "pure",
    type: "function"
  },
  {
    constant: !0,
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_marketId",
        type: "bytes32"
      }
    ],
    name: "getLastUpdated",
    outputs: [
      {
        internalType: "uint256",
        name: "_lastUpdated",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !0,
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_marketId",
        type: "bytes32"
      }
    ],
    name: "getLongShares",
    outputs: [
      {
        internalType: "uint256",
        name: "_longShares",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !0,
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_marketId",
        type: "bytes32"
      }
    ],
    name: "getShortShares",
    outputs: [
      {
        internalType: "uint256",
        name: "_shortShares",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !0,
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_marketId",
        type: "bytes32"
      }
    ],
    name: "getMeanEntryPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "_meanEntryPrice",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !0,
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_marketId",
        type: "bytes32"
      }
    ],
    name: "getMeanEntrySpread",
    outputs: [
      {
        internalType: "uint256",
        name: "_meanEntrySpread",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !0,
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_marketId",
        type: "bytes32"
      }
    ],
    name: "getMeanEntryLeverage",
    outputs: [
      {
        internalType: "uint256",
        name: "_meanEntryLeverage",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !0,
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_marketId",
        type: "bytes32"
      }
    ],
    name: "getLiquidationPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "_liquidationPrice",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !1,
    inputs: [],
    name: "payOperatingReward",
    outputs: [],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  }
], yd = [
  {
    type: "function",
    name: "allowance",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address"
      },
      {
        name: "spender",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "approve",
    inputs: [
      {
        name: "spender",
        type: "address",
        internalType: "address"
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "balanceOf",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "burn",
    inputs: [
      {
        name: "from",
        type: "address",
        internalType: "address"
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "decimals",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint8",
        internalType: "uint8"
      }
    ],
    stateMutability: "view"
  },
  {
    constant: !0,
    inputs: [],
    name: "version",
    outputs: [
      {
        name: "",
        type: "string"
      }
    ],
    payable: !1,
    type: "function"
  },
  {
    type: "function",
    name: "deposit",
    inputs: [
      {
        name: "user",
        type: "address",
        internalType: "address"
      },
      {
        name: "depositData",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "getDailyMintedTransferLimit",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getDailyMintedTransfers",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getLockedRewards",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getRestrictTransfers",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getTimeLock",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "lockedUntil",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getTotalLockedRewards",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getTotalTimeLocked",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getTotalTokensInPositions",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getTradeableBalanceOf",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getTransferredInTokens",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "initialize",
    inputs: [
      {
        name: "_morpherAccessControlAddress",
        type: "address",
        internalType: "address"
      },
      {
        name: "_morpherStateAddress",
        type: "address",
        internalType: "address"
      },
      {
        name: "_permitName",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "lockRewards",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address"
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "lockTokensForTime",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address"
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "lockDuration",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "mint",
    inputs: [
      {
        name: "to",
        type: "address",
        internalType: "address"
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "morpherAccessControl",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract MorpherAccessControl"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "morpherState",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract MorpherState"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "name",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "nonces",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "pause",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "paused",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "permit",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address"
      },
      {
        name: "spender",
        type: "address",
        internalType: "address"
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "deadline",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "v",
        type: "uint8",
        internalType: "uint8"
      },
      {
        name: "r",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "s",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "proxiableUUID",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "setDailyMintedTransferLimit",
    inputs: [
      {
        name: "limit",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "setMorpherStateAddress",
    inputs: [
      {
        name: "_morpherState",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "setRestrictTransfers",
    inputs: [
      {
        name: "restrictTransfers",
        type: "bool",
        internalType: "bool"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "setTotalInPositions",
    inputs: [
      {
        name: "totalTokensInPositions",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "symbol",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "totalSupply",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "transfer",
    inputs: [
      {
        name: "to",
        type: "address",
        internalType: "address"
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "transferFrom",
    inputs: [
      {
        name: "from",
        type: "address",
        internalType: "address"
      },
      {
        name: "to",
        type: "address",
        internalType: "address"
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "unlockExpiredTokens",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "unlockRewards",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address"
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "unpause",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "upgradeToAndCall",
    inputs: [
      {
        name: "newImplementation",
        type: "address",
        internalType: "address"
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    name: "withdraw",
    inputs: [
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "event",
    name: "Approval",
    inputs: [
      {
        name: "owner",
        type: "address",
        indexed: !0,
        internalType: "address"
      },
      {
        name: "spender",
        type: "address",
        indexed: !0,
        internalType: "address"
      },
      {
        name: "value",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      }
    ],
    anonymous: !1
  },
  {
    type: "event",
    name: "DailyMintedTransferLimitUpdated",
    inputs: [
      {
        name: "oldLimit",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      },
      {
        name: "newLimit",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      }
    ],
    anonymous: !1
  },
  {
    type: "event",
    name: "EIP712DomainChanged",
    inputs: [],
    anonymous: !1
  },
  {
    type: "event",
    name: "Initialized",
    inputs: [
      {
        name: "version",
        type: "uint64",
        indexed: !1,
        internalType: "uint64"
      }
    ],
    anonymous: !1
  },
  {
    type: "event",
    name: "MigrationTokensLocked",
    inputs: [
      {
        name: "account",
        type: "address",
        indexed: !0,
        internalType: "address"
      },
      {
        name: "amount",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      },
      {
        name: "lockedUntil",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      }
    ],
    anonymous: !1
  },
  {
    type: "event",
    name: "MintedTokensTransferred",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: !0,
        internalType: "address"
      },
      {
        name: "to",
        type: "address",
        indexed: !0,
        internalType: "address"
      },
      {
        name: "amount",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      }
    ],
    anonymous: !1
  },
  {
    type: "event",
    name: "Paused",
    inputs: [
      {
        name: "account",
        type: "address",
        indexed: !1,
        internalType: "address"
      }
    ],
    anonymous: !1
  },
  {
    type: "event",
    name: "RewardsLocked",
    inputs: [
      {
        name: "account",
        type: "address",
        indexed: !0,
        internalType: "address"
      },
      {
        name: "amount",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      }
    ],
    anonymous: !1
  },
  {
    type: "event",
    name: "RewardsUnlocked",
    inputs: [
      {
        name: "account",
        type: "address",
        indexed: !0,
        internalType: "address"
      },
      {
        name: "amount",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      }
    ],
    anonymous: !1
  },
  {
    type: "event",
    name: "SetRestrictTransfers",
    inputs: [
      {
        name: "_oldValue",
        type: "bool",
        indexed: !1,
        internalType: "bool"
      },
      {
        name: "_newValue",
        type: "bool",
        indexed: !1,
        internalType: "bool"
      }
    ],
    anonymous: !1
  },
  {
    type: "event",
    name: "SetTotalTokensInPositions",
    inputs: [
      {
        name: "_oldValue",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      },
      {
        name: "_newValue",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      }
    ],
    anonymous: !1
  },
  {
    type: "event",
    name: "SetTotalTokensOnOtherChain",
    inputs: [
      {
        name: "_oldValue",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      },
      {
        name: "_newValue",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      }
    ],
    anonymous: !1
  },
  {
    type: "event",
    name: "TokensLocked",
    inputs: [
      {
        name: "account",
        type: "address",
        indexed: !0,
        internalType: "address"
      },
      {
        name: "amount",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      },
      {
        name: "lockedUntil",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      }
    ],
    anonymous: !1
  },
  {
    type: "event",
    name: "TokensTransferredIn",
    inputs: [
      {
        name: "to",
        type: "address",
        indexed: !0,
        internalType: "address"
      },
      {
        name: "amount",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      }
    ],
    anonymous: !1
  },
  {
    type: "event",
    name: "TokensUnlocked",
    inputs: [
      {
        name: "account",
        type: "address",
        indexed: !0,
        internalType: "address"
      },
      {
        name: "amount",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      }
    ],
    anonymous: !1
  },
  {
    type: "event",
    name: "Transfer",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: !0,
        internalType: "address"
      },
      {
        name: "to",
        type: "address",
        indexed: !0,
        internalType: "address"
      },
      {
        name: "value",
        type: "uint256",
        indexed: !1,
        internalType: "uint256"
      }
    ],
    anonymous: !1
  },
  {
    type: "event",
    name: "Unpaused",
    inputs: [
      {
        name: "account",
        type: "address",
        indexed: !1,
        internalType: "address"
      }
    ],
    anonymous: !1
  },
  {
    type: "event",
    name: "Upgraded",
    inputs: [
      {
        name: "implementation",
        type: "address",
        indexed: !0,
        internalType: "address"
      }
    ],
    anonymous: !1
  },
  {
    type: "error",
    name: "AddressEmptyCode",
    inputs: [
      {
        name: "target",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "ECDSAInvalidSignature",
    inputs: []
  },
  {
    type: "error",
    name: "ECDSAInvalidSignatureLength",
    inputs: [
      {
        name: "length",
        type: "uint256",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "error",
    name: "ECDSAInvalidSignatureS",
    inputs: [
      {
        name: "s",
        type: "bytes32",
        internalType: "bytes32"
      }
    ]
  },
  {
    type: "error",
    name: "ERC1967InvalidImplementation",
    inputs: [
      {
        name: "implementation",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "ERC1967NonPayable",
    inputs: []
  },
  {
    type: "error",
    name: "ERC20InsufficientAllowance",
    inputs: [
      {
        name: "spender",
        type: "address",
        internalType: "address"
      },
      {
        name: "allowance",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "needed",
        type: "uint256",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "error",
    name: "ERC20InsufficientBalance",
    inputs: [
      {
        name: "sender",
        type: "address",
        internalType: "address"
      },
      {
        name: "balance",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "needed",
        type: "uint256",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "error",
    name: "ERC20InvalidApprover",
    inputs: [
      {
        name: "approver",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "ERC20InvalidReceiver",
    inputs: [
      {
        name: "receiver",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "ERC20InvalidSender",
    inputs: [
      {
        name: "sender",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "ERC20InvalidSpender",
    inputs: [
      {
        name: "spender",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "ERC2612ExpiredSignature",
    inputs: [
      {
        name: "deadline",
        type: "uint256",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "error",
    name: "ERC2612InvalidSigner",
    inputs: [
      {
        name: "signer",
        type: "address",
        internalType: "address"
      },
      {
        name: "owner",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "EnforcedPause",
    inputs: []
  },
  {
    type: "error",
    name: "ExpectedPause",
    inputs: []
  },
  {
    type: "error",
    name: "FailedCall",
    inputs: []
  },
  {
    type: "error",
    name: "InvalidAccountNonce",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address"
      },
      {
        name: "currentNonce",
        type: "uint256",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "error",
    name: "InvalidInitialization",
    inputs: []
  },
  {
    type: "error",
    name: "NotInitializing",
    inputs: []
  },
  {
    type: "error",
    name: "UUPSUnauthorizedCallContext",
    inputs: []
  },
  {
    type: "error",
    name: "UUPSUnsupportedProxiableUUID",
    inputs: [
      {
        name: "slot",
        type: "bytes32",
        internalType: "bytes32"
      }
    ]
  }
];
function KA(n) {
  return n && n.__esModule && Object.prototype.hasOwnProperty.call(n, "default") ? n.default : n;
}
function QA(n) {
  if (n.__esModule) return n;
  var e = n.default;
  if (typeof e == "function") {
    var t = function r() {
      return this instanceof r ? Reflect.construct(e, arguments, this.constructor) : e.apply(this, arguments);
    };
    t.prototype = e.prototype;
  } else t = {};
  return Object.defineProperty(t, "__esModule", { value: !0 }), Object.keys(n).forEach(function(r) {
    var i = Object.getOwnPropertyDescriptor(n, r);
    Object.defineProperty(t, r, i.get ? i : {
      enumerable: !0,
      get: function() {
        return n[r];
      }
    });
  }), t;
}
function qA(n, e) {
  return e = e || {}, new Promise(function(t, r) {
    var i = new XMLHttpRequest(), s = [], a = [], o = {}, c = function() {
      return { ok: (i.status / 100 | 0) == 2, statusText: i.statusText, status: i.status, url: i.responseURL, text: function() {
        return Promise.resolve(i.responseText);
      }, json: function() {
        return Promise.resolve(i.responseText).then(JSON.parse);
      }, blob: function() {
        return Promise.resolve(new Blob([i.response]));
      }, clone: c, headers: { keys: function() {
        return s;
      }, entries: function() {
        return a;
      }, get: function(l) {
        return o[l.toLowerCase()];
      }, has: function(l) {
        return l.toLowerCase() in o;
      } } };
    };
    for (var u in i.open(e.method || "get", n, !0), i.onload = function() {
      i.getAllResponseHeaders().replace(/^(.*?):[^\S\n]*([\s\S]*?)$/gm, function(l, d, f) {
        s.push(d = d.toLowerCase()), a.push([d, f]), o[d] = o[d] ? o[d] + "," + f : f;
      }), t(c());
    }, i.onerror = r, i.withCredentials = e.credentials == "include", e.headers) i.setRequestHeader(u, e.headers[u]);
    i.send(e.body || null);
  });
}
const JA = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: qA
}, Symbol.toStringTag, { value: "Module" })), np = /* @__PURE__ */ QA(JA);
var wm = self.fetch || (self.fetch = np.default || np);
const Rf = /* @__PURE__ */ KA(wm), Am = /* @__PURE__ */ eg({
  __proto__: null,
  default: Rf
}, [wm]), Em = "6.15.0";
function YA(n, e, t) {
  const r = e.split("|").map((s) => s.trim());
  for (let s = 0; s < r.length; s++)
    switch (e) {
      case "any":
        return;
      case "bigint":
      case "boolean":
      case "number":
      case "string":
        if (typeof n === e)
          return;
    }
  const i = new Error(`invalid value for type ${e}`);
  throw i.code = "INVALID_ARGUMENT", i.argument = `value.${t}`, i.value = n, i;
}
async function Ke(n) {
  const e = Object.keys(n);
  return (await Promise.all(e.map((r) => Promise.resolve(n[r])))).reduce((r, i, s) => (r[e[s]] = i, r), {});
}
function Y(n, e, t) {
  for (let r in e) {
    let i = e[r];
    const s = t ? t[r] : null;
    s && YA(i, s, r), Object.defineProperty(n, r, { enumerable: !0, value: i, writable: !1 });
  }
}
function bs(n, e) {
  if (n == null)
    return "null";
  if (e == null && (e = /* @__PURE__ */ new Set()), typeof n == "object") {
    if (e.has(n))
      return "[Circular]";
    e.add(n);
  }
  if (Array.isArray(n))
    return "[ " + n.map((t) => bs(t, e)).join(", ") + " ]";
  if (n instanceof Uint8Array) {
    const t = "0123456789abcdef";
    let r = "0x";
    for (let i = 0; i < n.length; i++)
      r += t[n[i] >> 4], r += t[n[i] & 15];
    return r;
  }
  if (typeof n == "object" && typeof n.toJSON == "function")
    return bs(n.toJSON(), e);
  switch (typeof n) {
    case "boolean":
    case "number":
    case "symbol":
      return n.toString();
    case "bigint":
      return BigInt(n).toString();
    case "string":
      return JSON.stringify(n);
    case "object": {
      const t = Object.keys(n);
      return t.sort(), "{ " + t.map((r) => `${bs(r, e)}: ${bs(n[r], e)}`).join(", ") + " }";
    }
  }
  return "[ COULD NOT SERIALIZE ]";
}
function He(n, e) {
  return n && n.code === e;
}
function Bf(n) {
  return He(n, "CALL_EXCEPTION");
}
function ge(n, e, t) {
  let r = n;
  {
    const s = [];
    if (t) {
      if ("message" in t || "code" in t || "name" in t)
        throw new Error(`value will overwrite populated values: ${bs(t)}`);
      for (const a in t) {
        if (a === "shortMessage")
          continue;
        const o = t[a];
        s.push(a + "=" + bs(o));
      }
    }
    s.push(`code=${e}`), s.push(`version=${Em}`), s.length && (n += " (" + s.join(", ") + ")");
  }
  let i;
  switch (e) {
    case "INVALID_ARGUMENT":
      i = new TypeError(n);
      break;
    case "NUMERIC_FAULT":
    case "BUFFER_OVERRUN":
      i = new RangeError(n);
      break;
    default:
      i = new Error(n);
  }
  return Y(i, { code: e }), t && Object.assign(i, t), i.shortMessage == null && Y(i, { shortMessage: r }), i;
}
function G(n, e, t, r) {
  if (!n)
    throw ge(e, t, r);
}
function A(n, e, t, r) {
  G(n, e, "INVALID_ARGUMENT", { argument: t, value: r });
}
function vm(n, e, t) {
  t == null && (t = ""), t && (t = ": " + t), G(n >= e, "missing argument" + t, "MISSING_ARGUMENT", {
    count: n,
    expectedCount: e
  }), G(n <= e, "too many arguments" + t, "UNEXPECTED_ARGUMENT", {
    count: n,
    expectedCount: e
  });
}
const ZA = ["NFD", "NFC", "NFKD", "NFKC"].reduce((n, e) => {
  try {
    if ("test".normalize(e) !== "test")
      throw new Error("bad");
    if (e === "NFD" && "é".normalize("NFD") !== "é")
      throw new Error("broken");
    n.push(e);
  } catch {
  }
  return n;
}, []);
function Tm(n) {
  G(ZA.indexOf(n) >= 0, "platform missing String.prototype.normalize", "UNSUPPORTED_OPERATION", {
    operation: "String.prototype.normalize",
    info: { form: n }
  });
}
function es(n, e, t) {
  if (t == null && (t = ""), n !== e) {
    let r = t, i = "new";
    t && (r += ".", i += " " + t), G(!1, `private constructor; use ${r}from* methods`, "UNSUPPORTED_OPERATION", {
      operation: i
    });
  }
}
function Pm(n, e, t) {
  if (n instanceof Uint8Array)
    return t ? new Uint8Array(n) : n;
  if (typeof n == "string" && n.match(/^0x(?:[0-9a-f][0-9a-f])*$/i)) {
    const r = new Uint8Array((n.length - 2) / 2);
    let i = 2;
    for (let s = 0; s < r.length; s++)
      r[s] = parseInt(n.substring(i, i + 2), 16), i += 2;
    return r;
  }
  A(!1, "invalid BytesLike value", e || "value", n);
}
function K(n, e) {
  return Pm(n, e, !1);
}
function $e(n, e) {
  return Pm(n, e, !0);
}
function me(n, e) {
  return !(typeof n != "string" || !n.match(/^0x[0-9A-Fa-f]*$/) || typeof e == "number" && n.length !== 2 + 2 * e || e === !0 && n.length % 2 !== 0);
}
function $u(n) {
  return me(n, !0) || n instanceof Uint8Array;
}
const rp = "0123456789abcdef";
function V(n) {
  const e = K(n);
  let t = "0x";
  for (let r = 0; r < e.length; r++) {
    const i = e[r];
    t += rp[(i & 240) >> 4] + rp[i & 15];
  }
  return t;
}
function le(n) {
  return "0x" + n.map((e) => V(e).substring(2)).join("");
}
function or(n) {
  return me(n, !0) ? (n.length - 2) / 2 : K(n).length;
}
function be(n, e, t) {
  const r = K(n);
  return t != null && t > r.length && G(!1, "cannot slice beyond data bounds", "BUFFER_OVERRUN", {
    buffer: r,
    length: r.length,
    offset: t
  }), V(r.slice(e ?? 0, t ?? r.length));
}
function Sm(n, e, t) {
  const r = K(n);
  G(e >= r.length, "padding exceeds data length", "BUFFER_OVERRUN", {
    buffer: new Uint8Array(r),
    length: e,
    offset: e + 1
  });
  const i = new Uint8Array(e);
  return i.fill(0), t ? i.set(r, e - r.length) : i.set(r, 0), V(i);
}
function $t(n, e) {
  return Sm(n, e, !0);
}
function Im(n, e) {
  return Sm(n, e, !1);
}
const Vu = BigInt(0), sn = BigInt(1), xs = 9007199254740991;
function XA(n, e) {
  const t = zu(n, "value"), r = BigInt(te(e, "width"));
  if (G(t >> r === Vu, "overflow", "NUMERIC_FAULT", {
    operation: "fromTwos",
    fault: "overflow",
    value: n
  }), t >> r - sn) {
    const i = (sn << r) - sn;
    return -((~t & i) + sn);
  }
  return t;
}
function _f(n, e) {
  let t = q(n, "value");
  const r = BigInt(te(e, "width")), i = sn << r - sn;
  if (t < Vu) {
    t = -t, G(t <= i, "too low", "NUMERIC_FAULT", {
      operation: "toTwos",
      fault: "overflow",
      value: n
    });
    const s = (sn << r) - sn;
    return (~t & s) + sn;
  } else
    G(t < i, "too high", "NUMERIC_FAULT", {
      operation: "toTwos",
      fault: "overflow",
      value: n
    });
  return t;
}
function Wa(n, e) {
  const t = zu(n, "value"), r = BigInt(te(e, "bits"));
  return t & (sn << r) - sn;
}
function q(n, e) {
  switch (typeof n) {
    case "bigint":
      return n;
    case "number":
      return A(Number.isInteger(n), "underflow", e || "value", n), A(n >= -xs && n <= xs, "overflow", e || "value", n), BigInt(n);
    case "string":
      try {
        if (n === "")
          throw new Error("empty string");
        return n[0] === "-" && n[1] !== "-" ? -BigInt(n.substring(1)) : BigInt(n);
      } catch (t) {
        A(!1, `invalid BigNumberish string: ${t.message}`, e || "value", n);
      }
  }
  A(!1, "invalid BigNumberish value", e || "value", n);
}
function zu(n, e) {
  const t = q(n, e);
  return G(t >= Vu, "unsigned value cannot be negative", "NUMERIC_FAULT", {
    fault: "overflow",
    operation: "getUint",
    value: n
  }), t;
}
const ip = "0123456789abcdef";
function ju(n) {
  if (n instanceof Uint8Array) {
    let e = "0x0";
    for (const t of n)
      e += ip[t >> 4], e += ip[t & 15];
    return BigInt(e);
  }
  return q(n);
}
function te(n, e) {
  switch (typeof n) {
    case "bigint":
      return A(n >= -xs && n <= xs, "overflow", e || "value", n), Number(n);
    case "number":
      return A(Number.isInteger(n), "underflow", e || "value", n), A(n >= -xs && n <= xs, "overflow", e || "value", n), n;
    case "string":
      try {
        if (n === "")
          throw new Error("empty string");
        return te(BigInt(n), e);
      } catch (t) {
        A(!1, `invalid numeric string: ${t.message}`, e || "value", n);
      }
  }
  A(!1, "invalid numeric value", e || "value", n);
}
function e5(n) {
  return te(ju(n));
}
function pr(n, e) {
  let r = zu(n, "value").toString(16);
  if (e == null)
    r.length % 2 && (r = "0" + r);
  else {
    const i = te(e, "width");
    for (G(i * 2 >= r.length, `value exceeds width (${i} bytes)`, "NUMERIC_FAULT", {
      operation: "toBeHex",
      fault: "overflow",
      value: n
    }); r.length < i * 2; )
      r = "0" + r;
  }
  return "0x" + r;
}
function Ae(n) {
  const e = zu(n, "value");
  if (e === Vu)
    return new Uint8Array([]);
  let t = e.toString(16);
  t.length % 2 && (t = "0" + t);
  const r = new Uint8Array(t.length / 2);
  for (let i = 0; i < r.length; i++) {
    const s = i * 2;
    r[i] = parseInt(t.substring(s, s + 2), 16);
  }
  return r;
}
function nn(n) {
  let e = V($u(n) ? n : Ae(n)).substring(2);
  for (; e.startsWith("0"); )
    e = e.substring(1);
  return e === "" && (e = "0"), "0x" + e;
}
const su = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
let mc = null;
function t5(n) {
  if (mc == null) {
    mc = {};
    for (let t = 0; t < su.length; t++)
      mc[su[t]] = BigInt(t);
  }
  const e = mc[n];
  return A(e != null, "invalid base58 value", "letter", n), e;
}
const n5 = BigInt(0), md = BigInt(58);
function Cm(n) {
  const e = K(n);
  let t = ju(e), r = "";
  for (; t; )
    r = su[Number(t % md)] + r, t /= md;
  for (let i = 0; i < e.length && !e[i]; i++)
    r = su[0] + r;
  return r;
}
function r5(n) {
  let e = n5;
  for (let t = 0; t < n.length; t++)
    e *= md, e += t5(n[t]);
  return e;
}
function i5(n) {
  n = atob(n);
  const e = new Uint8Array(n.length);
  for (let t = 0; t < n.length; t++)
    e[t] = n.charCodeAt(t);
  return K(e);
}
function s5(n) {
  const e = K(n);
  let t = "";
  for (let r = 0; r < e.length; r++)
    t += String.fromCharCode(e[r]);
  return btoa(t);
}
var Ss;
class Om {
  /**
   *  Create a new **EventPayload** for %%emitter%% with
   *  the %%listener%% and for %%filter%%.
   */
  constructor(e, t, r) {
    /**
     *  The event filter.
     */
    T(this, "filter");
    /**
     *  The **EventEmitterable**.
     */
    T(this, "emitter");
    _(this, Ss);
    g(this, Ss, t), Y(this, { emitter: e, filter: r });
  }
  /**
   *  Unregister the triggered listener for future events.
   */
  async removeListener() {
    m(this, Ss) != null && await this.emitter.off(this.filter, m(this, Ss));
  }
}
Ss = new WeakMap();
function a5(n, e, t, r, i) {
  A(!1, `invalid codepoint at offset ${e}; ${n}`, "bytes", t);
}
function Nm(n, e, t, r, i) {
  if (n === "BAD_PREFIX" || n === "UNEXPECTED_CONTINUE") {
    let s = 0;
    for (let a = e + 1; a < t.length && t[a] >> 6 === 2; a++)
      s++;
    return s;
  }
  return n === "OVERRUN" ? t.length - e - 1 : 0;
}
function o5(n, e, t, r, i) {
  return n === "OVERLONG" ? (A(typeof i == "number", "invalid bad code point for replacement", "badCodepoint", i), r.push(i), 0) : (r.push(65533), Nm(n, e, t));
}
const c5 = Object.freeze({
  error: a5,
  ignore: Nm,
  replace: o5
});
function u5(n, e) {
  e == null && (e = c5.error);
  const t = K(n, "bytes"), r = [];
  let i = 0;
  for (; i < t.length; ) {
    const s = t[i++];
    if (!(s >> 7)) {
      r.push(s);
      continue;
    }
    let a = null, o = null;
    if ((s & 224) === 192)
      a = 1, o = 127;
    else if ((s & 240) === 224)
      a = 2, o = 2047;
    else if ((s & 248) === 240)
      a = 3, o = 65535;
    else {
      (s & 192) === 128 ? i += e("UNEXPECTED_CONTINUE", i - 1, t, r) : i += e("BAD_PREFIX", i - 1, t, r);
      continue;
    }
    if (i - 1 + a >= t.length) {
      i += e("OVERRUN", i - 1, t, r);
      continue;
    }
    let c = s & (1 << 8 - a - 1) - 1;
    for (let u = 0; u < a; u++) {
      let l = t[i];
      if ((l & 192) != 128) {
        i += e("MISSING_CONTINUE", i, t, r), c = null;
        break;
      }
      c = c << 6 | l & 63, i++;
    }
    if (c !== null) {
      if (c > 1114111) {
        i += e("OUT_OF_RANGE", i - 1 - a, t, r, c);
        continue;
      }
      if (c >= 55296 && c <= 57343) {
        i += e("UTF16_SURROGATE", i - 1 - a, t, r, c);
        continue;
      }
      if (c <= o) {
        i += e("OVERLONG", i - 1 - a, t, r, c);
        continue;
      }
      r.push(c);
    }
  }
  return r;
}
function Qe(n, e) {
  A(typeof n == "string", "invalid string value", "str", n), e != null && (Tm(e), n = n.normalize(e));
  let t = [];
  for (let r = 0; r < n.length; r++) {
    const i = n.charCodeAt(r);
    if (i < 128)
      t.push(i);
    else if (i < 2048)
      t.push(i >> 6 | 192), t.push(i & 63 | 128);
    else if ((i & 64512) == 55296) {
      r++;
      const s = n.charCodeAt(r);
      A(r < n.length && (s & 64512) === 56320, "invalid surrogate pair", "str", n);
      const a = 65536 + ((i & 1023) << 10) + (s & 1023);
      t.push(a >> 18 | 240), t.push(a >> 12 & 63 | 128), t.push(a >> 6 & 63 | 128), t.push(a & 63 | 128);
    } else
      t.push(i >> 12 | 224), t.push(i >> 6 & 63 | 128), t.push(i & 63 | 128);
  }
  return new Uint8Array(t);
}
function l5(n) {
  return n.map((e) => e <= 65535 ? String.fromCharCode(e) : (e -= 65536, String.fromCharCode((e >> 10 & 1023) + 55296, (e & 1023) + 56320))).join("");
}
function au(n, e) {
  return l5(u5(n, e));
}
function Rm(n) {
  async function e(t, r) {
    G(r == null || !r.cancelled, "request cancelled before sending", "CANCELLED");
    const i = t.url.split(":")[0].toLowerCase();
    G(i === "http" || i === "https", `unsupported protocol ${i}`, "UNSUPPORTED_OPERATION", {
      info: { protocol: i },
      operation: "request"
    }), G(i === "https" || !t.credentials || t.allowInsecureAuthentication, "insecure authorized connections unsupported", "UNSUPPORTED_OPERATION", {
      operation: "request"
    });
    let s = null;
    const a = new AbortController(), o = setTimeout(() => {
      s = ge("request timeout", "TIMEOUT"), a.abort();
    }, t.timeout);
    r && r.addListener(() => {
      s = ge("request cancelled", "CANCELLED"), a.abort();
    });
    const c = Object.assign({}, n, {
      method: t.method,
      headers: new Headers(Array.from(t)),
      body: t.body || void 0,
      signal: a.signal
    });
    let u;
    try {
      u = await fetch(t.url, c);
    } catch (p) {
      throw clearTimeout(o), s || p;
    }
    clearTimeout(o);
    const l = {};
    u.headers.forEach((p, y) => {
      l[y.toLowerCase()] = p;
    });
    const d = await u.arrayBuffer(), f = d == null ? null : new Uint8Array(d);
    return {
      statusCode: u.status,
      statusMessage: u.statusText,
      headers: l,
      body: f
    };
  }
  return e;
}
const d5 = 12, f5 = 250;
let sp = Rm();
const p5 = new RegExp("^data:([^;:]*)?(;base64)?,(.*)$", "i"), h5 = new RegExp("^ipfs://(ipfs/)?(.*)$", "i");
let Sl = !1;
async function Bm(n, e) {
  try {
    const t = n.match(p5);
    if (!t)
      throw new Error("invalid data");
    return new Qr(200, "OK", {
      "content-type": t[1] || "text/plain"
    }, t[2] ? i5(t[3]) : m5(t[3]));
  } catch {
    return new Qr(599, "BAD REQUEST (invalid data: URI)", {}, null, new hr(n));
  }
}
function _m(n) {
  async function e(t, r) {
    try {
      const i = t.match(h5);
      if (!i)
        throw new Error("invalid link");
      return new hr(`${n}${i[2]}`);
    } catch {
      return new Qr(599, "BAD REQUEST (invalid IPFS URI)", {}, null, new hr(t));
    }
  }
  return e;
}
const bc = {
  data: Bm,
  ipfs: _m("https://gateway.ipfs.io/ipfs/")
}, km = /* @__PURE__ */ new WeakMap();
var wi, Nr;
class y5 {
  constructor(e) {
    _(this, wi);
    _(this, Nr);
    g(this, wi, []), g(this, Nr, !1), km.set(e, () => {
      if (!m(this, Nr)) {
        g(this, Nr, !0);
        for (const t of m(this, wi))
          setTimeout(() => {
            t();
          }, 0);
        g(this, wi, []);
      }
    });
  }
  addListener(e) {
    G(!m(this, Nr), "singal already cancelled", "UNSUPPORTED_OPERATION", {
      operation: "fetchCancelSignal.addCancelListener"
    }), m(this, wi).push(e);
  }
  get cancelled() {
    return m(this, Nr);
  }
  checkSignal() {
    G(!this.cancelled, "cancelled", "CANCELLED", {});
  }
}
wi = new WeakMap(), Nr = new WeakMap();
function xc(n) {
  if (n == null)
    throw new Error("missing signal; should not happen");
  return n.checkSignal(), n;
}
var Is, Cs, Yt, Kn, Os, Ns, Be, bt, Qn, Ai, Ei, vi, yn, Zt, Rr, Ti, Ka;
const gu = class gu {
  /**
   *  Create a new FetchRequest instance with default values.
   *
   *  Once created, each property may be set before issuing a
   *  ``.send()`` to make the request.
   */
  constructor(e) {
    _(this, Ti);
    _(this, Is);
    _(this, Cs);
    _(this, Yt);
    _(this, Kn);
    _(this, Os);
    _(this, Ns);
    _(this, Be);
    _(this, bt);
    _(this, Qn);
    // Hooks
    _(this, Ai);
    _(this, Ei);
    _(this, vi);
    _(this, yn);
    _(this, Zt);
    _(this, Rr);
    g(this, Ns, String(e)), g(this, Is, !1), g(this, Cs, !0), g(this, Yt, {}), g(this, Kn, ""), g(this, Os, 3e5), g(this, Zt, {
      slotInterval: f5,
      maxAttempts: d5
    }), g(this, Rr, null);
  }
  /**
   *  The fetch URL to request.
   */
  get url() {
    return m(this, Ns);
  }
  set url(e) {
    g(this, Ns, String(e));
  }
  /**
   *  The fetch body, if any, to send as the request body. //(default: null)//
   *
   *  When setting a body, the intrinsic ``Content-Type`` is automatically
   *  set and will be used if **not overridden** by setting a custom
   *  header.
   *
   *  If %%body%% is null, the body is cleared (along with the
   *  intrinsic ``Content-Type``).
   *
   *  If %%body%% is a string, the intrinsic ``Content-Type`` is set to
   *  ``text/plain``.
   *
   *  If %%body%% is a Uint8Array, the intrinsic ``Content-Type`` is set to
   *  ``application/octet-stream``.
   *
   *  If %%body%% is any other object, the intrinsic ``Content-Type`` is
   *  set to ``application/json``.
   */
  get body() {
    return m(this, Be) == null ? null : new Uint8Array(m(this, Be));
  }
  set body(e) {
    if (e == null)
      g(this, Be, void 0), g(this, bt, void 0);
    else if (typeof e == "string")
      g(this, Be, Qe(e)), g(this, bt, "text/plain");
    else if (e instanceof Uint8Array)
      g(this, Be, e), g(this, bt, "application/octet-stream");
    else if (typeof e == "object")
      g(this, Be, Qe(JSON.stringify(e))), g(this, bt, "application/json");
    else
      throw new Error("invalid body");
  }
  /**
   *  Returns true if the request has a body.
   */
  hasBody() {
    return m(this, Be) != null;
  }
  /**
   *  The HTTP method to use when requesting the URI. If no method
   *  has been explicitly set, then ``GET`` is used if the body is
   *  null and ``POST`` otherwise.
   */
  get method() {
    return m(this, Kn) ? m(this, Kn) : this.hasBody() ? "POST" : "GET";
  }
  set method(e) {
    e == null && (e = ""), g(this, Kn, String(e).toUpperCase());
  }
  /**
   *  The headers that will be used when requesting the URI. All
   *  keys are lower-case.
   *
   *  This object is a copy, so any changes will **NOT** be reflected
   *  in the ``FetchRequest``.
   *
   *  To set a header entry, use the ``setHeader`` method.
   */
  get headers() {
    const e = Object.assign({}, m(this, Yt));
    return m(this, Qn) && (e.authorization = `Basic ${s5(Qe(m(this, Qn)))}`), this.allowGzip && (e["accept-encoding"] = "gzip"), e["content-type"] == null && m(this, bt) && (e["content-type"] = m(this, bt)), this.body && (e["content-length"] = String(this.body.length)), e;
  }
  /**
   *  Get the header for %%key%%, ignoring case.
   */
  getHeader(e) {
    return this.headers[e.toLowerCase()];
  }
  /**
   *  Set the header for %%key%% to %%value%%. All values are coerced
   *  to a string.
   */
  setHeader(e, t) {
    m(this, Yt)[String(e).toLowerCase()] = String(t);
  }
  /**
   *  Clear all headers, resetting all intrinsic headers.
   */
  clearHeaders() {
    g(this, Yt, {});
  }
  [Symbol.iterator]() {
    const e = this.headers, t = Object.keys(e);
    let r = 0;
    return {
      next: () => {
        if (r < t.length) {
          const i = t[r++];
          return {
            value: [i, e[i]],
            done: !1
          };
        }
        return { value: void 0, done: !0 };
      }
    };
  }
  /**
   *  The value that will be sent for the ``Authorization`` header.
   *
   *  To set the credentials, use the ``setCredentials`` method.
   */
  get credentials() {
    return m(this, Qn) || null;
  }
  /**
   *  Sets an ``Authorization`` for %%username%% with %%password%%.
   */
  setCredentials(e, t) {
    A(!e.match(/:/), "invalid basic authentication username", "username", "[REDACTED]"), g(this, Qn, `${e}:${t}`);
  }
  /**
   *  Enable and request gzip-encoded responses. The response will
   *  automatically be decompressed. //(default: true)//
   */
  get allowGzip() {
    return m(this, Cs);
  }
  set allowGzip(e) {
    g(this, Cs, !!e);
  }
  /**
   *  Allow ``Authentication`` credentials to be sent over insecure
   *  channels. //(default: false)//
   */
  get allowInsecureAuthentication() {
    return !!m(this, Is);
  }
  set allowInsecureAuthentication(e) {
    g(this, Is, !!e);
  }
  /**
   *  The timeout (in milliseconds) to wait for a complete response.
   *  //(default: 5 minutes)//
   */
  get timeout() {
    return m(this, Os);
  }
  set timeout(e) {
    A(e >= 0, "timeout must be non-zero", "timeout", e), g(this, Os, e);
  }
  /**
   *  This function is called prior to each request, for example
   *  during a redirection or retry in case of server throttling.
   *
   *  This offers an opportunity to populate headers or update
   *  content before sending a request.
   */
  get preflightFunc() {
    return m(this, Ai) || null;
  }
  set preflightFunc(e) {
    g(this, Ai, e);
  }
  /**
   *  This function is called after each response, offering an
   *  opportunity to provide client-level throttling or updating
   *  response data.
   *
   *  Any error thrown in this causes the ``send()`` to throw.
   *
   *  To schedule a retry attempt (assuming the maximum retry limit
   *  has not been reached), use [[response.throwThrottleError]].
   */
  get processFunc() {
    return m(this, Ei) || null;
  }
  set processFunc(e) {
    g(this, Ei, e);
  }
  /**
   *  This function is called on each retry attempt.
   */
  get retryFunc() {
    return m(this, vi) || null;
  }
  set retryFunc(e) {
    g(this, vi, e);
  }
  /**
   *  This function is called to fetch content from HTTP and
   *  HTTPS URLs and is platform specific (e.g. nodejs vs
   *  browsers).
   *
   *  This is by default the currently registered global getUrl
   *  function, which can be changed using [[registerGetUrl]].
   *  If this has been set, setting is to ``null`` will cause
   *  this FetchRequest (and any future clones) to revert back to
   *  using the currently registered global getUrl function.
   *
   *  Setting this is generally not necessary, but may be useful
   *  for developers that wish to intercept requests or to
   *  configurege a proxy or other agent.
   */
  get getUrlFunc() {
    return m(this, Rr) || sp;
  }
  set getUrlFunc(e) {
    g(this, Rr, e);
  }
  toString() {
    return `<FetchRequest method=${JSON.stringify(this.method)} url=${JSON.stringify(this.url)} headers=${JSON.stringify(this.headers)} body=${m(this, Be) ? V(m(this, Be)) : "null"}>`;
  }
  /**
   *  Update the throttle parameters used to determine maximum
   *  attempts and exponential-backoff properties.
   */
  setThrottleParams(e) {
    e.slotInterval != null && (m(this, Zt).slotInterval = e.slotInterval), e.maxAttempts != null && (m(this, Zt).maxAttempts = e.maxAttempts);
  }
  /**
   *  Resolves to the response by sending the request.
   */
  send() {
    return G(m(this, yn) == null, "request already sent", "UNSUPPORTED_OPERATION", { operation: "fetchRequest.send" }), g(this, yn, new y5(this)), z(this, Ti, Ka).call(this, 0, ap() + this.timeout, 0, this, new Qr(0, "", {}, null, this));
  }
  /**
   *  Cancels the inflight response, causing a ``CANCELLED``
   *  error to be rejected from the [[send]].
   */
  cancel() {
    G(m(this, yn) != null, "request has not been sent", "UNSUPPORTED_OPERATION", { operation: "fetchRequest.cancel" });
    const e = km.get(this);
    if (!e)
      throw new Error("missing signal; should not happen");
    e();
  }
  /**
   *  Returns a new [[FetchRequest]] that represents the redirection
   *  to %%location%%.
   */
  redirect(e) {
    const t = this.url.split(":")[0].toLowerCase(), r = e.split(":")[0].toLowerCase();
    G(this.method === "GET" && (t !== "https" || r !== "http") && e.match(/^https?:/), "unsupported redirect", "UNSUPPORTED_OPERATION", {
      operation: `redirect(${this.method} ${JSON.stringify(this.url)} => ${JSON.stringify(e)})`
    });
    const i = new gu(e);
    return i.method = "GET", i.allowGzip = this.allowGzip, i.timeout = this.timeout, g(i, Yt, Object.assign({}, m(this, Yt))), m(this, Be) && g(i, Be, new Uint8Array(m(this, Be))), g(i, bt, m(this, bt)), i;
  }
  /**
   *  Create a new copy of this request.
   */
  clone() {
    const e = new gu(this.url);
    return g(e, Kn, m(this, Kn)), m(this, Be) && g(e, Be, m(this, Be)), g(e, bt, m(this, bt)), g(e, Yt, Object.assign({}, m(this, Yt))), g(e, Qn, m(this, Qn)), this.allowGzip && (e.allowGzip = !0), e.timeout = this.timeout, this.allowInsecureAuthentication && (e.allowInsecureAuthentication = !0), g(e, Ai, m(this, Ai)), g(e, Ei, m(this, Ei)), g(e, vi, m(this, vi)), g(e, Zt, Object.assign({}, m(this, Zt))), g(e, Rr, m(this, Rr)), e;
  }
  /**
   *  Locks all static configuration for gateways and FetchGetUrlFunc
   *  registration.
   */
  static lockConfig() {
    Sl = !0;
  }
  /**
   *  Get the current Gateway function for %%scheme%%.
   */
  static getGateway(e) {
    return bc[e.toLowerCase()] || null;
  }
  /**
   *  Use the %%func%% when fetching URIs using %%scheme%%.
   *
   *  This method affects all requests globally.
   *
   *  If [[lockConfig]] has been called, no change is made and this
   *  throws.
   */
  static registerGateway(e, t) {
    if (e = e.toLowerCase(), e === "http" || e === "https")
      throw new Error(`cannot intercept ${e}; use registerGetUrl`);
    if (Sl)
      throw new Error("gateways locked");
    bc[e] = t;
  }
  /**
   *  Use %%getUrl%% when fetching URIs over HTTP and HTTPS requests.
   *
   *  This method affects all requests globally.
   *
   *  If [[lockConfig]] has been called, no change is made and this
   *  throws.
   */
  static registerGetUrl(e) {
    if (Sl)
      throw new Error("gateways locked");
    sp = e;
  }
  /**
   *  Creates a getUrl function that fetches content from HTTP and
   *  HTTPS URLs.
   *
   *  The available %%options%% are dependent on the platform
   *  implementation of the default getUrl function.
   *
   *  This is not generally something that is needed, but is useful
   *  when trying to customize simple behaviour when fetching HTTP
   *  content.
   */
  static createGetUrlFunc(e) {
    return Rm(e);
  }
  /**
   *  Creates a function that can "fetch" data URIs.
   *
   *  Note that this is automatically done internally to support
   *  data URIs, so it is not necessary to register it.
   *
   *  This is not generally something that is needed, but may
   *  be useful in a wrapper to perfom custom data URI functionality.
   */
  static createDataGateway() {
    return Bm;
  }
  /**
   *  Creates a function that will fetch IPFS (unvalidated) from
   *  a custom gateway baseUrl.
   *
   *  The default IPFS gateway used internally is
   *  ``"https:/\/gateway.ipfs.io/ipfs/"``.
   */
  static createIpfsGatewayFunc(e) {
    return _m(e);
  }
};
Is = new WeakMap(), Cs = new WeakMap(), Yt = new WeakMap(), Kn = new WeakMap(), Os = new WeakMap(), Ns = new WeakMap(), Be = new WeakMap(), bt = new WeakMap(), Qn = new WeakMap(), Ai = new WeakMap(), Ei = new WeakMap(), vi = new WeakMap(), yn = new WeakMap(), Zt = new WeakMap(), Rr = new WeakMap(), Ti = new WeakSet(), Ka = async function(e, t, r, i, s) {
  var l, d, f;
  if (e >= m(this, Zt).maxAttempts)
    return s.makeServerError("exceeded maximum retry limit");
  G(ap() <= t, "timeout", "TIMEOUT", {
    operation: "request.send",
    reason: "timeout",
    request: i
  }), r > 0 && await b5(r);
  let a = this.clone();
  const o = (a.url.split(":")[0] || "").toLowerCase();
  if (o in bc) {
    const p = await bc[o](a.url, xc(m(i, yn)));
    if (p instanceof Qr) {
      let y = p;
      if (this.processFunc) {
        xc(m(i, yn));
        try {
          y = await this.processFunc(a, y);
        } catch (h) {
          (h.throttle == null || typeof h.stall != "number") && y.makeServerError("error in post-processing function", h).assertOk();
        }
      }
      return y;
    }
    a = p;
  }
  this.preflightFunc && (a = await this.preflightFunc(a));
  const c = await this.getUrlFunc(a, xc(m(i, yn)));
  let u = new Qr(c.statusCode, c.statusMessage, c.headers, c.body, i);
  if (u.statusCode === 301 || u.statusCode === 302) {
    try {
      const p = u.headers.location || "";
      return z(l = a.redirect(p), Ti, Ka).call(l, e + 1, t, 0, i, u);
    } catch {
    }
    return u;
  } else if (u.statusCode === 429 && (this.retryFunc == null || await this.retryFunc(a, u, e))) {
    const p = u.headers["retry-after"];
    let y = m(this, Zt).slotInterval * Math.trunc(Math.random() * Math.pow(2, e));
    return typeof p == "string" && p.match(/^[1-9][0-9]*$/) && (y = parseInt(p)), z(d = a.clone(), Ti, Ka).call(d, e + 1, t, y, i, u);
  }
  if (this.processFunc) {
    xc(m(i, yn));
    try {
      u = await this.processFunc(a, u);
    } catch (p) {
      (p.throttle == null || typeof p.stall != "number") && u.makeServerError("error in post-processing function", p).assertOk();
      let y = m(this, Zt).slotInterval * Math.trunc(Math.random() * Math.pow(2, e));
      return p.stall >= 0 && (y = p.stall), z(f = a.clone(), Ti, Ka).call(f, e + 1, t, y, i, u);
    }
  }
  return u;
};
let hr = gu;
var Ro, Bo, _o, xt, Rs, Pi;
const o0 = class o0 {
  constructor(e, t, r, i, s) {
    _(this, Ro);
    _(this, Bo);
    _(this, _o);
    _(this, xt);
    _(this, Rs);
    _(this, Pi);
    g(this, Ro, e), g(this, Bo, t), g(this, _o, Object.keys(r).reduce((a, o) => (a[o.toLowerCase()] = String(r[o]), a), {})), g(this, xt, i == null ? null : new Uint8Array(i)), g(this, Rs, s || null), g(this, Pi, { message: "" });
  }
  toString() {
    return `<FetchResponse status=${this.statusCode} body=${m(this, xt) ? V(m(this, xt)) : "null"}>`;
  }
  /**
   *  The response status code.
   */
  get statusCode() {
    return m(this, Ro);
  }
  /**
   *  The response status message.
   */
  get statusMessage() {
    return m(this, Bo);
  }
  /**
   *  The response headers. All keys are lower-case.
   */
  get headers() {
    return Object.assign({}, m(this, _o));
  }
  /**
   *  The response body, or ``null`` if there was no body.
   */
  get body() {
    return m(this, xt) == null ? null : new Uint8Array(m(this, xt));
  }
  /**
   *  The response body as a UTF-8 encoded string, or the empty
   *  string (i.e. ``""``) if there was no body.
   *
   *  An error is thrown if the body is invalid UTF-8 data.
   */
  get bodyText() {
    try {
      return m(this, xt) == null ? "" : au(m(this, xt));
    } catch {
      G(!1, "response body is not valid UTF-8 data", "UNSUPPORTED_OPERATION", {
        operation: "bodyText",
        info: { response: this }
      });
    }
  }
  /**
   *  The response body, decoded as JSON.
   *
   *  An error is thrown if the body is invalid JSON-encoded data
   *  or if there was no body.
   */
  get bodyJson() {
    try {
      return JSON.parse(this.bodyText);
    } catch {
      G(!1, "response body is not valid JSON", "UNSUPPORTED_OPERATION", {
        operation: "bodyJson",
        info: { response: this }
      });
    }
  }
  [Symbol.iterator]() {
    const e = this.headers, t = Object.keys(e);
    let r = 0;
    return {
      next: () => {
        if (r < t.length) {
          const i = t[r++];
          return {
            value: [i, e[i]],
            done: !1
          };
        }
        return { value: void 0, done: !0 };
      }
    };
  }
  /**
   *  Return a Response with matching headers and body, but with
   *  an error status code (i.e. 599) and %%message%% with an
   *  optional %%error%%.
   */
  makeServerError(e, t) {
    let r;
    e ? r = `CLIENT ESCALATED SERVER ERROR (${this.statusCode} ${this.statusMessage}; ${e})` : (e = `${this.statusCode} ${this.statusMessage}`, r = `CLIENT ESCALATED SERVER ERROR (${e})`);
    const i = new o0(599, r, this.headers, this.body, m(this, Rs) || void 0);
    return g(i, Pi, { message: e, error: t }), i;
  }
  /**
   *  If called within a [request.processFunc](FetchRequest-processFunc)
   *  call, causes the request to retry as if throttled for %%stall%%
   *  milliseconds.
   */
  throwThrottleError(e, t) {
    t == null ? t = -1 : A(Number.isInteger(t) && t >= 0, "invalid stall timeout", "stall", t);
    const r = new Error(e || "throttling requests");
    throw Y(r, { stall: t, throttle: !0 }), r;
  }
  /**
   *  Get the header value for %%key%%, ignoring case.
   */
  getHeader(e) {
    return this.headers[e.toLowerCase()];
  }
  /**
   *  Returns true if the response has a body.
   */
  hasBody() {
    return m(this, xt) != null;
  }
  /**
   *  The request made for this response.
   */
  get request() {
    return m(this, Rs);
  }
  /**
   *  Returns true if this response was a success statusCode.
   */
  ok() {
    return m(this, Pi).message === "" && this.statusCode >= 200 && this.statusCode < 300;
  }
  /**
   *  Throws a ``SERVER_ERROR`` if this response is not ok.
   */
  assertOk() {
    if (this.ok())
      return;
    let { message: e, error: t } = m(this, Pi);
    e === "" && (e = `server response ${this.statusCode} ${this.statusMessage}`);
    let r = null;
    this.request && (r = this.request.url);
    let i = null;
    try {
      m(this, xt) && (i = au(m(this, xt)));
    } catch {
    }
    G(!1, e, "SERVER_ERROR", {
      request: this.request || "unknown request",
      response: this,
      error: t,
      info: {
        requestUrl: r,
        responseBody: i,
        responseStatus: `${this.statusCode} ${this.statusMessage}`
      }
    });
  }
};
Ro = new WeakMap(), Bo = new WeakMap(), _o = new WeakMap(), xt = new WeakMap(), Rs = new WeakMap(), Pi = new WeakMap();
let Qr = o0;
function ap() {
  return (/* @__PURE__ */ new Date()).getTime();
}
function m5(n) {
  return Qe(n.replace(/%([0-9a-f][0-9a-f])/gi, (e, t) => String.fromCharCode(parseInt(t, 16))));
}
function b5(n) {
  return new Promise((e) => setTimeout(e, n));
}
function x5(n) {
  let e = n.toString(16);
  for (; e.length < 2; )
    e = "0" + e;
  return "0x" + e;
}
function op(n, e, t) {
  let r = 0;
  for (let i = 0; i < t; i++)
    r = r * 256 + n[e + i];
  return r;
}
function cp(n, e, t, r) {
  const i = [];
  for (; t < e + 1 + r; ) {
    const s = Lm(n, t);
    i.push(s.result), t += s.consumed, G(t <= e + 1 + r, "child data too short", "BUFFER_OVERRUN", {
      buffer: n,
      length: r,
      offset: e
    });
  }
  return { consumed: 1 + r, result: i };
}
function Lm(n, e) {
  G(n.length !== 0, "data too short", "BUFFER_OVERRUN", {
    buffer: n,
    length: 0,
    offset: 1
  });
  const t = (r) => {
    G(r <= n.length, "data short segment too short", "BUFFER_OVERRUN", {
      buffer: n,
      length: n.length,
      offset: r
    });
  };
  if (n[e] >= 248) {
    const r = n[e] - 247;
    t(e + 1 + r);
    const i = op(n, e + 1, r);
    return t(e + 1 + r + i), cp(n, e, e + 1 + r, r + i);
  } else if (n[e] >= 192) {
    const r = n[e] - 192;
    return t(e + 1 + r), cp(n, e, e + 1, r);
  } else if (n[e] >= 184) {
    const r = n[e] - 183;
    t(e + 1 + r);
    const i = op(n, e + 1, r);
    t(e + 1 + r + i);
    const s = V(n.slice(e + 1 + r, e + 1 + r + i));
    return { consumed: 1 + r + i, result: s };
  } else if (n[e] >= 128) {
    const r = n[e] - 128;
    t(e + 1 + r);
    const i = V(n.slice(e + 1, e + 1 + r));
    return { consumed: 1 + r, result: i };
  }
  return { consumed: 1, result: x5(n[e]) };
}
function Xo(n) {
  const e = K(n, "data"), t = Lm(e, 0);
  return A(t.consumed === e.length, "unexpected junk after rlp payload", "data", n), t.result;
}
function up(n) {
  const e = [];
  for (; n; )
    e.unshift(n & 255), n >>= 8;
  return e;
}
function Mm(n) {
  if (Array.isArray(n)) {
    let r = [];
    if (n.forEach(function(s) {
      r = r.concat(Mm(s));
    }), r.length <= 55)
      return r.unshift(192 + r.length), r;
    const i = up(r.length);
    return i.unshift(247 + i.length), i.concat(r);
  }
  const e = Array.prototype.slice.call(K(n, "object"));
  if (e.length === 1 && e[0] <= 127)
    return e;
  if (e.length <= 55)
    return e.unshift(128 + e.length), e;
  const t = up(e.length);
  return t.unshift(183 + t.length), t.concat(e);
}
const lp = "0123456789abcdef";
function yr(n) {
  let e = "0x";
  for (const t of Mm(n))
    e += lp[t >> 4], e += lp[t & 15];
  return e;
}
function g5(n) {
  const e = K(n, "randomBytes");
  e[6] = e[6] & 15 | 64, e[8] = e[8] & 63 | 128;
  const t = V(e);
  return [
    t.substring(2, 10),
    t.substring(10, 14),
    t.substring(14, 18),
    t.substring(18, 22),
    t.substring(22, 34)
  ].join("-");
}
const et = 32, bd = new Uint8Array(et), w5 = ["then"], gc = {}, Dm = /* @__PURE__ */ new WeakMap();
function ui(n) {
  return Dm.get(n);
}
function dp(n, e) {
  Dm.set(n, e);
}
function Va(n, e) {
  const t = new Error(`deferred error during ABI decoding triggered accessing ${n}`);
  throw t.error = e, t;
}
function xd(n, e, t) {
  return n.indexOf(null) >= 0 ? e.map((r, i) => r instanceof ga ? xd(ui(r), r, t) : r) : n.reduce((r, i, s) => {
    let a = e.getValue(i);
    return i in r || (t && a instanceof ga && (a = xd(ui(a), a, t)), r[i] = a), r;
  }, {});
}
var Bs;
const gs = class gs extends Array {
  /**
   *  @private
   */
  constructor(...t) {
    const r = t[0];
    let i = t[1], s = (t[2] || []).slice(), a = !0;
    r !== gc && (i = t, s = [], a = !1);
    super(i.length);
    // No longer used; but cannot be removed as it will remove the
    // #private field from the .d.ts which may break backwards
    // compatibility
    _(this, Bs);
    i.forEach((u, l) => {
      this[l] = u;
    });
    const o = s.reduce((u, l) => (typeof l == "string" && u.set(l, (u.get(l) || 0) + 1), u), /* @__PURE__ */ new Map());
    if (dp(this, Object.freeze(i.map((u, l) => {
      const d = s[l];
      return d != null && o.get(d) === 1 ? d : null;
    }))), g(this, Bs, []), m(this, Bs) == null && m(this, Bs), !a)
      return;
    Object.freeze(this);
    const c = new Proxy(this, {
      get: (u, l, d) => {
        if (typeof l == "string") {
          if (l.match(/^[0-9]+$/)) {
            const p = te(l, "%index");
            if (p < 0 || p >= this.length)
              throw new RangeError("out of result range");
            const y = u[p];
            return y instanceof Error && Va(`index ${p}`, y), y;
          }
          if (w5.indexOf(l) >= 0)
            return Reflect.get(u, l, d);
          const f = u[l];
          if (f instanceof Function)
            return function(...p) {
              return f.apply(this === d ? u : this, p);
            };
          if (!(l in u))
            return u.getValue.apply(this === d ? u : this, [l]);
        }
        return Reflect.get(u, l, d);
      }
    });
    return dp(c, ui(this)), c;
  }
  /**
   *  Returns the Result as a normal Array. If %%deep%%, any children
   *  which are Result objects are also converted to a normal Array.
   *
   *  This will throw if there are any outstanding deferred
   *  errors.
   */
  toArray(t) {
    const r = [];
    return this.forEach((i, s) => {
      i instanceof Error && Va(`index ${s}`, i), t && i instanceof gs && (i = i.toArray(t)), r.push(i);
    }), r;
  }
  /**
   *  Returns the Result as an Object with each name-value pair. If
   *  %%deep%%, any children which are Result objects are also
   *  converted to an Object.
   *
   *  This will throw if any value is unnamed, or if there are
   *  any outstanding deferred errors.
   */
  toObject(t) {
    const r = ui(this);
    return r.reduce((i, s, a) => (G(s != null, `value at index ${a} unnamed`, "UNSUPPORTED_OPERATION", {
      operation: "toObject()"
    }), xd(r, this, t)), {});
  }
  /**
   *  @_ignore
   */
  slice(t, r) {
    t == null && (t = 0), t < 0 && (t += this.length, t < 0 && (t = 0)), r == null && (r = this.length), r < 0 && (r += this.length, r < 0 && (r = 0)), r > this.length && (r = this.length);
    const i = ui(this), s = [], a = [];
    for (let o = t; o < r; o++)
      s.push(this[o]), a.push(i[o]);
    return new gs(gc, s, a);
  }
  /**
   *  @_ignore
   */
  filter(t, r) {
    const i = ui(this), s = [], a = [];
    for (let o = 0; o < this.length; o++) {
      const c = this[o];
      c instanceof Error && Va(`index ${o}`, c), t.call(r, c, o, this) && (s.push(c), a.push(i[o]));
    }
    return new gs(gc, s, a);
  }
  /**
   *  @_ignore
   */
  map(t, r) {
    const i = [];
    for (let s = 0; s < this.length; s++) {
      const a = this[s];
      a instanceof Error && Va(`index ${s}`, a), i.push(t.call(r, a, s, this));
    }
    return i;
  }
  /**
   *  Returns the value for %%name%%.
   *
   *  Since it is possible to have a key whose name conflicts with
   *  a method on a [[Result]] or its superclass Array, or any
   *  JavaScript keyword, this ensures all named values are still
   *  accessible by name.
   */
  getValue(t) {
    const r = ui(this).indexOf(t);
    if (r === -1)
      return;
    const i = this[r];
    return i instanceof Error && Va(`property ${JSON.stringify(t)}`, i.error), i;
  }
  /**
   *  Creates a new [[Result]] for %%items%% with each entry
   *  also accessible by its corresponding name in %%keys%%.
   */
  static fromItems(t, r) {
    return new gs(gc, t, r);
  }
};
Bs = new WeakMap();
let ga = gs;
function fp(n) {
  let e = Ae(n);
  return G(e.length <= et, "value out-of-bounds", "BUFFER_OVERRUN", { buffer: e, length: et, offset: e.length }), e.length !== et && (e = $e(le([bd.slice(e.length % et), e]))), e;
}
class gr {
  constructor(e, t, r, i) {
    // The coder name:
    //   - address, uint256, tuple, array, etc.
    T(this, "name");
    // The fully expanded type, including composite types:
    //   - address, uint256, tuple(address,bytes), uint256[3][4][],  etc.
    T(this, "type");
    // The localName bound in the signature, in this example it is "baz":
    //   - tuple(address foo, uint bar) baz
    T(this, "localName");
    // Whether this type is dynamic:
    //  - Dynamic: bytes, string, address[], tuple(boolean[]), etc.
    //  - Not Dynamic: address, uint256, boolean[3], tuple(address, uint8)
    T(this, "dynamic");
    Y(this, { name: e, type: t, localName: r, dynamic: i }, {
      name: "string",
      type: "string",
      localName: "string",
      dynamic: "boolean"
    });
  }
  _throwError(e, t) {
    A(!1, e, this.localName, t);
  }
}
var qn, Si, _s, kc;
class gd {
  constructor() {
    _(this, _s);
    // An array of WordSize lengthed objects to concatenation
    _(this, qn);
    _(this, Si);
    g(this, qn, []), g(this, Si, 0);
  }
  get data() {
    return le(m(this, qn));
  }
  get length() {
    return m(this, Si);
  }
  appendWriter(e) {
    return z(this, _s, kc).call(this, $e(e.data));
  }
  // Arrayish item; pad on the right to *nearest* WordSize
  writeBytes(e) {
    let t = $e(e);
    const r = t.length % et;
    return r && (t = $e(le([t, bd.slice(r)]))), z(this, _s, kc).call(this, t);
  }
  // Numeric item; pad on the left *to* WordSize
  writeValue(e) {
    return z(this, _s, kc).call(this, fp(e));
  }
  // Inserts a numeric place-holder, returning a callback that can
  // be used to asjust the value later
  writeUpdatableValue() {
    const e = m(this, qn).length;
    return m(this, qn).push(bd), g(this, Si, m(this, Si) + et), (t) => {
      m(this, qn)[e] = fp(t);
    };
  }
}
qn = new WeakMap(), Si = new WeakMap(), _s = new WeakSet(), kc = function(e) {
  return m(this, qn).push(e), g(this, Si, m(this, Si) + e.length), e.length;
};
var at, gt, Ii, Ci, Br, Yi, Ad, Um;
const c0 = class c0 {
  constructor(e, t, r) {
    _(this, Yi);
    // Allows incomplete unpadded data to be read; otherwise an error
    // is raised if attempting to overrun the buffer. This is required
    // to deal with an old Solidity bug, in which event data for
    // external (not public thoguh) was tightly packed.
    T(this, "allowLoose");
    _(this, at);
    _(this, gt);
    _(this, Ii);
    _(this, Ci);
    _(this, Br);
    Y(this, { allowLoose: !!t }), g(this, at, $e(e)), g(this, Ii, 0), g(this, Ci, null), g(this, Br, r ?? 1024), g(this, gt, 0);
  }
  get data() {
    return V(m(this, at));
  }
  get dataLength() {
    return m(this, at).length;
  }
  get consumed() {
    return m(this, gt);
  }
  get bytes() {
    return new Uint8Array(m(this, at));
  }
  // Create a sub-reader with the same underlying data, but offset
  subReader(e) {
    const t = new c0(m(this, at).slice(m(this, gt) + e), this.allowLoose, m(this, Br));
    return g(t, Ci, this), t;
  }
  // Read bytes
  readBytes(e, t) {
    let r = z(this, Yi, Um).call(this, 0, e, !!t);
    return z(this, Yi, Ad).call(this, e), g(this, gt, m(this, gt) + r.length), r.slice(0, e);
  }
  // Read a numeric values
  readValue() {
    return ju(this.readBytes(et));
  }
  readIndex() {
    return e5(this.readBytes(et));
  }
};
at = new WeakMap(), gt = new WeakMap(), Ii = new WeakMap(), Ci = new WeakMap(), Br = new WeakMap(), Yi = new WeakSet(), Ad = function(e) {
  var t;
  if (m(this, Ci))
    return z(t = m(this, Ci), Yi, Ad).call(t, e);
  g(this, Ii, m(this, Ii) + e), G(m(this, Br) < 1 || m(this, Ii) <= m(this, Br) * this.dataLength, `compressed ABI data exceeds inflation ratio of ${m(this, Br)} ( see: https://github.com/ethers-io/ethers.js/issues/4537 )`, "BUFFER_OVERRUN", {
    buffer: $e(m(this, at)),
    offset: m(this, gt),
    length: e,
    info: {
      bytesRead: m(this, Ii),
      dataLength: this.dataLength
    }
  });
}, Um = function(e, t, r) {
  let i = Math.ceil(t / et) * et;
  return m(this, gt) + i > m(this, at).length && (this.allowLoose && r && m(this, gt) + t <= m(this, at).length ? i = t : G(!1, "data out-of-bounds", "BUFFER_OVERRUN", {
    buffer: $e(m(this, at)),
    length: m(this, at).length,
    offset: m(this, gt) + i
  })), m(this, at).slice(m(this, gt), m(this, gt) + i);
};
let wd = c0;
function At(n) {
  if (!Number.isSafeInteger(n) || n < 0)
    throw new Error(`Wrong positive integer: ${n}`);
}
function kf(n, ...e) {
  if (!(n instanceof Uint8Array))
    throw new Error("Expected Uint8Array");
  if (e.length > 0 && !e.includes(n.length))
    throw new Error(`Expected Uint8Array of length ${e}, not of length=${n.length}`);
}
function Fm(n) {
  if (typeof n != "function" || typeof n.create != "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  At(n.outputLen), At(n.blockLen);
}
function wa(n, e = !0) {
  if (n.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (e && n.finished)
    throw new Error("Hash#digest() has already been called");
}
function Gm(n, e) {
  kf(n);
  const t = e.outputLen;
  if (n.length < t)
    throw new Error(`digestInto() expects output buffer of length at least ${t}`);
}
const Il = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const Hm = (n) => n instanceof Uint8Array, Lc = (n) => new Uint32Array(n.buffer, n.byteOffset, Math.floor(n.byteLength / 4)), Mc = (n) => new DataView(n.buffer, n.byteOffset, n.byteLength), dn = (n, e) => n << 32 - e | n >>> e, A5 = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!A5)
  throw new Error("Non little-endian hardware is not supported");
const E5 = async () => {
};
async function pp(n, e, t) {
  let r = Date.now();
  for (let i = 0; i < n; i++) {
    t(i);
    const s = Date.now() - r;
    s >= 0 && s < e || (await E5(), r += s);
  }
}
function v5(n) {
  if (typeof n != "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof n}`);
  return new Uint8Array(new TextEncoder().encode(n));
}
function Aa(n) {
  if (typeof n == "string" && (n = v5(n)), !Hm(n))
    throw new Error(`expected Uint8Array, got ${typeof n}`);
  return n;
}
function T5(...n) {
  const e = new Uint8Array(n.reduce((r, i) => r + i.length, 0));
  let t = 0;
  return n.forEach((r) => {
    if (!Hm(r))
      throw new Error("Uint8Array expected");
    e.set(r, t), t += r.length;
  }), e;
}
class Lf {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
}
const P5 = {}.toString;
function $m(n, e) {
  if (e !== void 0 && P5.call(e) !== "[object Object]")
    throw new Error("Options should be object or undefined");
  return Object.assign(n, e);
}
function Wu(n) {
  const e = (r) => n().update(Aa(r)).digest(), t = n();
  return e.outputLen = t.outputLen, e.blockLen = t.blockLen, e.create = () => n(), e;
}
function S5(n = 32) {
  if (Il && typeof Il.getRandomValues == "function")
    return Il.getRandomValues(new Uint8Array(n));
  throw new Error("crypto.getRandomValues must be defined");
}
class Vm extends Lf {
  constructor(e, t) {
    super(), this.finished = !1, this.destroyed = !1, Fm(e);
    const r = Aa(t);
    if (this.iHash = e.create(), typeof this.iHash.update != "function")
      throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const i = this.blockLen, s = new Uint8Array(i);
    s.set(r.length > i ? e.create().update(r).digest() : r);
    for (let a = 0; a < s.length; a++)
      s[a] ^= 54;
    this.iHash.update(s), this.oHash = e.create();
    for (let a = 0; a < s.length; a++)
      s[a] ^= 106;
    this.oHash.update(s), s.fill(0);
  }
  update(e) {
    return wa(this), this.iHash.update(e), this;
  }
  digestInto(e) {
    wa(this), kf(e, this.outputLen), this.finished = !0, this.iHash.digestInto(e), this.oHash.update(e), this.oHash.digestInto(e), this.destroy();
  }
  digest() {
    const e = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(e), e;
  }
  _cloneInto(e) {
    e || (e = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: t, iHash: r, finished: i, destroyed: s, blockLen: a, outputLen: o } = this;
    return e = e, e.finished = i, e.destroyed = s, e.blockLen = a, e.outputLen = o, e.oHash = t._cloneInto(e.oHash), e.iHash = r._cloneInto(e.iHash), e;
  }
  destroy() {
    this.destroyed = !0, this.oHash.destroy(), this.iHash.destroy();
  }
}
const Ku = (n, e, t) => new Vm(n, e).update(t).digest();
Ku.create = (n, e) => new Vm(n, e);
function I5(n, e, t, r) {
  Fm(n);
  const i = $m({ dkLen: 32, asyncTick: 10 }, r), { c: s, dkLen: a, asyncTick: o } = i;
  if (At(s), At(a), At(o), s < 1)
    throw new Error("PBKDF2: iterations (c) should be >= 1");
  const c = Aa(e), u = Aa(t), l = new Uint8Array(a), d = Ku.create(n, c), f = d._cloneInto().update(u);
  return { c: s, dkLen: a, asyncTick: o, DK: l, PRF: d, PRFSalt: f };
}
function C5(n, e, t, r, i) {
  return n.destroy(), e.destroy(), r && r.destroy(), i.fill(0), t;
}
function Mf(n, e, t, r) {
  const { c: i, dkLen: s, DK: a, PRF: o, PRFSalt: c } = I5(n, e, t, r);
  let u;
  const l = new Uint8Array(4), d = Mc(l), f = new Uint8Array(o.outputLen);
  for (let p = 1, y = 0; y < s; p++, y += o.outputLen) {
    const h = a.subarray(y, y + o.outputLen);
    d.setInt32(0, p, !1), (u = c._cloneInto(u)).update(l).digestInto(f), h.set(f.subarray(0, h.length));
    for (let b = 1; b < i; b++) {
      o._cloneInto(u).update(f).digestInto(f);
      for (let x = 0; x < h.length; x++)
        h[x] ^= f[x];
    }
  }
  return C5(o, c, a, u, f);
}
function O5(n, e, t, r) {
  if (typeof n.setBigUint64 == "function")
    return n.setBigUint64(e, t, r);
  const i = BigInt(32), s = BigInt(4294967295), a = Number(t >> i & s), o = Number(t & s), c = r ? 4 : 0, u = r ? 0 : 4;
  n.setUint32(e + c, a, r), n.setUint32(e + u, o, r);
}
class Df extends Lf {
  constructor(e, t, r, i) {
    super(), this.blockLen = e, this.outputLen = t, this.padOffset = r, this.isLE = i, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(e), this.view = Mc(this.buffer);
  }
  update(e) {
    wa(this);
    const { view: t, buffer: r, blockLen: i } = this;
    e = Aa(e);
    const s = e.length;
    for (let a = 0; a < s; ) {
      const o = Math.min(i - this.pos, s - a);
      if (o === i) {
        const c = Mc(e);
        for (; i <= s - a; a += i)
          this.process(c, a);
        continue;
      }
      r.set(e.subarray(a, a + o), this.pos), this.pos += o, a += o, this.pos === i && (this.process(t, 0), this.pos = 0);
    }
    return this.length += e.length, this.roundClean(), this;
  }
  digestInto(e) {
    wa(this), Gm(e, this), this.finished = !0;
    const { buffer: t, view: r, blockLen: i, isLE: s } = this;
    let { pos: a } = this;
    t[a++] = 128, this.buffer.subarray(a).fill(0), this.padOffset > i - a && (this.process(r, 0), a = 0);
    for (let d = a; d < i; d++)
      t[d] = 0;
    O5(r, i - 8, BigInt(this.length * 8), s), this.process(r, 0);
    const o = Mc(e), c = this.outputLen;
    if (c % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const u = c / 4, l = this.get();
    if (u > l.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let d = 0; d < u; d++)
      o.setUint32(4 * d, l[d], s);
  }
  digest() {
    const { buffer: e, outputLen: t } = this;
    this.digestInto(e);
    const r = e.slice(0, t);
    return this.destroy(), r;
  }
  _cloneInto(e) {
    e || (e = new this.constructor()), e.set(...this.get());
    const { blockLen: t, buffer: r, length: i, finished: s, destroyed: a, pos: o } = this;
    return e.length = i, e.pos = o, e.finished = s, e.destroyed = a, i % t && e.buffer.set(r), e;
  }
}
const N5 = (n, e, t) => n & e ^ ~n & t, R5 = (n, e, t) => n & e ^ n & t ^ e & t, B5 = /* @__PURE__ */ new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]), Tr = /* @__PURE__ */ new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]), Pr = /* @__PURE__ */ new Uint32Array(64);
class _5 extends Df {
  constructor() {
    super(64, 32, 8, !1), this.A = Tr[0] | 0, this.B = Tr[1] | 0, this.C = Tr[2] | 0, this.D = Tr[3] | 0, this.E = Tr[4] | 0, this.F = Tr[5] | 0, this.G = Tr[6] | 0, this.H = Tr[7] | 0;
  }
  get() {
    const { A: e, B: t, C: r, D: i, E: s, F: a, G: o, H: c } = this;
    return [e, t, r, i, s, a, o, c];
  }
  // prettier-ignore
  set(e, t, r, i, s, a, o, c) {
    this.A = e | 0, this.B = t | 0, this.C = r | 0, this.D = i | 0, this.E = s | 0, this.F = a | 0, this.G = o | 0, this.H = c | 0;
  }
  process(e, t) {
    for (let d = 0; d < 16; d++, t += 4)
      Pr[d] = e.getUint32(t, !1);
    for (let d = 16; d < 64; d++) {
      const f = Pr[d - 15], p = Pr[d - 2], y = dn(f, 7) ^ dn(f, 18) ^ f >>> 3, h = dn(p, 17) ^ dn(p, 19) ^ p >>> 10;
      Pr[d] = h + Pr[d - 7] + y + Pr[d - 16] | 0;
    }
    let { A: r, B: i, C: s, D: a, E: o, F: c, G: u, H: l } = this;
    for (let d = 0; d < 64; d++) {
      const f = dn(o, 6) ^ dn(o, 11) ^ dn(o, 25), p = l + f + N5(o, c, u) + B5[d] + Pr[d] | 0, h = (dn(r, 2) ^ dn(r, 13) ^ dn(r, 22)) + R5(r, i, s) | 0;
      l = u, u = c, c = o, o = a + p | 0, a = s, s = i, i = r, r = p + h | 0;
    }
    r = r + this.A | 0, i = i + this.B | 0, s = s + this.C | 0, a = a + this.D | 0, o = o + this.E | 0, c = c + this.F | 0, u = u + this.G | 0, l = l + this.H | 0, this.set(r, i, s, a, o, c, u, l);
  }
  roundClean() {
    Pr.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
}
const Ba = /* @__PURE__ */ Wu(() => new _5()), wc = /* @__PURE__ */ BigInt(2 ** 32 - 1), Ed = /* @__PURE__ */ BigInt(32);
function zm(n, e = !1) {
  return e ? { h: Number(n & wc), l: Number(n >> Ed & wc) } : { h: Number(n >> Ed & wc) | 0, l: Number(n & wc) | 0 };
}
function jm(n, e = !1) {
  let t = new Uint32Array(n.length), r = new Uint32Array(n.length);
  for (let i = 0; i < n.length; i++) {
    const { h: s, l: a } = zm(n[i], e);
    [t[i], r[i]] = [s, a];
  }
  return [t, r];
}
const k5 = (n, e) => BigInt(n >>> 0) << Ed | BigInt(e >>> 0), L5 = (n, e, t) => n >>> t, M5 = (n, e, t) => n << 32 - t | e >>> t, D5 = (n, e, t) => n >>> t | e << 32 - t, U5 = (n, e, t) => n << 32 - t | e >>> t, F5 = (n, e, t) => n << 64 - t | e >>> t - 32, G5 = (n, e, t) => n >>> t - 32 | e << 64 - t, H5 = (n, e) => e, $5 = (n, e) => n, Wm = (n, e, t) => n << t | e >>> 32 - t, Km = (n, e, t) => e << t | n >>> 32 - t, Qm = (n, e, t) => e << t - 32 | n >>> 64 - t, qm = (n, e, t) => n << t - 32 | e >>> 64 - t;
function V5(n, e, t, r) {
  const i = (e >>> 0) + (r >>> 0);
  return { h: n + t + (i / 2 ** 32 | 0) | 0, l: i | 0 };
}
const z5 = (n, e, t) => (n >>> 0) + (e >>> 0) + (t >>> 0), j5 = (n, e, t, r) => e + t + r + (n / 2 ** 32 | 0) | 0, W5 = (n, e, t, r) => (n >>> 0) + (e >>> 0) + (t >>> 0) + (r >>> 0), K5 = (n, e, t, r, i) => e + t + r + i + (n / 2 ** 32 | 0) | 0, Q5 = (n, e, t, r, i) => (n >>> 0) + (e >>> 0) + (t >>> 0) + (r >>> 0) + (i >>> 0), q5 = (n, e, t, r, i, s) => e + t + r + i + s + (n / 2 ** 32 | 0) | 0, ee = {
  fromBig: zm,
  split: jm,
  toBig: k5,
  shrSH: L5,
  shrSL: M5,
  rotrSH: D5,
  rotrSL: U5,
  rotrBH: F5,
  rotrBL: G5,
  rotr32H: H5,
  rotr32L: $5,
  rotlSH: Wm,
  rotlSL: Km,
  rotlBH: Qm,
  rotlBL: qm,
  add: V5,
  add3L: z5,
  add3H: j5,
  add4L: W5,
  add4H: K5,
  add5H: q5,
  add5L: Q5
}, [J5, Y5] = ee.split([
  "0x428a2f98d728ae22",
  "0x7137449123ef65cd",
  "0xb5c0fbcfec4d3b2f",
  "0xe9b5dba58189dbbc",
  "0x3956c25bf348b538",
  "0x59f111f1b605d019",
  "0x923f82a4af194f9b",
  "0xab1c5ed5da6d8118",
  "0xd807aa98a3030242",
  "0x12835b0145706fbe",
  "0x243185be4ee4b28c",
  "0x550c7dc3d5ffb4e2",
  "0x72be5d74f27b896f",
  "0x80deb1fe3b1696b1",
  "0x9bdc06a725c71235",
  "0xc19bf174cf692694",
  "0xe49b69c19ef14ad2",
  "0xefbe4786384f25e3",
  "0x0fc19dc68b8cd5b5",
  "0x240ca1cc77ac9c65",
  "0x2de92c6f592b0275",
  "0x4a7484aa6ea6e483",
  "0x5cb0a9dcbd41fbd4",
  "0x76f988da831153b5",
  "0x983e5152ee66dfab",
  "0xa831c66d2db43210",
  "0xb00327c898fb213f",
  "0xbf597fc7beef0ee4",
  "0xc6e00bf33da88fc2",
  "0xd5a79147930aa725",
  "0x06ca6351e003826f",
  "0x142929670a0e6e70",
  "0x27b70a8546d22ffc",
  "0x2e1b21385c26c926",
  "0x4d2c6dfc5ac42aed",
  "0x53380d139d95b3df",
  "0x650a73548baf63de",
  "0x766a0abb3c77b2a8",
  "0x81c2c92e47edaee6",
  "0x92722c851482353b",
  "0xa2bfe8a14cf10364",
  "0xa81a664bbc423001",
  "0xc24b8b70d0f89791",
  "0xc76c51a30654be30",
  "0xd192e819d6ef5218",
  "0xd69906245565a910",
  "0xf40e35855771202a",
  "0x106aa07032bbd1b8",
  "0x19a4c116b8d2d0c8",
  "0x1e376c085141ab53",
  "0x2748774cdf8eeb99",
  "0x34b0bcb5e19b48a8",
  "0x391c0cb3c5c95a63",
  "0x4ed8aa4ae3418acb",
  "0x5b9cca4f7763e373",
  "0x682e6ff3d6b2b8a3",
  "0x748f82ee5defb2fc",
  "0x78a5636f43172f60",
  "0x84c87814a1f0ab72",
  "0x8cc702081a6439ec",
  "0x90befffa23631e28",
  "0xa4506cebde82bde9",
  "0xbef9a3f7b2c67915",
  "0xc67178f2e372532b",
  "0xca273eceea26619c",
  "0xd186b8c721c0c207",
  "0xeada7dd6cde0eb1e",
  "0xf57d4f7fee6ed178",
  "0x06f067aa72176fba",
  "0x0a637dc5a2c898a6",
  "0x113f9804bef90dae",
  "0x1b710b35131c471b",
  "0x28db77f523047d84",
  "0x32caab7b40c72493",
  "0x3c9ebe0a15c9bebc",
  "0x431d67c49c100d4c",
  "0x4cc5d4becb3e42b6",
  "0x597f299cfc657e2a",
  "0x5fcb6fab3ad6faec",
  "0x6c44198c4a475817"
].map((n) => BigInt(n))), Sr = /* @__PURE__ */ new Uint32Array(80), Ir = /* @__PURE__ */ new Uint32Array(80);
class Z5 extends Df {
  constructor() {
    super(128, 64, 16, !1), this.Ah = 1779033703, this.Al = -205731576, this.Bh = -1150833019, this.Bl = -2067093701, this.Ch = 1013904242, this.Cl = -23791573, this.Dh = -1521486534, this.Dl = 1595750129, this.Eh = 1359893119, this.El = -1377402159, this.Fh = -1694144372, this.Fl = 725511199, this.Gh = 528734635, this.Gl = -79577749, this.Hh = 1541459225, this.Hl = 327033209;
  }
  // prettier-ignore
  get() {
    const { Ah: e, Al: t, Bh: r, Bl: i, Ch: s, Cl: a, Dh: o, Dl: c, Eh: u, El: l, Fh: d, Fl: f, Gh: p, Gl: y, Hh: h, Hl: b } = this;
    return [e, t, r, i, s, a, o, c, u, l, d, f, p, y, h, b];
  }
  // prettier-ignore
  set(e, t, r, i, s, a, o, c, u, l, d, f, p, y, h, b) {
    this.Ah = e | 0, this.Al = t | 0, this.Bh = r | 0, this.Bl = i | 0, this.Ch = s | 0, this.Cl = a | 0, this.Dh = o | 0, this.Dl = c | 0, this.Eh = u | 0, this.El = l | 0, this.Fh = d | 0, this.Fl = f | 0, this.Gh = p | 0, this.Gl = y | 0, this.Hh = h | 0, this.Hl = b | 0;
  }
  process(e, t) {
    for (let E = 0; E < 16; E++, t += 4)
      Sr[E] = e.getUint32(t), Ir[E] = e.getUint32(t += 4);
    for (let E = 16; E < 80; E++) {
      const N = Sr[E - 15] | 0, I = Ir[E - 15] | 0, B = ee.rotrSH(N, I, 1) ^ ee.rotrSH(N, I, 8) ^ ee.shrSH(N, I, 7), U = ee.rotrSL(N, I, 1) ^ ee.rotrSL(N, I, 8) ^ ee.shrSL(N, I, 7), C = Sr[E - 2] | 0, v = Ir[E - 2] | 0, L = ee.rotrSH(C, v, 19) ^ ee.rotrBH(C, v, 61) ^ ee.shrSH(C, v, 6), O = ee.rotrSL(C, v, 19) ^ ee.rotrBL(C, v, 61) ^ ee.shrSL(C, v, 6), R = ee.add4L(U, O, Ir[E - 7], Ir[E - 16]), F = ee.add4H(R, B, L, Sr[E - 7], Sr[E - 16]);
      Sr[E] = F | 0, Ir[E] = R | 0;
    }
    let { Ah: r, Al: i, Bh: s, Bl: a, Ch: o, Cl: c, Dh: u, Dl: l, Eh: d, El: f, Fh: p, Fl: y, Gh: h, Gl: b, Hh: x, Hl: w } = this;
    for (let E = 0; E < 80; E++) {
      const N = ee.rotrSH(d, f, 14) ^ ee.rotrSH(d, f, 18) ^ ee.rotrBH(d, f, 41), I = ee.rotrSL(d, f, 14) ^ ee.rotrSL(d, f, 18) ^ ee.rotrBL(d, f, 41), B = d & p ^ ~d & h, U = f & y ^ ~f & b, C = ee.add5L(w, I, U, Y5[E], Ir[E]), v = ee.add5H(C, x, N, B, J5[E], Sr[E]), L = C | 0, O = ee.rotrSH(r, i, 28) ^ ee.rotrBH(r, i, 34) ^ ee.rotrBH(r, i, 39), R = ee.rotrSL(r, i, 28) ^ ee.rotrBL(r, i, 34) ^ ee.rotrBL(r, i, 39), F = r & s ^ r & o ^ s & o, M = i & a ^ i & c ^ a & c;
      x = h | 0, w = b | 0, h = p | 0, b = y | 0, p = d | 0, y = f | 0, { h: d, l: f } = ee.add(u | 0, l | 0, v | 0, L | 0), u = o | 0, l = c | 0, o = s | 0, c = a | 0, s = r | 0, a = i | 0;
      const P = ee.add3L(L, R, M);
      r = ee.add3H(P, v, O, F), i = P | 0;
    }
    ({ h: r, l: i } = ee.add(this.Ah | 0, this.Al | 0, r | 0, i | 0)), { h: s, l: a } = ee.add(this.Bh | 0, this.Bl | 0, s | 0, a | 0), { h: o, l: c } = ee.add(this.Ch | 0, this.Cl | 0, o | 0, c | 0), { h: u, l } = ee.add(this.Dh | 0, this.Dl | 0, u | 0, l | 0), { h: d, l: f } = ee.add(this.Eh | 0, this.El | 0, d | 0, f | 0), { h: p, l: y } = ee.add(this.Fh | 0, this.Fl | 0, p | 0, y | 0), { h, l: b } = ee.add(this.Gh | 0, this.Gl | 0, h | 0, b | 0), { h: x, l: w } = ee.add(this.Hh | 0, this.Hl | 0, x | 0, w | 0), this.set(r, i, s, a, o, c, u, l, d, f, p, y, h, b, x, w);
  }
  roundClean() {
    Sr.fill(0), Ir.fill(0);
  }
  destroy() {
    this.buffer.fill(0), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
}
const Uf = /* @__PURE__ */ Wu(() => new Z5());
function X5() {
  if (typeof self < "u")
    return self;
  if (typeof window < "u")
    return window;
  if (typeof global < "u")
    return global;
  throw new Error("unable to locate global object");
}
const hp = X5(), yp = hp.crypto || hp.msCrypto;
function e3(n) {
  switch (n) {
    case "sha256":
      return Ba.create();
    case "sha512":
      return Uf.create();
  }
  A(!1, "invalid hashing algorithm name", "algorithm", n);
}
function t3(n, e) {
  const t = { sha256: Ba, sha512: Uf }[n];
  return A(t != null, "invalid hmac algorithm", "algorithm", n), Ku.create(t, e);
}
function n3(n, e, t, r, i) {
  const s = { sha256: Ba, sha512: Uf }[i];
  return A(s != null, "invalid pbkdf2 algorithm", "algorithm", i), Mf(s, n, e, { c: t, dkLen: r });
}
function r3(n) {
  G(yp != null, "platform does not support secure random numbers", "UNSUPPORTED_OPERATION", {
    operation: "randomBytes"
  }), A(Number.isInteger(n) && n > 0 && n <= 1024, "invalid length", "length", n);
  const e = new Uint8Array(n);
  return yp.getRandomValues(e), e;
}
let Jm = !1;
const Ym = function(n, e, t) {
  return t3(n, e).update(t).digest();
};
let Zm = Ym;
function _a(n, e, t) {
  const r = K(e, "key"), i = K(t, "data");
  return V(Zm(n, r, i));
}
_a._ = Ym;
_a.lock = function() {
  Jm = !0;
};
_a.register = function(n) {
  if (Jm)
    throw new Error("computeHmac is locked");
  Zm = n;
};
Object.freeze(_a);
const [Xm, eb, tb] = [[], [], []], i3 = /* @__PURE__ */ BigInt(0), za = /* @__PURE__ */ BigInt(1), s3 = /* @__PURE__ */ BigInt(2), a3 = /* @__PURE__ */ BigInt(7), o3 = /* @__PURE__ */ BigInt(256), c3 = /* @__PURE__ */ BigInt(113);
for (let n = 0, e = za, t = 1, r = 0; n < 24; n++) {
  [t, r] = [r, (2 * t + 3 * r) % 5], Xm.push(2 * (5 * r + t)), eb.push((n + 1) * (n + 2) / 2 % 64);
  let i = i3;
  for (let s = 0; s < 7; s++)
    e = (e << za ^ (e >> a3) * c3) % o3, e & s3 && (i ^= za << (za << /* @__PURE__ */ BigInt(s)) - za);
  tb.push(i);
}
const [u3, l3] = /* @__PURE__ */ jm(tb, !0), mp = (n, e, t) => t > 32 ? Qm(n, e, t) : Wm(n, e, t), bp = (n, e, t) => t > 32 ? qm(n, e, t) : Km(n, e, t);
function d3(n, e = 24) {
  const t = new Uint32Array(10);
  for (let r = 24 - e; r < 24; r++) {
    for (let a = 0; a < 10; a++)
      t[a] = n[a] ^ n[a + 10] ^ n[a + 20] ^ n[a + 30] ^ n[a + 40];
    for (let a = 0; a < 10; a += 2) {
      const o = (a + 8) % 10, c = (a + 2) % 10, u = t[c], l = t[c + 1], d = mp(u, l, 1) ^ t[o], f = bp(u, l, 1) ^ t[o + 1];
      for (let p = 0; p < 50; p += 10)
        n[a + p] ^= d, n[a + p + 1] ^= f;
    }
    let i = n[2], s = n[3];
    for (let a = 0; a < 24; a++) {
      const o = eb[a], c = mp(i, s, o), u = bp(i, s, o), l = Xm[a];
      i = n[l], s = n[l + 1], n[l] = c, n[l + 1] = u;
    }
    for (let a = 0; a < 50; a += 10) {
      for (let o = 0; o < 10; o++)
        t[o] = n[a + o];
      for (let o = 0; o < 10; o++)
        n[a + o] ^= ~t[(o + 2) % 10] & t[(o + 4) % 10];
    }
    n[0] ^= u3[r], n[1] ^= l3[r];
  }
  t.fill(0);
}
class Ff extends Lf {
  // NOTE: we accept arguments in bytes instead of bits here.
  constructor(e, t, r, i = !1, s = 24) {
    if (super(), this.blockLen = e, this.suffix = t, this.outputLen = r, this.enableXOF = i, this.rounds = s, this.pos = 0, this.posOut = 0, this.finished = !1, this.destroyed = !1, At(r), 0 >= this.blockLen || this.blockLen >= 200)
      throw new Error("Sha3 supports only keccak-f1600 function");
    this.state = new Uint8Array(200), this.state32 = Lc(this.state);
  }
  keccak() {
    d3(this.state32, this.rounds), this.posOut = 0, this.pos = 0;
  }
  update(e) {
    wa(this);
    const { blockLen: t, state: r } = this;
    e = Aa(e);
    const i = e.length;
    for (let s = 0; s < i; ) {
      const a = Math.min(t - this.pos, i - s);
      for (let o = 0; o < a; o++)
        r[this.pos++] ^= e[s++];
      this.pos === t && this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished)
      return;
    this.finished = !0;
    const { state: e, suffix: t, pos: r, blockLen: i } = this;
    e[r] ^= t, t & 128 && r === i - 1 && this.keccak(), e[i - 1] ^= 128, this.keccak();
  }
  writeInto(e) {
    wa(this, !1), kf(e), this.finish();
    const t = this.state, { blockLen: r } = this;
    for (let i = 0, s = e.length; i < s; ) {
      this.posOut >= r && this.keccak();
      const a = Math.min(r - this.posOut, s - i);
      e.set(t.subarray(this.posOut, this.posOut + a), i), this.posOut += a, i += a;
    }
    return e;
  }
  xofInto(e) {
    if (!this.enableXOF)
      throw new Error("XOF is not possible for this instance");
    return this.writeInto(e);
  }
  xof(e) {
    return At(e), this.xofInto(new Uint8Array(e));
  }
  digestInto(e) {
    if (Gm(e, this), this.finished)
      throw new Error("digest() was already called");
    return this.writeInto(e), this.destroy(), e;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = !0, this.state.fill(0);
  }
  _cloneInto(e) {
    const { blockLen: t, suffix: r, outputLen: i, rounds: s, enableXOF: a } = this;
    return e || (e = new Ff(t, r, i, a, s)), e.state32.set(this.state32), e.pos = this.pos, e.posOut = this.posOut, e.finished = this.finished, e.rounds = s, e.suffix = r, e.outputLen = i, e.enableXOF = a, e.destroyed = this.destroyed, e;
  }
}
const f3 = (n, e, t) => Wu(() => new Ff(e, n, t)), p3 = /* @__PURE__ */ f3(1, 136, 256 / 8);
let nb = !1;
const rb = function(n) {
  return p3(n);
};
let ib = rb;
function pe(n) {
  const e = K(n, "data");
  return V(ib(e));
}
pe._ = rb;
pe.lock = function() {
  nb = !0;
};
pe.register = function(n) {
  if (nb)
    throw new TypeError("keccak256 is locked");
  ib = n;
};
Object.freeze(pe);
const h3 = /* @__PURE__ */ new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]), sb = /* @__PURE__ */ Uint8Array.from({ length: 16 }, (n, e) => e), y3 = /* @__PURE__ */ sb.map((n) => (9 * n + 5) % 16);
let Gf = [sb], Hf = [y3];
for (let n = 0; n < 4; n++)
  for (let e of [Gf, Hf])
    e.push(e[n].map((t) => h3[t]));
const ab = /* @__PURE__ */ [
  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
].map((n) => new Uint8Array(n)), m3 = /* @__PURE__ */ Gf.map((n, e) => n.map((t) => ab[e][t])), b3 = /* @__PURE__ */ Hf.map((n, e) => n.map((t) => ab[e][t])), x3 = /* @__PURE__ */ new Uint32Array([
  0,
  1518500249,
  1859775393,
  2400959708,
  2840853838
]), g3 = /* @__PURE__ */ new Uint32Array([
  1352829926,
  1548603684,
  1836072691,
  2053994217,
  0
]), Ac = (n, e) => n << e | n >>> 32 - e;
function xp(n, e, t, r) {
  return n === 0 ? e ^ t ^ r : n === 1 ? e & t | ~e & r : n === 2 ? (e | ~t) ^ r : n === 3 ? e & r | t & ~r : e ^ (t | ~r);
}
const Ec = /* @__PURE__ */ new Uint32Array(16);
class w3 extends Df {
  constructor() {
    super(64, 20, 8, !0), this.h0 = 1732584193, this.h1 = -271733879, this.h2 = -1732584194, this.h3 = 271733878, this.h4 = -1009589776;
  }
  get() {
    const { h0: e, h1: t, h2: r, h3: i, h4: s } = this;
    return [e, t, r, i, s];
  }
  set(e, t, r, i, s) {
    this.h0 = e | 0, this.h1 = t | 0, this.h2 = r | 0, this.h3 = i | 0, this.h4 = s | 0;
  }
  process(e, t) {
    for (let p = 0; p < 16; p++, t += 4)
      Ec[p] = e.getUint32(t, !0);
    let r = this.h0 | 0, i = r, s = this.h1 | 0, a = s, o = this.h2 | 0, c = o, u = this.h3 | 0, l = u, d = this.h4 | 0, f = d;
    for (let p = 0; p < 5; p++) {
      const y = 4 - p, h = x3[p], b = g3[p], x = Gf[p], w = Hf[p], E = m3[p], N = b3[p];
      for (let I = 0; I < 16; I++) {
        const B = Ac(r + xp(p, s, o, u) + Ec[x[I]] + h, E[I]) + d | 0;
        r = d, d = u, u = Ac(o, 10) | 0, o = s, s = B;
      }
      for (let I = 0; I < 16; I++) {
        const B = Ac(i + xp(y, a, c, l) + Ec[w[I]] + b, N[I]) + f | 0;
        i = f, f = l, l = Ac(c, 10) | 0, c = a, a = B;
      }
    }
    this.set(this.h1 + o + l | 0, this.h2 + u + f | 0, this.h3 + d + i | 0, this.h4 + r + a | 0, this.h0 + s + c | 0);
  }
  roundClean() {
    Ec.fill(0);
  }
  destroy() {
    this.destroyed = !0, this.buffer.fill(0), this.set(0, 0, 0, 0, 0);
  }
}
const A3 = /* @__PURE__ */ Wu(() => new w3());
let ob = !1;
const cb = function(n) {
  return A3(n);
};
let ub = cb;
function ka(n) {
  const e = K(n, "data");
  return V(ub(e));
}
ka._ = cb;
ka.lock = function() {
  ob = !0;
};
ka.register = function(n) {
  if (ob)
    throw new TypeError("ripemd160 is locked");
  ub = n;
};
Object.freeze(ka);
let lb = !1;
const db = function(n, e, t, r, i) {
  return n3(n, e, t, r, i);
};
let fb = db;
function ti(n, e, t, r, i) {
  const s = K(n, "password"), a = K(e, "salt");
  return V(fb(s, a, t, r, i));
}
ti._ = db;
ti.lock = function() {
  lb = !0;
};
ti.register = function(n) {
  if (lb)
    throw new Error("pbkdf2 is locked");
  fb = n;
};
Object.freeze(ti);
let pb = !1;
const hb = function(n) {
  return new Uint8Array(r3(n));
};
let yb = hb;
function cr(n) {
  return yb(n);
}
cr._ = hb;
cr.lock = function() {
  pb = !0;
};
cr.register = function(n) {
  if (pb)
    throw new Error("randomBytes is locked");
  yb = n;
};
Object.freeze(cr);
const de = (n, e) => n << e | n >>> 32 - e;
function gp(n, e, t, r, i, s) {
  let a = n[e++] ^ t[r++], o = n[e++] ^ t[r++], c = n[e++] ^ t[r++], u = n[e++] ^ t[r++], l = n[e++] ^ t[r++], d = n[e++] ^ t[r++], f = n[e++] ^ t[r++], p = n[e++] ^ t[r++], y = n[e++] ^ t[r++], h = n[e++] ^ t[r++], b = n[e++] ^ t[r++], x = n[e++] ^ t[r++], w = n[e++] ^ t[r++], E = n[e++] ^ t[r++], N = n[e++] ^ t[r++], I = n[e++] ^ t[r++], B = a, U = o, C = c, v = u, L = l, O = d, R = f, F = p, M = y, P = h, S = b, k = x, D = w, $ = E, H = N, W = I;
  for (let X = 0; X < 8; X += 2)
    L ^= de(B + D | 0, 7), M ^= de(L + B | 0, 9), D ^= de(M + L | 0, 13), B ^= de(D + M | 0, 18), P ^= de(O + U | 0, 7), $ ^= de(P + O | 0, 9), U ^= de($ + P | 0, 13), O ^= de(U + $ | 0, 18), H ^= de(S + R | 0, 7), C ^= de(H + S | 0, 9), R ^= de(C + H | 0, 13), S ^= de(R + C | 0, 18), v ^= de(W + k | 0, 7), F ^= de(v + W | 0, 9), k ^= de(F + v | 0, 13), W ^= de(k + F | 0, 18), U ^= de(B + v | 0, 7), C ^= de(U + B | 0, 9), v ^= de(C + U | 0, 13), B ^= de(v + C | 0, 18), R ^= de(O + L | 0, 7), F ^= de(R + O | 0, 9), L ^= de(F + R | 0, 13), O ^= de(L + F | 0, 18), k ^= de(S + P | 0, 7), M ^= de(k + S | 0, 9), P ^= de(M + k | 0, 13), S ^= de(P + M | 0, 18), D ^= de(W + H | 0, 7), $ ^= de(D + W | 0, 9), H ^= de($ + D | 0, 13), W ^= de(H + $ | 0, 18);
  i[s++] = a + B | 0, i[s++] = o + U | 0, i[s++] = c + C | 0, i[s++] = u + v | 0, i[s++] = l + L | 0, i[s++] = d + O | 0, i[s++] = f + R | 0, i[s++] = p + F | 0, i[s++] = y + M | 0, i[s++] = h + P | 0, i[s++] = b + S | 0, i[s++] = x + k | 0, i[s++] = w + D | 0, i[s++] = E + $ | 0, i[s++] = N + H | 0, i[s++] = I + W | 0;
}
function vs(n, e, t, r, i) {
  let s = r + 0, a = r + 16 * i;
  for (let o = 0; o < 16; o++)
    t[a + o] = n[e + (2 * i - 1) * 16 + o];
  for (let o = 0; o < i; o++, s += 16, e += 16)
    gp(t, a, n, e, t, s), o > 0 && (a += 16), gp(t, s, n, e += 16, t, a);
}
function mb(n, e, t) {
  const r = $m({
    dkLen: 32,
    asyncTick: 10,
    maxmem: 1073742848
  }, t), { N: i, r: s, p: a, dkLen: o, asyncTick: c, maxmem: u, onProgress: l } = r;
  if (At(i), At(s), At(a), At(o), At(c), At(u), l !== void 0 && typeof l != "function")
    throw new Error("progressCb should be function");
  const d = 128 * s, f = d / 4;
  if (i <= 1 || i & i - 1 || i >= 2 ** (d / 8) || i > 2 ** 32)
    throw new Error("Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32");
  if (a < 0 || a > (2 ** 32 - 1) * 32 / d)
    throw new Error("Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)");
  if (o < 0 || o > (2 ** 32 - 1) * 32)
    throw new Error("Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32");
  const p = d * (i + a);
  if (p > u)
    throw new Error(`Scrypt: parameters too large, ${p} (128 * r * (N + p)) > ${u} (maxmem)`);
  const y = Mf(Ba, n, e, { c: 1, dkLen: d * a }), h = Lc(y), b = Lc(new Uint8Array(d * i)), x = Lc(new Uint8Array(d));
  let w = () => {
  };
  if (l) {
    const E = 2 * i * a, N = Math.max(Math.floor(E / 1e4), 1);
    let I = 0;
    w = () => {
      I++, l && (!(I % N) || I === E) && l(I / E);
    };
  }
  return { N: i, r: s, p: a, dkLen: o, blockSize32: f, V: b, B32: h, B: y, tmp: x, blockMixCb: w, asyncTick: c };
}
function bb(n, e, t, r, i) {
  const s = Mf(Ba, n, t, { c: 1, dkLen: e });
  return t.fill(0), r.fill(0), i.fill(0), s;
}
function E3(n, e, t) {
  const { N: r, r: i, p: s, dkLen: a, blockSize32: o, V: c, B32: u, B: l, tmp: d, blockMixCb: f } = mb(n, e, t);
  for (let p = 0; p < s; p++) {
    const y = o * p;
    for (let h = 0; h < o; h++)
      c[h] = u[y + h];
    for (let h = 0, b = 0; h < r - 1; h++)
      vs(c, b, c, b += o, i), f();
    vs(c, (r - 1) * o, u, y, i), f();
    for (let h = 0; h < r; h++) {
      const b = u[y + o - 16] % r;
      for (let x = 0; x < o; x++)
        d[x] = u[y + x] ^ c[b * o + x];
      vs(d, 0, u, y, i), f();
    }
  }
  return bb(n, a, l, c, d);
}
async function v3(n, e, t) {
  const { N: r, r: i, p: s, dkLen: a, blockSize32: o, V: c, B32: u, B: l, tmp: d, blockMixCb: f, asyncTick: p } = mb(n, e, t);
  for (let y = 0; y < s; y++) {
    const h = o * y;
    for (let x = 0; x < o; x++)
      c[x] = u[h + x];
    let b = 0;
    await pp(r - 1, p, () => {
      vs(c, b, c, b += o, i), f();
    }), vs(c, (r - 1) * o, u, h, i), f(), await pp(r, p, () => {
      const x = u[h + o - 16] % r;
      for (let w = 0; w < o; w++)
        d[w] = u[h + w] ^ c[x * o + w];
      vs(d, 0, u, h, i), f();
    });
  }
  return bb(n, a, l, c, d);
}
let xb = !1, gb = !1;
const wb = async function(n, e, t, r, i, s, a) {
  return await v3(n, e, { N: t, r, p: i, dkLen: s, onProgress: a });
}, Ab = function(n, e, t, r, i, s) {
  return E3(n, e, { N: t, r, p: i, dkLen: s });
};
let Eb = wb, vb = Ab;
async function La(n, e, t, r, i, s, a) {
  const o = K(n, "passwd"), c = K(e, "salt");
  return V(await Eb(o, c, t, r, i, s, a));
}
La._ = wb;
La.lock = function() {
  gb = !0;
};
La.register = function(n) {
  if (gb)
    throw new Error("scrypt is locked");
  Eb = n;
};
Object.freeze(La);
function Ma(n, e, t, r, i, s) {
  const a = K(n, "passwd"), o = K(e, "salt");
  return V(vb(a, o, t, r, i, s));
}
Ma._ = Ab;
Ma.lock = function() {
  xb = !0;
};
Ma.register = function(n) {
  if (xb)
    throw new Error("scryptSync is locked");
  vb = n;
};
Object.freeze(Ma);
const Tb = function(n) {
  return e3("sha256").update(n).digest();
};
let Pb = Tb, Sb = !1;
function zt(n) {
  const e = K(n, "data");
  return V(Pb(e));
}
zt._ = Tb;
zt.lock = function() {
  Sb = !0;
};
zt.register = function(n) {
  if (Sb)
    throw new Error("sha256 is locked");
  Pb = n;
};
Object.freeze(zt);
Object.freeze(zt);
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const Ib = BigInt(0), Qu = BigInt(1), T3 = BigInt(2), qu = (n) => n instanceof Uint8Array, P3 = /* @__PURE__ */ Array.from({ length: 256 }, (n, e) => e.toString(16).padStart(2, "0"));
function Ea(n) {
  if (!qu(n))
    throw new Error("Uint8Array expected");
  let e = "";
  for (let t = 0; t < n.length; t++)
    e += P3[n[t]];
  return e;
}
function Cb(n) {
  const e = n.toString(16);
  return e.length & 1 ? `0${e}` : e;
}
function $f(n) {
  if (typeof n != "string")
    throw new Error("hex string expected, got " + typeof n);
  return BigInt(n === "" ? "0" : `0x${n}`);
}
function va(n) {
  if (typeof n != "string")
    throw new Error("hex string expected, got " + typeof n);
  const e = n.length;
  if (e % 2)
    throw new Error("padded hex string expected, got unpadded hex of length " + e);
  const t = new Uint8Array(e / 2);
  for (let r = 0; r < t.length; r++) {
    const i = r * 2, s = n.slice(i, i + 2), a = Number.parseInt(s, 16);
    if (Number.isNaN(a) || a < 0)
      throw new Error("Invalid byte sequence");
    t[r] = a;
  }
  return t;
}
function $i(n) {
  return $f(Ea(n));
}
function Vf(n) {
  if (!qu(n))
    throw new Error("Uint8Array expected");
  return $f(Ea(Uint8Array.from(n).reverse()));
}
function Ta(n, e) {
  return va(n.toString(16).padStart(e * 2, "0"));
}
function zf(n, e) {
  return Ta(n, e).reverse();
}
function S3(n) {
  return va(Cb(n));
}
function Jt(n, e, t) {
  let r;
  if (typeof e == "string")
    try {
      r = va(e);
    } catch (s) {
      throw new Error(`${n} must be valid hex string, got "${e}". Cause: ${s}`);
    }
  else if (qu(e))
    r = Uint8Array.from(e);
  else
    throw new Error(`${n} must be hex string or Uint8Array`);
  const i = r.length;
  if (typeof t == "number" && i !== t)
    throw new Error(`${n} expected ${t} bytes, got ${i}`);
  return r;
}
function xo(...n) {
  const e = new Uint8Array(n.reduce((r, i) => r + i.length, 0));
  let t = 0;
  return n.forEach((r) => {
    if (!qu(r))
      throw new Error("Uint8Array expected");
    e.set(r, t), t += r.length;
  }), e;
}
function I3(n, e) {
  if (n.length !== e.length)
    return !1;
  for (let t = 0; t < n.length; t++)
    if (n[t] !== e[t])
      return !1;
  return !0;
}
function C3(n) {
  if (typeof n != "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof n}`);
  return new Uint8Array(new TextEncoder().encode(n));
}
function O3(n) {
  let e;
  for (e = 0; n > Ib; n >>= Qu, e += 1)
    ;
  return e;
}
function N3(n, e) {
  return n >> BigInt(e) & Qu;
}
const R3 = (n, e, t) => n | (t ? Qu : Ib) << BigInt(e), jf = (n) => (T3 << BigInt(n - 1)) - Qu, Cl = (n) => new Uint8Array(n), wp = (n) => Uint8Array.from(n);
function Ob(n, e, t) {
  if (typeof n != "number" || n < 2)
    throw new Error("hashLen must be a number");
  if (typeof e != "number" || e < 2)
    throw new Error("qByteLen must be a number");
  if (typeof t != "function")
    throw new Error("hmacFn must be a function");
  let r = Cl(n), i = Cl(n), s = 0;
  const a = () => {
    r.fill(1), i.fill(0), s = 0;
  }, o = (...d) => t(i, r, ...d), c = (d = Cl()) => {
    i = o(wp([0]), d), r = o(), d.length !== 0 && (i = o(wp([1]), d), r = o());
  }, u = () => {
    if (s++ >= 1e3)
      throw new Error("drbg: tried 1000 values");
    let d = 0;
    const f = [];
    for (; d < e; ) {
      r = o();
      const p = r.slice();
      f.push(p), d += r.length;
    }
    return xo(...f);
  };
  return (d, f) => {
    a(), c(d);
    let p;
    for (; !(p = f(u())); )
      c();
    return a(), p;
  };
}
const B3 = {
  bigint: (n) => typeof n == "bigint",
  function: (n) => typeof n == "function",
  boolean: (n) => typeof n == "boolean",
  string: (n) => typeof n == "string",
  stringOrUint8Array: (n) => typeof n == "string" || n instanceof Uint8Array,
  isSafeInteger: (n) => Number.isSafeInteger(n),
  array: (n) => Array.isArray(n),
  field: (n, e) => e.Fp.isValid(n),
  hash: (n) => typeof n == "function" && Number.isSafeInteger(n.outputLen)
};
function ec(n, e, t = {}) {
  const r = (i, s, a) => {
    const o = B3[s];
    if (typeof o != "function")
      throw new Error(`Invalid validator "${s}", expected function`);
    const c = n[i];
    if (!(a && c === void 0) && !o(c, n))
      throw new Error(`Invalid param ${String(i)}=${c} (${typeof c}), expected ${s}`);
  };
  for (const [i, s] of Object.entries(e))
    r(i, s, !1);
  for (const [i, s] of Object.entries(t))
    r(i, s, !0);
  return n;
}
const _3 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  bitGet: N3,
  bitLen: O3,
  bitMask: jf,
  bitSet: R3,
  bytesToHex: Ea,
  bytesToNumberBE: $i,
  bytesToNumberLE: Vf,
  concatBytes: xo,
  createHmacDrbg: Ob,
  ensureBytes: Jt,
  equalBytes: I3,
  hexToBytes: va,
  hexToNumber: $f,
  numberToBytesBE: Ta,
  numberToBytesLE: zf,
  numberToHexUnpadded: Cb,
  numberToVarBytesBE: S3,
  utf8ToBytes: C3,
  validateObject: ec
}, Symbol.toStringTag, { value: "Module" }));
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const Le = BigInt(0), Se = BigInt(1), li = BigInt(2), k3 = BigInt(3), vd = BigInt(4), Ap = BigInt(5), Ep = BigInt(8);
BigInt(9);
BigInt(16);
function ct(n, e) {
  const t = n % e;
  return t >= Le ? t : e + t;
}
function L3(n, e, t) {
  if (t <= Le || e < Le)
    throw new Error("Expected power/modulo > 0");
  if (t === Se)
    return Le;
  let r = Se;
  for (; e > Le; )
    e & Se && (r = r * n % t), n = n * n % t, e >>= Se;
  return r;
}
function Pt(n, e, t) {
  let r = n;
  for (; e-- > Le; )
    r *= r, r %= t;
  return r;
}
function Td(n, e) {
  if (n === Le || e <= Le)
    throw new Error(`invert: expected positive integers, got n=${n} mod=${e}`);
  let t = ct(n, e), r = e, i = Le, s = Se;
  for (; t !== Le; ) {
    const o = r / t, c = r % t, u = i - s * o;
    r = t, t = c, i = s, s = u;
  }
  if (r !== Se)
    throw new Error("invert: does not exist");
  return ct(i, e);
}
function M3(n) {
  const e = (n - Se) / li;
  let t, r, i;
  for (t = n - Se, r = 0; t % li === Le; t /= li, r++)
    ;
  for (i = li; i < n && L3(i, e, n) !== n - Se; i++)
    ;
  if (r === 1) {
    const a = (n + Se) / vd;
    return function(c, u) {
      const l = c.pow(u, a);
      if (!c.eql(c.sqr(l), u))
        throw new Error("Cannot find square root");
      return l;
    };
  }
  const s = (t + Se) / li;
  return function(o, c) {
    if (o.pow(c, e) === o.neg(o.ONE))
      throw new Error("Cannot find square root");
    let u = r, l = o.pow(o.mul(o.ONE, i), t), d = o.pow(c, s), f = o.pow(c, t);
    for (; !o.eql(f, o.ONE); ) {
      if (o.eql(f, o.ZERO))
        return o.ZERO;
      let p = 1;
      for (let h = o.sqr(f); p < u && !o.eql(h, o.ONE); p++)
        h = o.sqr(h);
      const y = o.pow(l, Se << BigInt(u - p - 1));
      l = o.sqr(y), d = o.mul(d, y), f = o.mul(f, l), u = p;
    }
    return d;
  };
}
function D3(n) {
  if (n % vd === k3) {
    const e = (n + Se) / vd;
    return function(r, i) {
      const s = r.pow(i, e);
      if (!r.eql(r.sqr(s), i))
        throw new Error("Cannot find square root");
      return s;
    };
  }
  if (n % Ep === Ap) {
    const e = (n - Ap) / Ep;
    return function(r, i) {
      const s = r.mul(i, li), a = r.pow(s, e), o = r.mul(i, a), c = r.mul(r.mul(o, li), a), u = r.mul(o, r.sub(c, r.ONE));
      if (!r.eql(r.sqr(u), i))
        throw new Error("Cannot find square root");
      return u;
    };
  }
  return M3(n);
}
const U3 = [
  "create",
  "isValid",
  "is0",
  "neg",
  "inv",
  "sqrt",
  "sqr",
  "eql",
  "add",
  "sub",
  "mul",
  "pow",
  "div",
  "addN",
  "subN",
  "mulN",
  "sqrN"
];
function F3(n) {
  const e = {
    ORDER: "bigint",
    MASK: "bigint",
    BYTES: "isSafeInteger",
    BITS: "isSafeInteger"
  }, t = U3.reduce((r, i) => (r[i] = "function", r), e);
  return ec(n, t);
}
function G3(n, e, t) {
  if (t < Le)
    throw new Error("Expected power > 0");
  if (t === Le)
    return n.ONE;
  if (t === Se)
    return e;
  let r = n.ONE, i = e;
  for (; t > Le; )
    t & Se && (r = n.mul(r, i)), i = n.sqr(i), t >>= Se;
  return r;
}
function H3(n, e) {
  const t = new Array(e.length), r = e.reduce((s, a, o) => n.is0(a) ? s : (t[o] = s, n.mul(s, a)), n.ONE), i = n.inv(r);
  return e.reduceRight((s, a, o) => n.is0(a) ? s : (t[o] = n.mul(s, t[o]), n.mul(s, a)), i), t;
}
function Nb(n, e) {
  const t = e !== void 0 ? e : n.toString(2).length, r = Math.ceil(t / 8);
  return { nBitLength: t, nByteLength: r };
}
function $3(n, e, t = !1, r = {}) {
  if (n <= Le)
    throw new Error(`Expected Field ORDER > 0, got ${n}`);
  const { nBitLength: i, nByteLength: s } = Nb(n, e);
  if (s > 2048)
    throw new Error("Field lengths over 2048 bytes are not supported");
  const a = D3(n), o = Object.freeze({
    ORDER: n,
    BITS: i,
    BYTES: s,
    MASK: jf(i),
    ZERO: Le,
    ONE: Se,
    create: (c) => ct(c, n),
    isValid: (c) => {
      if (typeof c != "bigint")
        throw new Error(`Invalid field element: expected bigint, got ${typeof c}`);
      return Le <= c && c < n;
    },
    is0: (c) => c === Le,
    isOdd: (c) => (c & Se) === Se,
    neg: (c) => ct(-c, n),
    eql: (c, u) => c === u,
    sqr: (c) => ct(c * c, n),
    add: (c, u) => ct(c + u, n),
    sub: (c, u) => ct(c - u, n),
    mul: (c, u) => ct(c * u, n),
    pow: (c, u) => G3(o, c, u),
    div: (c, u) => ct(c * Td(u, n), n),
    // Same as above, but doesn't normalize
    sqrN: (c) => c * c,
    addN: (c, u) => c + u,
    subN: (c, u) => c - u,
    mulN: (c, u) => c * u,
    inv: (c) => Td(c, n),
    sqrt: r.sqrt || ((c) => a(o, c)),
    invertBatch: (c) => H3(o, c),
    // TODO: do we really need constant cmov?
    // We don't have const-time bigints anyway, so probably will be not very useful
    cmov: (c, u, l) => l ? u : c,
    toBytes: (c) => t ? zf(c, s) : Ta(c, s),
    fromBytes: (c) => {
      if (c.length !== s)
        throw new Error(`Fp.fromBytes: expected ${s}, got ${c.length}`);
      return t ? Vf(c) : $i(c);
    }
  });
  return Object.freeze(o);
}
function Rb(n) {
  if (typeof n != "bigint")
    throw new Error("field order must be bigint");
  const e = n.toString(2).length;
  return Math.ceil(e / 8);
}
function Bb(n) {
  const e = Rb(n);
  return e + Math.ceil(e / 2);
}
function V3(n, e, t = !1) {
  const r = n.length, i = Rb(e), s = Bb(e);
  if (r < 16 || r < s || r > 1024)
    throw new Error(`expected ${s}-1024 bytes of input, got ${r}`);
  const a = t ? $i(n) : Vf(n), o = ct(a, e - Se) + Se;
  return t ? zf(o, i) : Ta(o, i);
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const z3 = BigInt(0), Ol = BigInt(1);
function j3(n, e) {
  const t = (i, s) => {
    const a = s.negate();
    return i ? a : s;
  }, r = (i) => {
    const s = Math.ceil(e / i) + 1, a = 2 ** (i - 1);
    return { windows: s, windowSize: a };
  };
  return {
    constTimeNegate: t,
    // non-const time multiplication ladder
    unsafeLadder(i, s) {
      let a = n.ZERO, o = i;
      for (; s > z3; )
        s & Ol && (a = a.add(o)), o = o.double(), s >>= Ol;
      return a;
    },
    /**
     * Creates a wNAF precomputation window. Used for caching.
     * Default window size is set by `utils.precompute()` and is equal to 8.
     * Number of precomputed points depends on the curve size:
     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
     * - 𝑊 is the window size
     * - 𝑛 is the bitlength of the curve order.
     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
     * @returns precomputed point tables flattened to a single array
     */
    precomputeWindow(i, s) {
      const { windows: a, windowSize: o } = r(s), c = [];
      let u = i, l = u;
      for (let d = 0; d < a; d++) {
        l = u, c.push(l);
        for (let f = 1; f < o; f++)
          l = l.add(u), c.push(l);
        u = l.double();
      }
      return c;
    },
    /**
     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
     * @param W window size
     * @param precomputes precomputed tables
     * @param n scalar (we don't check here, but should be less than curve order)
     * @returns real and fake (for const-time) points
     */
    wNAF(i, s, a) {
      const { windows: o, windowSize: c } = r(i);
      let u = n.ZERO, l = n.BASE;
      const d = BigInt(2 ** i - 1), f = 2 ** i, p = BigInt(i);
      for (let y = 0; y < o; y++) {
        const h = y * c;
        let b = Number(a & d);
        a >>= p, b > c && (b -= f, a += Ol);
        const x = h, w = h + Math.abs(b) - 1, E = y % 2 !== 0, N = b < 0;
        b === 0 ? l = l.add(t(E, s[x])) : u = u.add(t(N, s[w]));
      }
      return { p: u, f: l };
    },
    wNAFCached(i, s, a, o) {
      const c = i._WINDOW_SIZE || 1;
      let u = s.get(i);
      return u || (u = this.precomputeWindow(i, c), c !== 1 && s.set(i, o(u))), this.wNAF(c, u, a);
    }
  };
}
function _b(n) {
  return F3(n.Fp), ec(n, {
    n: "bigint",
    h: "bigint",
    Gx: "field",
    Gy: "field"
  }, {
    nBitLength: "isSafeInteger",
    nByteLength: "isSafeInteger"
  }), Object.freeze({
    ...Nb(n.n, n.nBitLength),
    ...n,
    p: n.Fp.ORDER
  });
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function W3(n) {
  const e = _b(n);
  ec(e, {
    a: "field",
    b: "field"
  }, {
    allowedPrivateKeyLengths: "array",
    wrapPrivateKey: "boolean",
    isTorsionFree: "function",
    clearCofactor: "function",
    allowInfinityPoint: "boolean",
    fromBytes: "function",
    toBytes: "function"
  });
  const { endo: t, Fp: r, a: i } = e;
  if (t) {
    if (!r.eql(i, r.ZERO))
      throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
    if (typeof t != "object" || typeof t.beta != "bigint" || typeof t.splitScalar != "function")
      throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
  }
  return Object.freeze({ ...e });
}
const { bytesToNumberBE: K3, hexToBytes: Q3 } = _3, bi = {
  // asn.1 DER encoding utils
  Err: class extends Error {
    constructor(e = "") {
      super(e);
    }
  },
  _parseInt(n) {
    const { Err: e } = bi;
    if (n.length < 2 || n[0] !== 2)
      throw new e("Invalid signature integer tag");
    const t = n[1], r = n.subarray(2, t + 2);
    if (!t || r.length !== t)
      throw new e("Invalid signature integer: wrong length");
    if (r[0] & 128)
      throw new e("Invalid signature integer: negative");
    if (r[0] === 0 && !(r[1] & 128))
      throw new e("Invalid signature integer: unnecessary leading zero");
    return { d: K3(r), l: n.subarray(t + 2) };
  },
  toSig(n) {
    const { Err: e } = bi, t = typeof n == "string" ? Q3(n) : n;
    if (!(t instanceof Uint8Array))
      throw new Error("ui8a expected");
    let r = t.length;
    if (r < 2 || t[0] != 48)
      throw new e("Invalid signature tag");
    if (t[1] !== r - 2)
      throw new e("Invalid signature: incorrect length");
    const { d: i, l: s } = bi._parseInt(t.subarray(2)), { d: a, l: o } = bi._parseInt(s);
    if (o.length)
      throw new e("Invalid signature: left bytes after parsing");
    return { r: i, s: a };
  },
  hexFromSig(n) {
    const e = (u) => Number.parseInt(u[0], 16) & 8 ? "00" + u : u, t = (u) => {
      const l = u.toString(16);
      return l.length & 1 ? `0${l}` : l;
    }, r = e(t(n.s)), i = e(t(n.r)), s = r.length / 2, a = i.length / 2, o = t(s), c = t(a);
    return `30${t(a + s + 4)}02${c}${i}02${o}${r}`;
  }
}, ir = BigInt(0), Gt = BigInt(1);
BigInt(2);
const vp = BigInt(3);
BigInt(4);
function q3(n) {
  const e = W3(n), { Fp: t } = e, r = e.toBytes || ((y, h, b) => {
    const x = h.toAffine();
    return xo(Uint8Array.from([4]), t.toBytes(x.x), t.toBytes(x.y));
  }), i = e.fromBytes || ((y) => {
    const h = y.subarray(1), b = t.fromBytes(h.subarray(0, t.BYTES)), x = t.fromBytes(h.subarray(t.BYTES, 2 * t.BYTES));
    return { x: b, y: x };
  });
  function s(y) {
    const { a: h, b } = e, x = t.sqr(y), w = t.mul(x, y);
    return t.add(t.add(w, t.mul(y, h)), b);
  }
  if (!t.eql(t.sqr(e.Gy), s(e.Gx)))
    throw new Error("bad generator point: equation left != right");
  function a(y) {
    return typeof y == "bigint" && ir < y && y < e.n;
  }
  function o(y) {
    if (!a(y))
      throw new Error("Expected valid bigint: 0 < bigint < curve.n");
  }
  function c(y) {
    const { allowedPrivateKeyLengths: h, nByteLength: b, wrapPrivateKey: x, n: w } = e;
    if (h && typeof y != "bigint") {
      if (y instanceof Uint8Array && (y = Ea(y)), typeof y != "string" || !h.includes(y.length))
        throw new Error("Invalid key");
      y = y.padStart(b * 2, "0");
    }
    let E;
    try {
      E = typeof y == "bigint" ? y : $i(Jt("private key", y, b));
    } catch {
      throw new Error(`private key must be ${b} bytes, hex or bigint, not ${typeof y}`);
    }
    return x && (E = ct(E, w)), o(E), E;
  }
  const u = /* @__PURE__ */ new Map();
  function l(y) {
    if (!(y instanceof d))
      throw new Error("ProjectivePoint expected");
  }
  class d {
    constructor(h, b, x) {
      if (this.px = h, this.py = b, this.pz = x, h == null || !t.isValid(h))
        throw new Error("x required");
      if (b == null || !t.isValid(b))
        throw new Error("y required");
      if (x == null || !t.isValid(x))
        throw new Error("z required");
    }
    // Does not validate if the point is on-curve.
    // Use fromHex instead, or call assertValidity() later.
    static fromAffine(h) {
      const { x: b, y: x } = h || {};
      if (!h || !t.isValid(b) || !t.isValid(x))
        throw new Error("invalid affine point");
      if (h instanceof d)
        throw new Error("projective point not allowed");
      const w = (E) => t.eql(E, t.ZERO);
      return w(b) && w(x) ? d.ZERO : new d(b, x, t.ONE);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    /**
     * Takes a bunch of Projective Points but executes only one
     * inversion on all of them. Inversion is very slow operation,
     * so this improves performance massively.
     * Optimization: converts a list of projective points to a list of identical points with Z=1.
     */
    static normalizeZ(h) {
      const b = t.invertBatch(h.map((x) => x.pz));
      return h.map((x, w) => x.toAffine(b[w])).map(d.fromAffine);
    }
    /**
     * Converts hash string or Uint8Array to Point.
     * @param hex short/long ECDSA hex
     */
    static fromHex(h) {
      const b = d.fromAffine(i(Jt("pointHex", h)));
      return b.assertValidity(), b;
    }
    // Multiplies generator point by privateKey.
    static fromPrivateKey(h) {
      return d.BASE.multiply(c(h));
    }
    // "Private method", don't use it directly
    _setWindowSize(h) {
      this._WINDOW_SIZE = h, u.delete(this);
    }
    // A point on curve is valid if it conforms to equation.
    assertValidity() {
      if (this.is0()) {
        if (e.allowInfinityPoint && !t.is0(this.py))
          return;
        throw new Error("bad point: ZERO");
      }
      const { x: h, y: b } = this.toAffine();
      if (!t.isValid(h) || !t.isValid(b))
        throw new Error("bad point: x or y not FE");
      const x = t.sqr(b), w = s(h);
      if (!t.eql(x, w))
        throw new Error("bad point: equation left != right");
      if (!this.isTorsionFree())
        throw new Error("bad point: not in prime-order subgroup");
    }
    hasEvenY() {
      const { y: h } = this.toAffine();
      if (t.isOdd)
        return !t.isOdd(h);
      throw new Error("Field doesn't support isOdd");
    }
    /**
     * Compare one point to another.
     */
    equals(h) {
      l(h);
      const { px: b, py: x, pz: w } = this, { px: E, py: N, pz: I } = h, B = t.eql(t.mul(b, I), t.mul(E, w)), U = t.eql(t.mul(x, I), t.mul(N, w));
      return B && U;
    }
    /**
     * Flips point to one corresponding to (x, -y) in Affine coordinates.
     */
    negate() {
      return new d(this.px, t.neg(this.py), this.pz);
    }
    // Renes-Costello-Batina exception-free doubling formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 3
    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
    double() {
      const { a: h, b } = e, x = t.mul(b, vp), { px: w, py: E, pz: N } = this;
      let I = t.ZERO, B = t.ZERO, U = t.ZERO, C = t.mul(w, w), v = t.mul(E, E), L = t.mul(N, N), O = t.mul(w, E);
      return O = t.add(O, O), U = t.mul(w, N), U = t.add(U, U), I = t.mul(h, U), B = t.mul(x, L), B = t.add(I, B), I = t.sub(v, B), B = t.add(v, B), B = t.mul(I, B), I = t.mul(O, I), U = t.mul(x, U), L = t.mul(h, L), O = t.sub(C, L), O = t.mul(h, O), O = t.add(O, U), U = t.add(C, C), C = t.add(U, C), C = t.add(C, L), C = t.mul(C, O), B = t.add(B, C), L = t.mul(E, N), L = t.add(L, L), C = t.mul(L, O), I = t.sub(I, C), U = t.mul(L, v), U = t.add(U, U), U = t.add(U, U), new d(I, B, U);
    }
    // Renes-Costello-Batina exception-free addition formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 1
    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
    add(h) {
      l(h);
      const { px: b, py: x, pz: w } = this, { px: E, py: N, pz: I } = h;
      let B = t.ZERO, U = t.ZERO, C = t.ZERO;
      const v = e.a, L = t.mul(e.b, vp);
      let O = t.mul(b, E), R = t.mul(x, N), F = t.mul(w, I), M = t.add(b, x), P = t.add(E, N);
      M = t.mul(M, P), P = t.add(O, R), M = t.sub(M, P), P = t.add(b, w);
      let S = t.add(E, I);
      return P = t.mul(P, S), S = t.add(O, F), P = t.sub(P, S), S = t.add(x, w), B = t.add(N, I), S = t.mul(S, B), B = t.add(R, F), S = t.sub(S, B), C = t.mul(v, P), B = t.mul(L, F), C = t.add(B, C), B = t.sub(R, C), C = t.add(R, C), U = t.mul(B, C), R = t.add(O, O), R = t.add(R, O), F = t.mul(v, F), P = t.mul(L, P), R = t.add(R, F), F = t.sub(O, F), F = t.mul(v, F), P = t.add(P, F), O = t.mul(R, P), U = t.add(U, O), O = t.mul(S, P), B = t.mul(M, B), B = t.sub(B, O), O = t.mul(M, R), C = t.mul(S, C), C = t.add(C, O), new d(B, U, C);
    }
    subtract(h) {
      return this.add(h.negate());
    }
    is0() {
      return this.equals(d.ZERO);
    }
    wNAF(h) {
      return p.wNAFCached(this, u, h, (b) => {
        const x = t.invertBatch(b.map((w) => w.pz));
        return b.map((w, E) => w.toAffine(x[E])).map(d.fromAffine);
      });
    }
    /**
     * Non-constant-time multiplication. Uses double-and-add algorithm.
     * It's faster, but should only be used when you don't care about
     * an exposed private key e.g. sig verification, which works over *public* keys.
     */
    multiplyUnsafe(h) {
      const b = d.ZERO;
      if (h === ir)
        return b;
      if (o(h), h === Gt)
        return this;
      const { endo: x } = e;
      if (!x)
        return p.unsafeLadder(this, h);
      let { k1neg: w, k1: E, k2neg: N, k2: I } = x.splitScalar(h), B = b, U = b, C = this;
      for (; E > ir || I > ir; )
        E & Gt && (B = B.add(C)), I & Gt && (U = U.add(C)), C = C.double(), E >>= Gt, I >>= Gt;
      return w && (B = B.negate()), N && (U = U.negate()), U = new d(t.mul(U.px, x.beta), U.py, U.pz), B.add(U);
    }
    /**
     * Constant time multiplication.
     * Uses wNAF method. Windowed method may be 10% faster,
     * but takes 2x longer to generate and consumes 2x memory.
     * Uses precomputes when available.
     * Uses endomorphism for Koblitz curves.
     * @param scalar by which the point would be multiplied
     * @returns New point
     */
    multiply(h) {
      o(h);
      let b = h, x, w;
      const { endo: E } = e;
      if (E) {
        const { k1neg: N, k1: I, k2neg: B, k2: U } = E.splitScalar(b);
        let { p: C, f: v } = this.wNAF(I), { p: L, f: O } = this.wNAF(U);
        C = p.constTimeNegate(N, C), L = p.constTimeNegate(B, L), L = new d(t.mul(L.px, E.beta), L.py, L.pz), x = C.add(L), w = v.add(O);
      } else {
        const { p: N, f: I } = this.wNAF(b);
        x = N, w = I;
      }
      return d.normalizeZ([x, w])[0];
    }
    /**
     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
     * Not using Strauss-Shamir trick: precomputation tables are faster.
     * The trick could be useful if both P and Q are not G (not in our case).
     * @returns non-zero affine point
     */
    multiplyAndAddUnsafe(h, b, x) {
      const w = d.BASE, E = (I, B) => B === ir || B === Gt || !I.equals(w) ? I.multiplyUnsafe(B) : I.multiply(B), N = E(this, b).add(E(h, x));
      return N.is0() ? void 0 : N;
    }
    // Converts Projective point to affine (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    // (x, y, z) ∋ (x=x/z, y=y/z)
    toAffine(h) {
      const { px: b, py: x, pz: w } = this, E = this.is0();
      h == null && (h = E ? t.ONE : t.inv(w));
      const N = t.mul(b, h), I = t.mul(x, h), B = t.mul(w, h);
      if (E)
        return { x: t.ZERO, y: t.ZERO };
      if (!t.eql(B, t.ONE))
        throw new Error("invZ was invalid");
      return { x: N, y: I };
    }
    isTorsionFree() {
      const { h, isTorsionFree: b } = e;
      if (h === Gt)
        return !0;
      if (b)
        return b(d, this);
      throw new Error("isTorsionFree() has not been declared for the elliptic curve");
    }
    clearCofactor() {
      const { h, clearCofactor: b } = e;
      return h === Gt ? this : b ? b(d, this) : this.multiplyUnsafe(e.h);
    }
    toRawBytes(h = !0) {
      return this.assertValidity(), r(d, this, h);
    }
    toHex(h = !0) {
      return Ea(this.toRawBytes(h));
    }
  }
  d.BASE = new d(e.Gx, e.Gy, t.ONE), d.ZERO = new d(t.ZERO, t.ONE, t.ZERO);
  const f = e.nBitLength, p = j3(d, e.endo ? Math.ceil(f / 2) : f);
  return {
    CURVE: e,
    ProjectivePoint: d,
    normPrivateKeyToScalar: c,
    weierstrassEquation: s,
    isWithinCurveOrder: a
  };
}
function J3(n) {
  const e = _b(n);
  return ec(e, {
    hash: "hash",
    hmac: "function",
    randomBytes: "function"
  }, {
    bits2int: "function",
    bits2int_modN: "function",
    lowS: "boolean"
  }), Object.freeze({ lowS: !0, ...e });
}
function Y3(n) {
  const e = J3(n), { Fp: t, n: r } = e, i = t.BYTES + 1, s = 2 * t.BYTES + 1;
  function a(P) {
    return ir < P && P < t.ORDER;
  }
  function o(P) {
    return ct(P, r);
  }
  function c(P) {
    return Td(P, r);
  }
  const { ProjectivePoint: u, normPrivateKeyToScalar: l, weierstrassEquation: d, isWithinCurveOrder: f } = q3({
    ...e,
    toBytes(P, S, k) {
      const D = S.toAffine(), $ = t.toBytes(D.x), H = xo;
      return k ? H(Uint8Array.from([S.hasEvenY() ? 2 : 3]), $) : H(Uint8Array.from([4]), $, t.toBytes(D.y));
    },
    fromBytes(P) {
      const S = P.length, k = P[0], D = P.subarray(1);
      if (S === i && (k === 2 || k === 3)) {
        const $ = $i(D);
        if (!a($))
          throw new Error("Point is not on curve");
        const H = d($);
        let W = t.sqrt(H);
        const X = (W & Gt) === Gt;
        return (k & 1) === 1 !== X && (W = t.neg(W)), { x: $, y: W };
      } else if (S === s && k === 4) {
        const $ = t.fromBytes(D.subarray(0, t.BYTES)), H = t.fromBytes(D.subarray(t.BYTES, 2 * t.BYTES));
        return { x: $, y: H };
      } else
        throw new Error(`Point of length ${S} was invalid. Expected ${i} compressed bytes or ${s} uncompressed bytes`);
    }
  }), p = (P) => Ea(Ta(P, e.nByteLength));
  function y(P) {
    const S = r >> Gt;
    return P > S;
  }
  function h(P) {
    return y(P) ? o(-P) : P;
  }
  const b = (P, S, k) => $i(P.slice(S, k));
  class x {
    constructor(S, k, D) {
      this.r = S, this.s = k, this.recovery = D, this.assertValidity();
    }
    // pair (bytes of r, bytes of s)
    static fromCompact(S) {
      const k = e.nByteLength;
      return S = Jt("compactSignature", S, k * 2), new x(b(S, 0, k), b(S, k, 2 * k));
    }
    // DER encoded ECDSA signature
    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
    static fromDER(S) {
      const { r: k, s: D } = bi.toSig(Jt("DER", S));
      return new x(k, D);
    }
    assertValidity() {
      if (!f(this.r))
        throw new Error("r must be 0 < r < CURVE.n");
      if (!f(this.s))
        throw new Error("s must be 0 < s < CURVE.n");
    }
    addRecoveryBit(S) {
      return new x(this.r, this.s, S);
    }
    recoverPublicKey(S) {
      const { r: k, s: D, recovery: $ } = this, H = U(Jt("msgHash", S));
      if ($ == null || ![0, 1, 2, 3].includes($))
        throw new Error("recovery id invalid");
      const W = $ === 2 || $ === 3 ? k + e.n : k;
      if (W >= t.ORDER)
        throw new Error("recovery id 2 or 3 invalid");
      const X = $ & 1 ? "03" : "02", ie = u.fromHex(X + p(W)), se = c(W), Q = o(-H * se), Z = o(D * se), Ce = u.BASE.multiplyAndAddUnsafe(ie, Q, Z);
      if (!Ce)
        throw new Error("point at infinify");
      return Ce.assertValidity(), Ce;
    }
    // Signatures should be low-s, to prevent malleability.
    hasHighS() {
      return y(this.s);
    }
    normalizeS() {
      return this.hasHighS() ? new x(this.r, o(-this.s), this.recovery) : this;
    }
    // DER-encoded
    toDERRawBytes() {
      return va(this.toDERHex());
    }
    toDERHex() {
      return bi.hexFromSig({ r: this.r, s: this.s });
    }
    // padded bytes of r, then padded bytes of s
    toCompactRawBytes() {
      return va(this.toCompactHex());
    }
    toCompactHex() {
      return p(this.r) + p(this.s);
    }
  }
  const w = {
    isValidPrivateKey(P) {
      try {
        return l(P), !0;
      } catch {
        return !1;
      }
    },
    normPrivateKeyToScalar: l,
    /**
     * Produces cryptographically secure private key from random of size
     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
     */
    randomPrivateKey: () => {
      const P = Bb(e.n);
      return V3(e.randomBytes(P), e.n);
    },
    /**
     * Creates precompute table for an arbitrary EC point. Makes point "cached".
     * Allows to massively speed-up `point.multiply(scalar)`.
     * @returns cached point
     * @example
     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
     * fast.multiply(privKey); // much faster ECDH now
     */
    precompute(P = 8, S = u.BASE) {
      return S._setWindowSize(P), S.multiply(BigInt(3)), S;
    }
  };
  function E(P, S = !0) {
    return u.fromPrivateKey(P).toRawBytes(S);
  }
  function N(P) {
    const S = P instanceof Uint8Array, k = typeof P == "string", D = (S || k) && P.length;
    return S ? D === i || D === s : k ? D === 2 * i || D === 2 * s : P instanceof u;
  }
  function I(P, S, k = !0) {
    if (N(P))
      throw new Error("first arg must be private key");
    if (!N(S))
      throw new Error("second arg must be public key");
    return u.fromHex(S).multiply(l(P)).toRawBytes(k);
  }
  const B = e.bits2int || function(P) {
    const S = $i(P), k = P.length * 8 - e.nBitLength;
    return k > 0 ? S >> BigInt(k) : S;
  }, U = e.bits2int_modN || function(P) {
    return o(B(P));
  }, C = jf(e.nBitLength);
  function v(P) {
    if (typeof P != "bigint")
      throw new Error("bigint expected");
    if (!(ir <= P && P < C))
      throw new Error(`bigint expected < 2^${e.nBitLength}`);
    return Ta(P, e.nByteLength);
  }
  function L(P, S, k = O) {
    if (["recovered", "canonical"].some((Oe) => Oe in k))
      throw new Error("sign() legacy options not supported");
    const { hash: D, randomBytes: $ } = e;
    let { lowS: H, prehash: W, extraEntropy: X } = k;
    H == null && (H = !0), P = Jt("msgHash", P), W && (P = Jt("prehashed msgHash", D(P)));
    const ie = U(P), se = l(S), Q = [v(se), v(ie)];
    if (X != null) {
      const Oe = X === !0 ? $(t.BYTES) : X;
      Q.push(Jt("extraEntropy", Oe));
    }
    const Z = xo(...Q), Ce = ie;
    function Je(Oe) {
      const Ye = B(Oe);
      if (!f(Ye))
        return;
      const rt = c(Ye), Wt = u.BASE.multiply(Ye).toAffine(), Re = o(Wt.x);
      if (Re === ir)
        return;
      const it = o(rt * o(Ce + Re * se));
      if (it === ir)
        return;
      let wr = (Wt.x === Re ? 0 : 2) | Number(Wt.y & Gt), Ar = it;
      return H && y(it) && (Ar = h(it), wr ^= 1), new x(Re, Ar, wr);
    }
    return { seed: Z, k2sig: Je };
  }
  const O = { lowS: e.lowS, prehash: !1 }, R = { lowS: e.lowS, prehash: !1 };
  function F(P, S, k = O) {
    const { seed: D, k2sig: $ } = L(P, S, k), H = e;
    return Ob(H.hash.outputLen, H.nByteLength, H.hmac)(D, $);
  }
  u.BASE._setWindowSize(8);
  function M(P, S, k, D = R) {
    var Wt;
    const $ = P;
    if (S = Jt("msgHash", S), k = Jt("publicKey", k), "strict" in D)
      throw new Error("options.strict was renamed to lowS");
    const { lowS: H, prehash: W } = D;
    let X, ie;
    try {
      if (typeof $ == "string" || $ instanceof Uint8Array)
        try {
          X = x.fromDER($);
        } catch (Re) {
          if (!(Re instanceof bi.Err))
            throw Re;
          X = x.fromCompact($);
        }
      else if (typeof $ == "object" && typeof $.r == "bigint" && typeof $.s == "bigint") {
        const { r: Re, s: it } = $;
        X = new x(Re, it);
      } else
        throw new Error("PARSE");
      ie = u.fromHex(k);
    } catch (Re) {
      if (Re.message === "PARSE")
        throw new Error("signature must be Signature instance, Uint8Array or hex string");
      return !1;
    }
    if (H && X.hasHighS())
      return !1;
    W && (S = e.hash(S));
    const { r: se, s: Q } = X, Z = U(S), Ce = c(Q), Je = o(Z * Ce), Oe = o(se * Ce), Ye = (Wt = u.BASE.multiplyAndAddUnsafe(ie, Je, Oe)) == null ? void 0 : Wt.toAffine();
    return Ye ? o(Ye.x) === se : !1;
  }
  return {
    CURVE: e,
    getPublicKey: E,
    getSharedSecret: I,
    sign: F,
    verify: M,
    ProjectivePoint: u,
    Signature: x,
    utils: w
  };
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function Z3(n) {
  return {
    hash: n,
    hmac: (e, ...t) => Ku(n, e, T5(...t)),
    randomBytes: S5
  };
}
function X3(n, e) {
  const t = (r) => Y3({ ...n, ...Z3(r) });
  return Object.freeze({ ...t(e), create: t });
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const kb = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"), Tp = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"), e8 = BigInt(1), Pd = BigInt(2), Pp = (n, e) => (n + e / Pd) / e;
function t8(n) {
  const e = kb, t = BigInt(3), r = BigInt(6), i = BigInt(11), s = BigInt(22), a = BigInt(23), o = BigInt(44), c = BigInt(88), u = n * n * n % e, l = u * u * n % e, d = Pt(l, t, e) * l % e, f = Pt(d, t, e) * l % e, p = Pt(f, Pd, e) * u % e, y = Pt(p, i, e) * p % e, h = Pt(y, s, e) * y % e, b = Pt(h, o, e) * h % e, x = Pt(b, c, e) * b % e, w = Pt(x, o, e) * h % e, E = Pt(w, t, e) * l % e, N = Pt(E, a, e) * y % e, I = Pt(N, r, e) * u % e, B = Pt(I, Pd, e);
  if (!Sd.eql(Sd.sqr(B), n))
    throw new Error("Cannot find square root");
  return B;
}
const Sd = $3(kb, void 0, void 0, { sqrt: t8 }), Or = X3({
  a: BigInt(0),
  b: BigInt(7),
  Fp: Sd,
  n: Tp,
  // Base point (x, y) aka generator point
  Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
  Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
  h: BigInt(1),
  lowS: !0,
  /**
   * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
   * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
   * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
   * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
   */
  endo: {
    beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
    splitScalar: (n) => {
      const e = Tp, t = BigInt("0x3086d221a7d46bcde86c90e49284eb15"), r = -e8 * BigInt("0xe4437ed6010e88286f547fa90abfe4c3"), i = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"), s = t, a = BigInt("0x100000000000000000000000000000000"), o = Pp(s * n, e), c = Pp(-r * n, e);
      let u = ct(n - o * t - c * i, e), l = ct(-o * r - c * s, e);
      const d = u > a, f = l > a;
      if (d && (u = e - u), f && (l = e - l), u > a || l > a)
        throw new Error("splitScalar: Endomorphism failed, k=" + n);
      return { k1neg: d, k1: u, k2neg: f, k2: l };
    }
  }
}, Ba);
BigInt(0);
Or.ProjectivePoint;
const go = "0x0000000000000000000000000000000000000000", Sp = "0x0000000000000000000000000000000000000000000000000000000000000000", n8 = `Ethereum Signed Message:
`, Ip = BigInt(0), Cp = BigInt(1), Op = BigInt(2), Np = BigInt(27), Rp = BigInt(28), vc = BigInt(35), ss = {};
function Bp(n) {
  return $t(Ae(n), 32);
}
var ks, mn, Ls, Oi;
const Qt = class Qt {
  /**
   *  @private
   */
  constructor(e, t, r, i) {
    _(this, ks);
    _(this, mn);
    _(this, Ls);
    _(this, Oi);
    es(e, ss, "Signature"), g(this, ks, t), g(this, mn, r), g(this, Ls, i), g(this, Oi, null);
  }
  /**
   *  The ``r`` value for a signature.
   *
   *  This represents the ``x`` coordinate of a "reference" or
   *  challenge point, from which the ``y`` can be computed.
   */
  get r() {
    return m(this, ks);
  }
  set r(e) {
    A(or(e) === 32, "invalid r", "value", e), g(this, ks, V(e));
  }
  /**
   *  The ``s`` value for a signature.
   */
  get s() {
    return A(parseInt(m(this, mn).substring(0, 3)) < 8, "non-canonical s; use ._s", "s", m(this, mn)), m(this, mn);
  }
  set s(e) {
    A(or(e) === 32, "invalid s", "value", e), g(this, mn, V(e));
  }
  /**
   *  Return the s value, unchecked for EIP-2 compliance.
   *
   *  This should generally not be used and is for situations where
   *  a non-canonical S value might be relevant, such as Frontier blocks
   *  that were mined prior to EIP-2 or invalid Authorization List
   *  signatures.
   */
  get _s() {
    return m(this, mn);
  }
  /**
   *  Returns true if the Signature is valid for [[link-eip-2]] signatures.
   */
  isValid() {
    return parseInt(m(this, mn).substring(0, 3)) < 8;
  }
  /**
   *  The ``v`` value for a signature.
   *
   *  Since a given ``x`` value for ``r`` has two possible values for
   *  its correspondin ``y``, the ``v`` indicates which of the two ``y``
   *  values to use.
   *
   *  It is normalized to the values ``27`` or ``28`` for legacy
   *  purposes.
   */
  get v() {
    return m(this, Ls);
  }
  set v(e) {
    const t = te(e, "value");
    A(t === 27 || t === 28, "invalid v", "v", e), g(this, Ls, t);
  }
  /**
   *  The EIP-155 ``v`` for legacy transactions. For non-legacy
   *  transactions, this value is ``null``.
   */
  get networkV() {
    return m(this, Oi);
  }
  /**
   *  The chain ID for EIP-155 legacy transactions. For non-legacy
   *  transactions, this value is ``null``.
   */
  get legacyChainId() {
    const e = this.networkV;
    return e == null ? null : Qt.getChainId(e);
  }
  /**
   *  The ``yParity`` for the signature.
   *
   *  See ``v`` for more details on how this value is used.
   */
  get yParity() {
    return this.v === 27 ? 0 : 1;
  }
  /**
   *  The [[link-eip-2098]] compact representation of the ``yParity``
   *  and ``s`` compacted into a single ``bytes32``.
   */
  get yParityAndS() {
    const e = K(this.s);
    return this.yParity && (e[0] |= 128), V(e);
  }
  /**
   *  The [[link-eip-2098]] compact representation.
   */
  get compactSerialized() {
    return le([this.r, this.yParityAndS]);
  }
  /**
   *  The serialized representation.
   */
  get serialized() {
    return le([this.r, this.s, this.yParity ? "0x1c" : "0x1b"]);
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return `Signature { r: "${this.r}", s: "${this._s}"${this.isValid() ? "" : ', valid: "false"'}, yParity: ${this.yParity}, networkV: ${this.networkV} }`;
  }
  /**
   *  Returns a new identical [[Signature]].
   */
  clone() {
    const e = new Qt(ss, this.r, this._s, this.v);
    return this.networkV && g(e, Oi, this.networkV), e;
  }
  /**
   *  Returns a representation that is compatible with ``JSON.stringify``.
   */
  toJSON() {
    const e = this.networkV;
    return {
      _type: "signature",
      networkV: e != null ? e.toString() : null,
      r: this.r,
      s: this._s,
      v: this.v
    };
  }
  /**
   *  Compute the chain ID from the ``v`` in a legacy EIP-155 transactions.
   *
   *  @example:
   *    Signature.getChainId(45)
   *    //_result:
   *
   *    Signature.getChainId(46)
   *    //_result:
   */
  static getChainId(e) {
    const t = q(e, "v");
    return t == Np || t == Rp ? Ip : (A(t >= vc, "invalid EIP-155 v", "v", e), (t - vc) / Op);
  }
  /**
   *  Compute the ``v`` for a chain ID for a legacy EIP-155 transactions.
   *
   *  Legacy transactions which use [[link-eip-155]] hijack the ``v``
   *  property to include the chain ID.
   *
   *  @example:
   *    Signature.getChainIdV(5, 27)
   *    //_result:
   *
   *    Signature.getChainIdV(5, 28)
   *    //_result:
   *
   */
  static getChainIdV(e, t) {
    return q(e) * Op + BigInt(35 + t - 27);
  }
  /**
   *  Compute the normalized legacy transaction ``v`` from a ``yParirty``,
   *  a legacy transaction ``v`` or a legacy [[link-eip-155]] transaction.
   *
   *  @example:
   *    // The values 0 and 1 imply v is actually yParity
   *    Signature.getNormalizedV(0)
   *    //_result:
   *
   *    // Legacy non-EIP-1559 transaction (i.e. 27 or 28)
   *    Signature.getNormalizedV(27)
   *    //_result:
   *
   *    // Legacy EIP-155 transaction (i.e. >= 35)
   *    Signature.getNormalizedV(46)
   *    //_result:
   *
   *    // Invalid values throw
   *    Signature.getNormalizedV(5)
   *    //_error:
   */
  static getNormalizedV(e) {
    const t = q(e);
    return t === Ip || t === Np ? 27 : t === Cp || t === Rp ? 28 : (A(t >= vc, "invalid v", "v", e), t & Cp ? 27 : 28);
  }
  /**
   *  Creates a new [[Signature]].
   *
   *  If no %%sig%% is provided, a new [[Signature]] is created
   *  with default values.
   *
   *  If %%sig%% is a string, it is parsed.
   */
  static from(e) {
    function t(u, l) {
      A(u, l, "signature", e);
    }
    if (e == null)
      return new Qt(ss, Sp, Sp, 27);
    if (typeof e == "string") {
      const u = K(e, "signature");
      if (u.length === 64) {
        const l = V(u.slice(0, 32)), d = u.slice(32, 64), f = d[0] & 128 ? 28 : 27;
        return d[0] &= 127, new Qt(ss, l, V(d), f);
      }
      if (u.length === 65) {
        const l = V(u.slice(0, 32)), d = V(u.slice(32, 64)), f = Qt.getNormalizedV(u[64]);
        return new Qt(ss, l, d, f);
      }
      t(!1, "invalid raw signature length");
    }
    if (e instanceof Qt)
      return e.clone();
    const r = e.r;
    t(r != null, "missing r");
    const i = Bp(r), s = function(u, l) {
      if (u != null)
        return Bp(u);
      if (l != null) {
        t(me(l, 32), "invalid yParityAndS");
        const d = K(l);
        return d[0] &= 127, V(d);
      }
      t(!1, "missing s");
    }(e.s, e.yParityAndS), { networkV: a, v: o } = function(u, l, d) {
      if (u != null) {
        const f = q(u);
        return {
          networkV: f >= vc ? f : void 0,
          v: Qt.getNormalizedV(f)
        };
      }
      if (l != null)
        return t(me(l, 32), "invalid yParityAndS"), { v: K(l)[0] & 128 ? 28 : 27 };
      if (d != null) {
        switch (te(d, "sig.yParity")) {
          case 0:
            return { v: 27 };
          case 1:
            return { v: 28 };
        }
        t(!1, "invalid yParity");
      }
      t(!1, "missing v");
    }(e.v, e.yParityAndS, e.yParity), c = new Qt(ss, i, s, o);
    return a && g(c, Oi, a), t(e.yParity == null || te(e.yParity, "sig.yParity") === c.yParity, "yParity mismatch"), t(e.yParityAndS == null || e.yParityAndS === c.yParityAndS, "yParityAndS mismatch"), c;
  }
};
ks = new WeakMap(), mn = new WeakMap(), Ls = new WeakMap(), Oi = new WeakMap();
let ft = Qt;
var Jn;
const di = class di {
  /**
   *  Creates a new **SigningKey** for %%privateKey%%.
   */
  constructor(e) {
    _(this, Jn);
    A(or(e) === 32, "invalid private key", "privateKey", "[REDACTED]"), g(this, Jn, V(e));
  }
  /**
   *  The private key.
   */
  get privateKey() {
    return m(this, Jn);
  }
  /**
   *  The uncompressed public key.
   *
   * This will always begin with the prefix ``0x04`` and be 132
   * characters long (the ``0x`` prefix and 130 hexadecimal nibbles).
   */
  get publicKey() {
    return di.computePublicKey(m(this, Jn));
  }
  /**
   *  The compressed public key.
   *
   *  This will always begin with either the prefix ``0x02`` or ``0x03``
   *  and be 68 characters long (the ``0x`` prefix and 33 hexadecimal
   *  nibbles)
   */
  get compressedPublicKey() {
    return di.computePublicKey(m(this, Jn), !0);
  }
  /**
   *  Return the signature of the signed %%digest%%.
   */
  sign(e) {
    A(or(e) === 32, "invalid digest length", "digest", e);
    const t = Or.sign($e(e), $e(m(this, Jn)), {
      lowS: !0
    });
    return ft.from({
      r: pr(t.r, 32),
      s: pr(t.s, 32),
      v: t.recovery ? 28 : 27
    });
  }
  /**
   *  Returns the [[link-wiki-ecdh]] shared secret between this
   *  private key and the %%other%% key.
   *
   *  The %%other%% key may be any type of key, a raw public key,
   *  a compressed/uncompressed pubic key or aprivate key.
   *
   *  Best practice is usually to use a cryptographic hash on the
   *  returned value before using it as a symetric secret.
   *
   *  @example:
   *    sign1 = new SigningKey(id("some-secret-1"))
   *    sign2 = new SigningKey(id("some-secret-2"))
   *
   *    // Notice that privA.computeSharedSecret(pubB)...
   *    sign1.computeSharedSecret(sign2.publicKey)
   *    //_result:
   *
   *    // ...is equal to privB.computeSharedSecret(pubA).
   *    sign2.computeSharedSecret(sign1.publicKey)
   *    //_result:
   */
  computeSharedSecret(e) {
    const t = di.computePublicKey(e);
    return V(Or.getSharedSecret($e(m(this, Jn)), K(t), !1));
  }
  /**
   *  Compute the public key for %%key%%, optionally %%compressed%%.
   *
   *  The %%key%% may be any type of key, a raw public key, a
   *  compressed/uncompressed public key or private key.
   *
   *  @example:
   *    sign = new SigningKey(id("some-secret"));
   *
   *    // Compute the uncompressed public key for a private key
   *    SigningKey.computePublicKey(sign.privateKey)
   *    //_result:
   *
   *    // Compute the compressed public key for a private key
   *    SigningKey.computePublicKey(sign.privateKey, true)
   *    //_result:
   *
   *    // Compute the uncompressed public key
   *    SigningKey.computePublicKey(sign.publicKey, false);
   *    //_result:
   *
   *    // Compute the Compressed a public key
   *    SigningKey.computePublicKey(sign.publicKey, true);
   *    //_result:
   */
  static computePublicKey(e, t) {
    let r = K(e, "key");
    if (r.length === 32) {
      const s = Or.getPublicKey(r, !!t);
      return V(s);
    }
    if (r.length === 64) {
      const s = new Uint8Array(65);
      s[0] = 4, s.set(r, 1), r = s;
    }
    const i = Or.ProjectivePoint.fromHex(r);
    return V(i.toRawBytes(t));
  }
  /**
   *  Returns the public key for the private key which produced the
   *  %%signature%% for the given %%digest%%.
   *
   *  @example:
   *    key = new SigningKey(id("some-secret"))
   *    digest = id("hello world")
   *    sig = key.sign(digest)
   *
   *    // Notice the signer public key...
   *    key.publicKey
   *    //_result:
   *
   *    // ...is equal to the recovered public key
   *    SigningKey.recoverPublicKey(digest, sig)
   *    //_result:
   *
   */
  static recoverPublicKey(e, t) {
    A(or(e) === 32, "invalid digest length", "digest", e);
    const r = ft.from(t);
    let i = Or.Signature.fromCompact($e(le([r.r, r.s])));
    i = i.addRecoveryBit(r.yParity);
    const s = i.recoverPublicKey($e(e));
    return A(s != null, "invalid signature for digest", "signature", t), "0x" + s.toHex(!1);
  }
  /**
   *  Returns the point resulting from adding the ellipic curve points
   *  %%p0%% and %%p1%%.
   *
   *  This is not a common function most developers should require, but
   *  can be useful for certain privacy-specific techniques.
   *
   *  For example, it is used by [[HDNodeWallet]] to compute child
   *  addresses from parent public keys and chain codes.
   */
  static addPoints(e, t, r) {
    const i = Or.ProjectivePoint.fromHex(di.computePublicKey(e).substring(2)), s = Or.ProjectivePoint.fromHex(di.computePublicKey(t).substring(2));
    return "0x" + i.add(s).toHex(!!r);
  }
};
Jn = new WeakMap();
let On = di;
const r8 = BigInt(0), i8 = BigInt(36);
function _p(n) {
  n = n.toLowerCase();
  const e = n.substring(2).split(""), t = new Uint8Array(40);
  for (let i = 0; i < 40; i++)
    t[i] = e[i].charCodeAt(0);
  const r = K(pe(t));
  for (let i = 0; i < 40; i += 2)
    r[i >> 1] >> 4 >= 8 && (e[i] = e[i].toUpperCase()), (r[i >> 1] & 15) >= 8 && (e[i + 1] = e[i + 1].toUpperCase());
  return "0x" + e.join("");
}
const Wf = {};
for (let n = 0; n < 10; n++)
  Wf[String(n)] = String(n);
for (let n = 0; n < 26; n++)
  Wf[String.fromCharCode(65 + n)] = String(10 + n);
const kp = 15;
function s8(n) {
  n = n.toUpperCase(), n = n.substring(4) + n.substring(0, 2) + "00";
  let e = n.split("").map((r) => Wf[r]).join("");
  for (; e.length >= kp; ) {
    let r = e.substring(0, kp);
    e = parseInt(r, 10) % 97 + e.substring(r.length);
  }
  let t = String(98 - parseInt(e, 10) % 97);
  for (; t.length < 2; )
    t = "0" + t;
  return t;
}
const a8 = function() {
  const n = {};
  for (let e = 0; e < 36; e++) {
    const t = "0123456789abcdefghijklmnopqrstuvwxyz"[e];
    n[t] = BigInt(e);
  }
  return n;
}();
function o8(n) {
  n = n.toLowerCase();
  let e = r8;
  for (let t = 0; t < n.length; t++)
    e = e * i8 + a8[n[t]];
  return e;
}
function oe(n) {
  if (A(typeof n == "string", "invalid address", "address", n), n.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
    n.startsWith("0x") || (n = "0x" + n);
    const e = _p(n);
    return A(!n.match(/([A-F].*[a-f])|([a-f].*[A-F])/) || e === n, "bad address checksum", "address", n), e;
  }
  if (n.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
    A(n.substring(2, 4) === s8(n), "bad icap checksum", "address", n);
    let e = o8(n.substring(4)).toString(16);
    for (; e.length < 40; )
      e = "0" + e;
    return _p("0x" + e);
  }
  A(!1, "invalid address", "address", n);
}
function c8(n) {
  const e = oe(n.from);
  let r = q(n.nonce, "tx.nonce").toString(16);
  return r === "0" ? r = "0x" : r.length % 2 ? r = "0x0" + r : r = "0x" + r, oe(be(pe(yr([e, r])), 12));
}
function Lb(n) {
  return n && typeof n.getAddress == "function";
}
async function Nl(n, e) {
  const t = await e;
  return (t == null || t === "0x0000000000000000000000000000000000000000") && (G(typeof n != "string", "unconfigured name", "UNCONFIGURED_NAME", { value: n }), A(!1, "invalid AddressLike value; did not resolve to a value address", "target", n)), oe(t);
}
function Me(n, e) {
  if (typeof n == "string")
    return n.match(/^0x[0-9a-f]{40}$/i) ? oe(n) : (G(e != null, "ENS resolution requires a provider", "UNSUPPORTED_OPERATION", { operation: "resolveName" }), Nl(n, e.resolveName(n)));
  if (Lb(n))
    return Nl(n, n.getAddress());
  if (n && typeof n.then == "function")
    return Nl(n, n);
  A(!1, "unsupported addressable value", "target", n);
}
const Fn = {};
function J(n, e) {
  let t = !1;
  return e < 0 && (t = !0, e *= -1), new qe(Fn, `${t ? "" : "u"}int${e}`, n, { signed: t, width: e });
}
function fe(n, e) {
  return new qe(Fn, `bytes${e || ""}`, n, { size: e });
}
const Lp = Symbol.for("_ethers_typed");
var Ni;
const Hn = class Hn {
  /**
   *  @_ignore:
   */
  constructor(e, t, r, i) {
    /**
     *  The type, as a Solidity-compatible type.
     */
    T(this, "type");
    /**
     *  The actual value.
     */
    T(this, "value");
    _(this, Ni);
    /**
     *  @_ignore:
     */
    T(this, "_typedSymbol");
    i == null && (i = null), es(Fn, e, "Typed"), Y(this, { _typedSymbol: Lp, type: t, value: r }), g(this, Ni, i), this.format();
  }
  /**
   *  Format the type as a Human-Readable type.
   */
  format() {
    if (this.type === "array")
      throw new Error("");
    if (this.type === "dynamicArray")
      throw new Error("");
    return this.type === "tuple" ? `tuple(${this.value.map((e) => e.format()).join(",")})` : this.type;
  }
  /**
   *  The default value returned by this type.
   */
  defaultValue() {
    return 0;
  }
  /**
   *  The minimum value for numeric types.
   */
  minValue() {
    return 0;
  }
  /**
   *  The maximum value for numeric types.
   */
  maxValue() {
    return 0;
  }
  /**
   *  Returns ``true`` and provides a type guard is this is a [[TypedBigInt]].
   */
  isBigInt() {
    return !!this.type.match(/^u?int[0-9]+$/);
  }
  /**
   *  Returns ``true`` and provides a type guard is this is a [[TypedData]].
   */
  isData() {
    return this.type.startsWith("bytes");
  }
  /**
   *  Returns ``true`` and provides a type guard is this is a [[TypedString]].
   */
  isString() {
    return this.type === "string";
  }
  /**
   *  Returns the tuple name, if this is a tuple. Throws otherwise.
   */
  get tupleName() {
    if (this.type !== "tuple")
      throw TypeError("not a tuple");
    return m(this, Ni);
  }
  // Returns the length of this type as an array
  // - `null` indicates the length is unforced, it could be dynamic
  // - `-1` indicates the length is dynamic
  // - any other value indicates it is a static array and is its length
  /**
   *  Returns the length of the array type or ``-1`` if it is dynamic.
   *
   *  Throws if the type is not an array.
   */
  get arrayLength() {
    if (this.type !== "array")
      throw TypeError("not an array");
    return m(this, Ni) === !0 ? -1 : m(this, Ni) === !1 ? this.value.length : null;
  }
  /**
   *  Returns a new **Typed** of %%type%% with the %%value%%.
   */
  static from(e, t) {
    return new Hn(Fn, e, t);
  }
  /**
   *  Return a new ``uint8`` type for %%v%%.
   */
  static uint8(e) {
    return J(e, 8);
  }
  /**
   *  Return a new ``uint16`` type for %%v%%.
   */
  static uint16(e) {
    return J(e, 16);
  }
  /**
   *  Return a new ``uint24`` type for %%v%%.
   */
  static uint24(e) {
    return J(e, 24);
  }
  /**
   *  Return a new ``uint32`` type for %%v%%.
   */
  static uint32(e) {
    return J(e, 32);
  }
  /**
   *  Return a new ``uint40`` type for %%v%%.
   */
  static uint40(e) {
    return J(e, 40);
  }
  /**
   *  Return a new ``uint48`` type for %%v%%.
   */
  static uint48(e) {
    return J(e, 48);
  }
  /**
   *  Return a new ``uint56`` type for %%v%%.
   */
  static uint56(e) {
    return J(e, 56);
  }
  /**
   *  Return a new ``uint64`` type for %%v%%.
   */
  static uint64(e) {
    return J(e, 64);
  }
  /**
   *  Return a new ``uint72`` type for %%v%%.
   */
  static uint72(e) {
    return J(e, 72);
  }
  /**
   *  Return a new ``uint80`` type for %%v%%.
   */
  static uint80(e) {
    return J(e, 80);
  }
  /**
   *  Return a new ``uint88`` type for %%v%%.
   */
  static uint88(e) {
    return J(e, 88);
  }
  /**
   *  Return a new ``uint96`` type for %%v%%.
   */
  static uint96(e) {
    return J(e, 96);
  }
  /**
   *  Return a new ``uint104`` type for %%v%%.
   */
  static uint104(e) {
    return J(e, 104);
  }
  /**
   *  Return a new ``uint112`` type for %%v%%.
   */
  static uint112(e) {
    return J(e, 112);
  }
  /**
   *  Return a new ``uint120`` type for %%v%%.
   */
  static uint120(e) {
    return J(e, 120);
  }
  /**
   *  Return a new ``uint128`` type for %%v%%.
   */
  static uint128(e) {
    return J(e, 128);
  }
  /**
   *  Return a new ``uint136`` type for %%v%%.
   */
  static uint136(e) {
    return J(e, 136);
  }
  /**
   *  Return a new ``uint144`` type for %%v%%.
   */
  static uint144(e) {
    return J(e, 144);
  }
  /**
   *  Return a new ``uint152`` type for %%v%%.
   */
  static uint152(e) {
    return J(e, 152);
  }
  /**
   *  Return a new ``uint160`` type for %%v%%.
   */
  static uint160(e) {
    return J(e, 160);
  }
  /**
   *  Return a new ``uint168`` type for %%v%%.
   */
  static uint168(e) {
    return J(e, 168);
  }
  /**
   *  Return a new ``uint176`` type for %%v%%.
   */
  static uint176(e) {
    return J(e, 176);
  }
  /**
   *  Return a new ``uint184`` type for %%v%%.
   */
  static uint184(e) {
    return J(e, 184);
  }
  /**
   *  Return a new ``uint192`` type for %%v%%.
   */
  static uint192(e) {
    return J(e, 192);
  }
  /**
   *  Return a new ``uint200`` type for %%v%%.
   */
  static uint200(e) {
    return J(e, 200);
  }
  /**
   *  Return a new ``uint208`` type for %%v%%.
   */
  static uint208(e) {
    return J(e, 208);
  }
  /**
   *  Return a new ``uint216`` type for %%v%%.
   */
  static uint216(e) {
    return J(e, 216);
  }
  /**
   *  Return a new ``uint224`` type for %%v%%.
   */
  static uint224(e) {
    return J(e, 224);
  }
  /**
   *  Return a new ``uint232`` type for %%v%%.
   */
  static uint232(e) {
    return J(e, 232);
  }
  /**
   *  Return a new ``uint240`` type for %%v%%.
   */
  static uint240(e) {
    return J(e, 240);
  }
  /**
   *  Return a new ``uint248`` type for %%v%%.
   */
  static uint248(e) {
    return J(e, 248);
  }
  /**
   *  Return a new ``uint256`` type for %%v%%.
   */
  static uint256(e) {
    return J(e, 256);
  }
  /**
   *  Return a new ``uint256`` type for %%v%%.
   */
  static uint(e) {
    return J(e, 256);
  }
  /**
   *  Return a new ``int8`` type for %%v%%.
   */
  static int8(e) {
    return J(e, -8);
  }
  /**
   *  Return a new ``int16`` type for %%v%%.
   */
  static int16(e) {
    return J(e, -16);
  }
  /**
   *  Return a new ``int24`` type for %%v%%.
   */
  static int24(e) {
    return J(e, -24);
  }
  /**
   *  Return a new ``int32`` type for %%v%%.
   */
  static int32(e) {
    return J(e, -32);
  }
  /**
   *  Return a new ``int40`` type for %%v%%.
   */
  static int40(e) {
    return J(e, -40);
  }
  /**
   *  Return a new ``int48`` type for %%v%%.
   */
  static int48(e) {
    return J(e, -48);
  }
  /**
   *  Return a new ``int56`` type for %%v%%.
   */
  static int56(e) {
    return J(e, -56);
  }
  /**
   *  Return a new ``int64`` type for %%v%%.
   */
  static int64(e) {
    return J(e, -64);
  }
  /**
   *  Return a new ``int72`` type for %%v%%.
   */
  static int72(e) {
    return J(e, -72);
  }
  /**
   *  Return a new ``int80`` type for %%v%%.
   */
  static int80(e) {
    return J(e, -80);
  }
  /**
   *  Return a new ``int88`` type for %%v%%.
   */
  static int88(e) {
    return J(e, -88);
  }
  /**
   *  Return a new ``int96`` type for %%v%%.
   */
  static int96(e) {
    return J(e, -96);
  }
  /**
   *  Return a new ``int104`` type for %%v%%.
   */
  static int104(e) {
    return J(e, -104);
  }
  /**
   *  Return a new ``int112`` type for %%v%%.
   */
  static int112(e) {
    return J(e, -112);
  }
  /**
   *  Return a new ``int120`` type for %%v%%.
   */
  static int120(e) {
    return J(e, -120);
  }
  /**
   *  Return a new ``int128`` type for %%v%%.
   */
  static int128(e) {
    return J(e, -128);
  }
  /**
   *  Return a new ``int136`` type for %%v%%.
   */
  static int136(e) {
    return J(e, -136);
  }
  /**
   *  Return a new ``int144`` type for %%v%%.
   */
  static int144(e) {
    return J(e, -144);
  }
  /**
   *  Return a new ``int52`` type for %%v%%.
   */
  static int152(e) {
    return J(e, -152);
  }
  /**
   *  Return a new ``int160`` type for %%v%%.
   */
  static int160(e) {
    return J(e, -160);
  }
  /**
   *  Return a new ``int168`` type for %%v%%.
   */
  static int168(e) {
    return J(e, -168);
  }
  /**
   *  Return a new ``int176`` type for %%v%%.
   */
  static int176(e) {
    return J(e, -176);
  }
  /**
   *  Return a new ``int184`` type for %%v%%.
   */
  static int184(e) {
    return J(e, -184);
  }
  /**
   *  Return a new ``int92`` type for %%v%%.
   */
  static int192(e) {
    return J(e, -192);
  }
  /**
   *  Return a new ``int200`` type for %%v%%.
   */
  static int200(e) {
    return J(e, -200);
  }
  /**
   *  Return a new ``int208`` type for %%v%%.
   */
  static int208(e) {
    return J(e, -208);
  }
  /**
   *  Return a new ``int216`` type for %%v%%.
   */
  static int216(e) {
    return J(e, -216);
  }
  /**
   *  Return a new ``int224`` type for %%v%%.
   */
  static int224(e) {
    return J(e, -224);
  }
  /**
   *  Return a new ``int232`` type for %%v%%.
   */
  static int232(e) {
    return J(e, -232);
  }
  /**
   *  Return a new ``int240`` type for %%v%%.
   */
  static int240(e) {
    return J(e, -240);
  }
  /**
   *  Return a new ``int248`` type for %%v%%.
   */
  static int248(e) {
    return J(e, -248);
  }
  /**
   *  Return a new ``int256`` type for %%v%%.
   */
  static int256(e) {
    return J(e, -256);
  }
  /**
   *  Return a new ``int256`` type for %%v%%.
   */
  static int(e) {
    return J(e, -256);
  }
  /**
   *  Return a new ``bytes1`` type for %%v%%.
   */
  static bytes1(e) {
    return fe(e, 1);
  }
  /**
   *  Return a new ``bytes2`` type for %%v%%.
   */
  static bytes2(e) {
    return fe(e, 2);
  }
  /**
   *  Return a new ``bytes3`` type for %%v%%.
   */
  static bytes3(e) {
    return fe(e, 3);
  }
  /**
   *  Return a new ``bytes4`` type for %%v%%.
   */
  static bytes4(e) {
    return fe(e, 4);
  }
  /**
   *  Return a new ``bytes5`` type for %%v%%.
   */
  static bytes5(e) {
    return fe(e, 5);
  }
  /**
   *  Return a new ``bytes6`` type for %%v%%.
   */
  static bytes6(e) {
    return fe(e, 6);
  }
  /**
   *  Return a new ``bytes7`` type for %%v%%.
   */
  static bytes7(e) {
    return fe(e, 7);
  }
  /**
   *  Return a new ``bytes8`` type for %%v%%.
   */
  static bytes8(e) {
    return fe(e, 8);
  }
  /**
   *  Return a new ``bytes9`` type for %%v%%.
   */
  static bytes9(e) {
    return fe(e, 9);
  }
  /**
   *  Return a new ``bytes10`` type for %%v%%.
   */
  static bytes10(e) {
    return fe(e, 10);
  }
  /**
   *  Return a new ``bytes11`` type for %%v%%.
   */
  static bytes11(e) {
    return fe(e, 11);
  }
  /**
   *  Return a new ``bytes12`` type for %%v%%.
   */
  static bytes12(e) {
    return fe(e, 12);
  }
  /**
   *  Return a new ``bytes13`` type for %%v%%.
   */
  static bytes13(e) {
    return fe(e, 13);
  }
  /**
   *  Return a new ``bytes14`` type for %%v%%.
   */
  static bytes14(e) {
    return fe(e, 14);
  }
  /**
   *  Return a new ``bytes15`` type for %%v%%.
   */
  static bytes15(e) {
    return fe(e, 15);
  }
  /**
   *  Return a new ``bytes16`` type for %%v%%.
   */
  static bytes16(e) {
    return fe(e, 16);
  }
  /**
   *  Return a new ``bytes17`` type for %%v%%.
   */
  static bytes17(e) {
    return fe(e, 17);
  }
  /**
   *  Return a new ``bytes18`` type for %%v%%.
   */
  static bytes18(e) {
    return fe(e, 18);
  }
  /**
   *  Return a new ``bytes19`` type for %%v%%.
   */
  static bytes19(e) {
    return fe(e, 19);
  }
  /**
   *  Return a new ``bytes20`` type for %%v%%.
   */
  static bytes20(e) {
    return fe(e, 20);
  }
  /**
   *  Return a new ``bytes21`` type for %%v%%.
   */
  static bytes21(e) {
    return fe(e, 21);
  }
  /**
   *  Return a new ``bytes22`` type for %%v%%.
   */
  static bytes22(e) {
    return fe(e, 22);
  }
  /**
   *  Return a new ``bytes23`` type for %%v%%.
   */
  static bytes23(e) {
    return fe(e, 23);
  }
  /**
   *  Return a new ``bytes24`` type for %%v%%.
   */
  static bytes24(e) {
    return fe(e, 24);
  }
  /**
   *  Return a new ``bytes25`` type for %%v%%.
   */
  static bytes25(e) {
    return fe(e, 25);
  }
  /**
   *  Return a new ``bytes26`` type for %%v%%.
   */
  static bytes26(e) {
    return fe(e, 26);
  }
  /**
   *  Return a new ``bytes27`` type for %%v%%.
   */
  static bytes27(e) {
    return fe(e, 27);
  }
  /**
   *  Return a new ``bytes28`` type for %%v%%.
   */
  static bytes28(e) {
    return fe(e, 28);
  }
  /**
   *  Return a new ``bytes29`` type for %%v%%.
   */
  static bytes29(e) {
    return fe(e, 29);
  }
  /**
   *  Return a new ``bytes30`` type for %%v%%.
   */
  static bytes30(e) {
    return fe(e, 30);
  }
  /**
   *  Return a new ``bytes31`` type for %%v%%.
   */
  static bytes31(e) {
    return fe(e, 31);
  }
  /**
   *  Return a new ``bytes32`` type for %%v%%.
   */
  static bytes32(e) {
    return fe(e, 32);
  }
  /**
   *  Return a new ``address`` type for %%v%%.
   */
  static address(e) {
    return new Hn(Fn, "address", e);
  }
  /**
   *  Return a new ``bool`` type for %%v%%.
   */
  static bool(e) {
    return new Hn(Fn, "bool", !!e);
  }
  /**
   *  Return a new ``bytes`` type for %%v%%.
   */
  static bytes(e) {
    return new Hn(Fn, "bytes", e);
  }
  /**
   *  Return a new ``string`` type for %%v%%.
   */
  static string(e) {
    return new Hn(Fn, "string", e);
  }
  /**
   *  Return a new ``array`` type for %%v%%, allowing %%dynamic%% length.
   */
  static array(e, t) {
    throw new Error("not implemented yet");
  }
  /**
   *  Return a new ``tuple`` type for %%v%%, with the optional %%name%%.
   */
  static tuple(e, t) {
    throw new Error("not implemented yet");
  }
  /**
   *  Return a new ``uint8`` type for %%v%%.
   */
  static overrides(e) {
    return new Hn(Fn, "overrides", Object.assign({}, e));
  }
  /**
   *  Returns true only if %%value%% is a [[Typed]] instance.
   */
  static isTyped(e) {
    return e && typeof e == "object" && "_typedSymbol" in e && e._typedSymbol === Lp;
  }
  /**
   *  If the value is a [[Typed]] instance, validates the underlying value
   *  and returns it, otherwise returns value directly.
   *
   *  This is useful for functions that with to accept either a [[Typed]]
   *  object or values.
   */
  static dereference(e, t) {
    if (Hn.isTyped(e)) {
      if (e.type !== t)
        throw new Error(`invalid type: expecetd ${t}, got ${e.type}`);
      return e.value;
    }
    return e;
  }
};
Ni = new WeakMap();
let qe = Hn;
class u8 extends gr {
  constructor(e) {
    super("address", "address", e, !1);
  }
  defaultValue() {
    return "0x0000000000000000000000000000000000000000";
  }
  encode(e, t) {
    let r = qe.dereference(t, "string");
    try {
      r = oe(r);
    } catch (i) {
      return this._throwError(i.message, t);
    }
    return e.writeValue(r);
  }
  decode(e) {
    return oe(pr(e.readValue(), 20));
  }
}
class l8 extends gr {
  constructor(t) {
    super(t.name, t.type, "_", t.dynamic);
    T(this, "coder");
    this.coder = t;
  }
  defaultValue() {
    return this.coder.defaultValue();
  }
  encode(t, r) {
    return this.coder.encode(t, r);
  }
  decode(t) {
    return this.coder.decode(t);
  }
}
function Mb(n, e, t) {
  let r = [];
  if (Array.isArray(t))
    r = t;
  else if (t && typeof t == "object") {
    let c = {};
    r = e.map((u) => {
      const l = u.localName;
      return G(l, "cannot encode object for signature with missing names", "INVALID_ARGUMENT", { argument: "values", info: { coder: u }, value: t }), G(!c[l], "cannot encode object for signature with duplicate names", "INVALID_ARGUMENT", { argument: "values", info: { coder: u }, value: t }), c[l] = !0, t[l];
    });
  } else
    A(!1, "invalid tuple value", "tuple", t);
  A(e.length === r.length, "types/value length mismatch", "tuple", t);
  let i = new gd(), s = new gd(), a = [];
  e.forEach((c, u) => {
    let l = r[u];
    if (c.dynamic) {
      let d = s.length;
      c.encode(s, l);
      let f = i.writeUpdatableValue();
      a.push((p) => {
        f(p + d);
      });
    } else
      c.encode(i, l);
  }), a.forEach((c) => {
    c(i.length);
  });
  let o = n.appendWriter(i);
  return o += n.appendWriter(s), o;
}
function Db(n, e) {
  let t = [], r = [], i = n.subReader(0);
  return e.forEach((s) => {
    let a = null;
    if (s.dynamic) {
      let o = n.readIndex(), c = i.subReader(o);
      try {
        a = s.decode(c);
      } catch (u) {
        if (He(u, "BUFFER_OVERRUN"))
          throw u;
        a = u, a.baseType = s.name, a.name = s.localName, a.type = s.type;
      }
    } else
      try {
        a = s.decode(n);
      } catch (o) {
        if (He(o, "BUFFER_OVERRUN"))
          throw o;
        a = o, a.baseType = s.name, a.name = s.localName, a.type = s.type;
      }
    if (a == null)
      throw new Error("investigate");
    t.push(a), r.push(s.localName || null);
  }), ga.fromItems(t, r);
}
class d8 extends gr {
  constructor(t, r, i) {
    const s = t.type + "[" + (r >= 0 ? r : "") + "]", a = r === -1 || t.dynamic;
    super("array", s, i, a);
    T(this, "coder");
    T(this, "length");
    Y(this, { coder: t, length: r });
  }
  defaultValue() {
    const t = this.coder.defaultValue(), r = [];
    for (let i = 0; i < this.length; i++)
      r.push(t);
    return r;
  }
  encode(t, r) {
    const i = qe.dereference(r, "array");
    Array.isArray(i) || this._throwError("expected array value", i);
    let s = this.length;
    s === -1 && (s = i.length, t.writeValue(i.length)), vm(i.length, s, "coder array" + (this.localName ? " " + this.localName : ""));
    let a = [];
    for (let o = 0; o < i.length; o++)
      a.push(this.coder);
    return Mb(t, a, i);
  }
  decode(t) {
    let r = this.length;
    r === -1 && (r = t.readIndex(), G(r * et <= t.dataLength, "insufficient data length", "BUFFER_OVERRUN", { buffer: t.bytes, offset: r * et, length: t.dataLength }));
    let i = [];
    for (let s = 0; s < r; s++)
      i.push(new l8(this.coder));
    return Db(t, i);
  }
}
class f8 extends gr {
  constructor(e) {
    super("bool", "bool", e, !1);
  }
  defaultValue() {
    return !1;
  }
  encode(e, t) {
    const r = qe.dereference(t, "bool");
    return e.writeValue(r ? 1 : 0);
  }
  decode(e) {
    return !!e.readValue();
  }
}
class Ub extends gr {
  constructor(e, t) {
    super(e, e, t, !0);
  }
  defaultValue() {
    return "0x";
  }
  encode(e, t) {
    t = $e(t);
    let r = e.writeValue(t.length);
    return r += e.writeBytes(t), r;
  }
  decode(e) {
    return e.readBytes(e.readIndex(), !0);
  }
}
class p8 extends Ub {
  constructor(e) {
    super("bytes", e);
  }
  decode(e) {
    return V(super.decode(e));
  }
}
class h8 extends gr {
  constructor(t, r) {
    let i = "bytes" + String(t);
    super(i, i, r, !1);
    T(this, "size");
    Y(this, { size: t }, { size: "number" });
  }
  defaultValue() {
    return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
  }
  encode(t, r) {
    let i = $e(qe.dereference(r, this.type));
    return i.length !== this.size && this._throwError("incorrect data length", r), t.writeBytes(i);
  }
  decode(t) {
    return V(t.readBytes(this.size));
  }
}
const y8 = new Uint8Array([]);
class m8 extends gr {
  constructor(e) {
    super("null", "", e, !1);
  }
  defaultValue() {
    return null;
  }
  encode(e, t) {
    return t != null && this._throwError("not null", t), e.writeBytes(y8);
  }
  decode(e) {
    return e.readBytes(0), null;
  }
}
const b8 = BigInt(0), x8 = BigInt(1), g8 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
class w8 extends gr {
  constructor(t, r, i) {
    const s = (r ? "int" : "uint") + t * 8;
    super(s, s, i, !1);
    T(this, "size");
    T(this, "signed");
    Y(this, { size: t, signed: r }, { size: "number", signed: "boolean" });
  }
  defaultValue() {
    return 0;
  }
  encode(t, r) {
    let i = q(qe.dereference(r, this.type)), s = Wa(g8, et * 8);
    if (this.signed) {
      let a = Wa(s, this.size * 8 - 1);
      (i > a || i < -(a + x8)) && this._throwError("value out-of-bounds", r), i = _f(i, 8 * et);
    } else (i < b8 || i > Wa(s, this.size * 8)) && this._throwError("value out-of-bounds", r);
    return t.writeValue(i);
  }
  decode(t) {
    let r = Wa(t.readValue(), this.size * 8);
    return this.signed && (r = XA(r, this.size * 8)), r;
  }
}
class A8 extends Ub {
  constructor(e) {
    super("string", e);
  }
  defaultValue() {
    return "";
  }
  encode(e, t) {
    return super.encode(e, Qe(qe.dereference(t, "string")));
  }
  decode(e) {
    return au(super.decode(e));
  }
}
class Tc extends gr {
  constructor(t, r) {
    let i = !1;
    const s = [];
    t.forEach((o) => {
      o.dynamic && (i = !0), s.push(o.type);
    });
    const a = "tuple(" + s.join(",") + ")";
    super("tuple", a, r, i);
    T(this, "coders");
    Y(this, { coders: Object.freeze(t.slice()) });
  }
  defaultValue() {
    const t = [];
    this.coders.forEach((i) => {
      t.push(i.defaultValue());
    });
    const r = this.coders.reduce((i, s) => {
      const a = s.localName;
      return a && (i[a] || (i[a] = 0), i[a]++), i;
    }, {});
    return this.coders.forEach((i, s) => {
      let a = i.localName;
      !a || r[a] !== 1 || (a === "length" && (a = "_length"), t[a] == null && (t[a] = t[s]));
    }), Object.freeze(t);
  }
  encode(t, r) {
    const i = qe.dereference(r, "tuple");
    return Mb(t, this.coders, i);
  }
  decode(t) {
    return Db(t, this.coders);
  }
}
function Rl(n, e) {
  return {
    address: oe(n),
    storageKeys: e.map((t, r) => (A(me(t, 32), "invalid slot", `storageKeys[${r}]`, t), t.toLowerCase()))
  };
}
function ts(n) {
  if (Array.isArray(n))
    return n.map((t, r) => Array.isArray(t) ? (A(t.length === 2, "invalid slot set", `value[${r}]`, t), Rl(t[0], t[1])) : (A(t != null && typeof t == "object", "invalid address-slot set", "value", n), Rl(t.address, t.storageKeys)));
  A(n != null && typeof n == "object", "invalid access list", "value", n);
  const e = Object.keys(n).map((t) => {
    const r = n[t].reduce((i, s) => (i[s] = !0, i), {});
    return Rl(t, Object.keys(r).sort());
  });
  return e.sort((t, r) => t.address.localeCompare(r.address)), e;
}
function Fb(n) {
  return {
    address: oe(n.address),
    nonce: q(n.nonce != null ? n.nonce : 0),
    chainId: q(n.chainId != null ? n.chainId : 0),
    signature: ft.from(n.signature)
  };
}
function tc(n) {
  let e;
  return typeof n == "string" ? e = On.computePublicKey(n, !1) : e = n.publicKey, oe(pe("0x" + e.substring(4)).substring(26));
}
function E8(n, e) {
  return tc(On.recoverPublicKey(n, e));
}
const ke = BigInt(0), v8 = BigInt(2), T8 = BigInt(27), P8 = BigInt(28), S8 = BigInt(35), I8 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"), Bl = 4096 * 32;
function C8(n) {
  return { blobToKzgCommitment: (r) => {
    if ("computeBlobProof" in n) {
      if ("blobToKzgCommitment" in n && typeof n.blobToKzgCommitment == "function")
        return K(n.blobToKzgCommitment(V(r)));
    } else if ("blobToKzgCommitment" in n && typeof n.blobToKzgCommitment == "function")
      return K(n.blobToKzgCommitment(r));
    if ("blobToKZGCommitment" in n && typeof n.blobToKZGCommitment == "function")
      return K(n.blobToKZGCommitment(V(r)));
    A(!1, "unsupported KZG library", "kzg", n);
  }, computeBlobKzgProof: (r, i) => {
    if ("computeBlobProof" in n && typeof n.computeBlobProof == "function")
      return K(n.computeBlobProof(V(r), V(i)));
    if ("computeBlobKzgProof" in n && typeof n.computeBlobKzgProof == "function")
      return n.computeBlobKzgProof(r, i);
    if ("computeBlobKZGProof" in n && typeof n.computeBlobKZGProof == "function")
      return K(n.computeBlobKZGProof(V(r), V(i)));
    A(!1, "unsupported KZG library", "kzg", n);
  } };
}
function Mp(n, e) {
  let t = n.toString(16);
  for (; t.length < 2; )
    t = "0" + t;
  return t += zt(e).substring(4), "0x" + t;
}
function Da(n) {
  return n === "0x" ? null : oe(n);
}
function Ju(n, e) {
  try {
    return ts(n);
  } catch (t) {
    A(!1, t.message, e, n);
  }
}
function O8(n, e) {
  try {
    if (!Array.isArray(n))
      throw new Error("authorizationList: invalid array");
    const t = [];
    for (let r = 0; r < n.length; r++) {
      const i = n[r];
      if (!Array.isArray(i))
        throw new Error(`authorization[${r}]: invalid array`);
      if (i.length !== 6)
        throw new Error(`authorization[${r}]: wrong length`);
      if (!i[1])
        throw new Error(`authorization[${r}]: null address`);
      t.push({
        address: Da(i[1]),
        nonce: ye(i[2], "nonce"),
        chainId: ye(i[0], "chainId"),
        signature: ft.from({
          yParity: ns(i[3], "yParity"),
          r: $t(i[4], 32),
          s: $t(i[5], 32)
        })
      });
    }
    return t;
  } catch (t) {
    A(!1, t.message, e, n);
  }
}
function ns(n, e) {
  return n === "0x" ? 0 : te(n, e);
}
function ye(n, e) {
  if (n === "0x")
    return ke;
  const t = q(n, e);
  return A(t <= I8, "value exceeds uint size", e, t), t;
}
function ue(n, e) {
  const t = q(n, "value"), r = Ae(t);
  return A(r.length <= 32, "value too large", `tx.${e}`, t), r;
}
function Yu(n) {
  return ts(n).map((e) => [e.address, e.storageKeys]);
}
function N8(n) {
  return n.map((e) => [
    ue(e.chainId, "chainId"),
    e.address,
    ue(e.nonce, "nonce"),
    ue(e.signature.yParity, "yParity"),
    Ae(e.signature.r),
    Ae(e.signature.s)
  ]);
}
function R8(n, e) {
  A(Array.isArray(n), `invalid ${e}`, "value", n);
  for (let t = 0; t < n.length; t++)
    A(me(n[t], 32), "invalid ${ param } hash", `value[${t}]`, n[t]);
  return n;
}
function B8(n) {
  const e = Xo(n);
  A(Array.isArray(e) && (e.length === 9 || e.length === 6), "invalid field count for legacy transaction", "data", n);
  const t = {
    type: 0,
    nonce: ns(e[0], "nonce"),
    gasPrice: ye(e[1], "gasPrice"),
    gasLimit: ye(e[2], "gasLimit"),
    to: Da(e[3]),
    value: ye(e[4], "value"),
    data: V(e[5]),
    chainId: ke
  };
  if (e.length === 6)
    return t;
  const r = ye(e[6], "v"), i = ye(e[7], "r"), s = ye(e[8], "s");
  if (i === ke && s === ke)
    t.chainId = r;
  else {
    let a = (r - S8) / v8;
    a < ke && (a = ke), t.chainId = a, A(a !== ke || r === T8 || r === P8, "non-canonical legacy v", "v", e[6]), t.signature = ft.from({
      r: $t(e[7], 32),
      s: $t(e[8], 32),
      v: r
    });
  }
  return t;
}
function _8(n, e) {
  const t = [
    ue(n.nonce, "nonce"),
    ue(n.gasPrice || 0, "gasPrice"),
    ue(n.gasLimit, "gasLimit"),
    n.to || "0x",
    ue(n.value, "value"),
    n.data
  ];
  let r = ke;
  if (n.chainId != ke)
    r = q(n.chainId, "tx.chainId"), A(!e || e.networkV == null || e.legacyChainId === r, "tx.chainId/sig.v mismatch", "sig", e);
  else if (n.signature) {
    const s = n.signature.legacyChainId;
    s != null && (r = s);
  }
  if (!e)
    return r !== ke && (t.push(Ae(r)), t.push("0x"), t.push("0x")), yr(t);
  let i = BigInt(27 + e.yParity);
  return r !== ke ? i = ft.getChainIdV(r, e.v) : BigInt(e.v) !== i && A(!1, "tx.chainId/sig.v mismatch", "sig", e), t.push(Ae(i)), t.push(Ae(e.r)), t.push(Ae(e.s)), yr(t);
}
function Zu(n, e) {
  let t;
  try {
    if (t = ns(e[0], "yParity"), t !== 0 && t !== 1)
      throw new Error("bad yParity");
  } catch {
    A(!1, "invalid yParity", "yParity", e[0]);
  }
  const r = $t(e[1], 32), i = $t(e[2], 32), s = ft.from({ r, s: i, yParity: t });
  n.signature = s;
}
function k8(n) {
  const e = Xo(K(n).slice(1));
  A(Array.isArray(e) && (e.length === 9 || e.length === 12), "invalid field count for transaction type: 2", "data", V(n));
  const t = {
    type: 2,
    chainId: ye(e[0], "chainId"),
    nonce: ns(e[1], "nonce"),
    maxPriorityFeePerGas: ye(e[2], "maxPriorityFeePerGas"),
    maxFeePerGas: ye(e[3], "maxFeePerGas"),
    gasPrice: null,
    gasLimit: ye(e[4], "gasLimit"),
    to: Da(e[5]),
    value: ye(e[6], "value"),
    data: V(e[7]),
    accessList: Ju(e[8], "accessList")
  };
  return e.length === 9 || Zu(t, e.slice(9)), t;
}
function L8(n, e) {
  const t = [
    ue(n.chainId, "chainId"),
    ue(n.nonce, "nonce"),
    ue(n.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
    ue(n.maxFeePerGas || 0, "maxFeePerGas"),
    ue(n.gasLimit, "gasLimit"),
    n.to || "0x",
    ue(n.value, "value"),
    n.data,
    Yu(n.accessList || [])
  ];
  return e && (t.push(ue(e.yParity, "yParity")), t.push(Ae(e.r)), t.push(Ae(e.s))), le(["0x02", yr(t)]);
}
function M8(n) {
  const e = Xo(K(n).slice(1));
  A(Array.isArray(e) && (e.length === 8 || e.length === 11), "invalid field count for transaction type: 1", "data", V(n));
  const t = {
    type: 1,
    chainId: ye(e[0], "chainId"),
    nonce: ns(e[1], "nonce"),
    gasPrice: ye(e[2], "gasPrice"),
    gasLimit: ye(e[3], "gasLimit"),
    to: Da(e[4]),
    value: ye(e[5], "value"),
    data: V(e[6]),
    accessList: Ju(e[7], "accessList")
  };
  return e.length === 8 || Zu(t, e.slice(8)), t;
}
function D8(n, e) {
  const t = [
    ue(n.chainId, "chainId"),
    ue(n.nonce, "nonce"),
    ue(n.gasPrice || 0, "gasPrice"),
    ue(n.gasLimit, "gasLimit"),
    n.to || "0x",
    ue(n.value, "value"),
    n.data,
    Yu(n.accessList || [])
  ];
  return e && (t.push(ue(e.yParity, "recoveryParam")), t.push(Ae(e.r)), t.push(Ae(e.s))), le(["0x01", yr(t)]);
}
function U8(n) {
  let e = Xo(K(n).slice(1)), t = "3", r = null;
  if (e.length === 4 && Array.isArray(e[0])) {
    t = "3 (network format)";
    const s = e[1], a = e[2], o = e[3];
    A(Array.isArray(s), "invalid network format: blobs not an array", "fields[1]", s), A(Array.isArray(a), "invalid network format: commitments not an array", "fields[2]", a), A(Array.isArray(o), "invalid network format: proofs not an array", "fields[3]", o), A(s.length === a.length, "invalid network format: blobs/commitments length mismatch", "fields", e), A(s.length === o.length, "invalid network format: blobs/proofs length mismatch", "fields", e), r = [];
    for (let c = 0; c < e[1].length; c++)
      r.push({
        data: s[c],
        commitment: a[c],
        proof: o[c]
      });
    e = e[0];
  }
  A(Array.isArray(e) && (e.length === 11 || e.length === 14), `invalid field count for transaction type: ${t}`, "data", V(n));
  const i = {
    type: 3,
    chainId: ye(e[0], "chainId"),
    nonce: ns(e[1], "nonce"),
    maxPriorityFeePerGas: ye(e[2], "maxPriorityFeePerGas"),
    maxFeePerGas: ye(e[3], "maxFeePerGas"),
    gasPrice: null,
    gasLimit: ye(e[4], "gasLimit"),
    to: Da(e[5]),
    value: ye(e[6], "value"),
    data: V(e[7]),
    accessList: Ju(e[8], "accessList"),
    maxFeePerBlobGas: ye(e[9], "maxFeePerBlobGas"),
    blobVersionedHashes: e[10]
  };
  r && (i.blobs = r), A(i.to != null, `invalid address for transaction type: ${t}`, "data", n), A(Array.isArray(i.blobVersionedHashes), "invalid blobVersionedHashes: must be an array", "data", n);
  for (let s = 0; s < i.blobVersionedHashes.length; s++)
    A(me(i.blobVersionedHashes[s], 32), `invalid blobVersionedHash at index ${s}: must be length 32`, "data", n);
  return e.length === 11 || Zu(i, e.slice(11)), i;
}
function F8(n, e, t) {
  const r = [
    ue(n.chainId, "chainId"),
    ue(n.nonce, "nonce"),
    ue(n.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
    ue(n.maxFeePerGas || 0, "maxFeePerGas"),
    ue(n.gasLimit, "gasLimit"),
    n.to || go,
    ue(n.value, "value"),
    n.data,
    Yu(n.accessList || []),
    ue(n.maxFeePerBlobGas || 0, "maxFeePerBlobGas"),
    R8(n.blobVersionedHashes || [], "blobVersionedHashes")
  ];
  return e && (r.push(ue(e.yParity, "yParity")), r.push(Ae(e.r)), r.push(Ae(e.s)), t) ? le([
    "0x03",
    yr([
      r,
      t.map((i) => i.data),
      t.map((i) => i.commitment),
      t.map((i) => i.proof)
    ])
  ]) : le(["0x03", yr(r)]);
}
function G8(n) {
  const e = Xo(K(n).slice(1));
  A(Array.isArray(e) && (e.length === 10 || e.length === 13), "invalid field count for transaction type: 4", "data", V(n));
  const t = {
    type: 4,
    chainId: ye(e[0], "chainId"),
    nonce: ns(e[1], "nonce"),
    maxPriorityFeePerGas: ye(e[2], "maxPriorityFeePerGas"),
    maxFeePerGas: ye(e[3], "maxFeePerGas"),
    gasPrice: null,
    gasLimit: ye(e[4], "gasLimit"),
    to: Da(e[5]),
    value: ye(e[6], "value"),
    data: V(e[7]),
    accessList: Ju(e[8], "accessList"),
    authorizationList: O8(e[9], "authorizationList")
  };
  return e.length === 10 || Zu(t, e.slice(10)), t;
}
function H8(n, e) {
  const t = [
    ue(n.chainId, "chainId"),
    ue(n.nonce, "nonce"),
    ue(n.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
    ue(n.maxFeePerGas || 0, "maxFeePerGas"),
    ue(n.gasLimit, "gasLimit"),
    n.to || "0x",
    ue(n.value, "value"),
    n.data,
    Yu(n.accessList || []),
    N8(n.authorizationList || [])
  ];
  return e && (t.push(ue(e.yParity, "yParity")), t.push(Ae(e.r)), t.push(Ae(e.s))), le(["0x04", yr(t)]);
}
var Xt, Ms, Ds, Us, Fs, Gs, Hs, $s, Vs, zs, js, Ws, Ri, _r, bn, kr, Ks, Qs, Dc;
const pn = class pn {
  /**
   *  Creates a new Transaction with default values.
   */
  constructor() {
    _(this, Qs);
    _(this, Xt);
    _(this, Ms);
    _(this, Ds);
    _(this, Us);
    _(this, Fs);
    _(this, Gs);
    _(this, Hs);
    _(this, $s);
    _(this, Vs);
    _(this, zs);
    _(this, js);
    _(this, Ws);
    _(this, Ri);
    _(this, _r);
    _(this, bn);
    _(this, kr);
    _(this, Ks);
    g(this, Xt, null), g(this, Ms, null), g(this, Us, 0), g(this, Fs, ke), g(this, Gs, null), g(this, Hs, null), g(this, $s, null), g(this, Ds, "0x"), g(this, Vs, ke), g(this, zs, ke), g(this, js, null), g(this, Ws, null), g(this, Ri, null), g(this, _r, null), g(this, bn, null), g(this, kr, null), g(this, Ks, null);
  }
  /**
   *  The transaction type.
   *
   *  If null, the type will be automatically inferred based on
   *  explicit properties.
   */
  get type() {
    return m(this, Xt);
  }
  set type(e) {
    switch (e) {
      case null:
        g(this, Xt, null);
        break;
      case 0:
      case "legacy":
        g(this, Xt, 0);
        break;
      case 1:
      case "berlin":
      case "eip-2930":
        g(this, Xt, 1);
        break;
      case 2:
      case "london":
      case "eip-1559":
        g(this, Xt, 2);
        break;
      case 3:
      case "cancun":
      case "eip-4844":
        g(this, Xt, 3);
        break;
      case 4:
      case "pectra":
      case "eip-7702":
        g(this, Xt, 4);
        break;
      default:
        A(!1, "unsupported transaction type", "type", e);
    }
  }
  /**
   *  The name of the transaction type.
   */
  get typeName() {
    switch (this.type) {
      case 0:
        return "legacy";
      case 1:
        return "eip-2930";
      case 2:
        return "eip-1559";
      case 3:
        return "eip-4844";
      case 4:
        return "eip-7702";
    }
    return null;
  }
  /**
   *  The ``to`` address for the transaction or ``null`` if the
   *  transaction is an ``init`` transaction.
   */
  get to() {
    const e = m(this, Ms);
    return e == null && this.type === 3 ? go : e;
  }
  set to(e) {
    g(this, Ms, e == null ? null : oe(e));
  }
  /**
   *  The transaction nonce.
   */
  get nonce() {
    return m(this, Us);
  }
  set nonce(e) {
    g(this, Us, te(e, "value"));
  }
  /**
   *  The gas limit.
   */
  get gasLimit() {
    return m(this, Fs);
  }
  set gasLimit(e) {
    g(this, Fs, q(e));
  }
  /**
   *  The gas price.
   *
   *  On legacy networks this defines the fee that will be paid. On
   *  EIP-1559 networks, this should be ``null``.
   */
  get gasPrice() {
    const e = m(this, Gs);
    return e == null && (this.type === 0 || this.type === 1) ? ke : e;
  }
  set gasPrice(e) {
    g(this, Gs, e == null ? null : q(e, "gasPrice"));
  }
  /**
   *  The maximum priority fee per unit of gas to pay. On legacy
   *  networks this should be ``null``.
   */
  get maxPriorityFeePerGas() {
    const e = m(this, Hs);
    return e ?? (this.type === 2 || this.type === 3 ? ke : null);
  }
  set maxPriorityFeePerGas(e) {
    g(this, Hs, e == null ? null : q(e, "maxPriorityFeePerGas"));
  }
  /**
   *  The maximum total fee per unit of gas to pay. On legacy
   *  networks this should be ``null``.
   */
  get maxFeePerGas() {
    const e = m(this, $s);
    return e ?? (this.type === 2 || this.type === 3 ? ke : null);
  }
  set maxFeePerGas(e) {
    g(this, $s, e == null ? null : q(e, "maxFeePerGas"));
  }
  /**
   *  The transaction data. For ``init`` transactions this is the
   *  deployment code.
   */
  get data() {
    return m(this, Ds);
  }
  set data(e) {
    g(this, Ds, V(e));
  }
  /**
   *  The amount of ether (in wei) to send in this transactions.
   */
  get value() {
    return m(this, Vs);
  }
  set value(e) {
    g(this, Vs, q(e, "value"));
  }
  /**
   *  The chain ID this transaction is valid on.
   */
  get chainId() {
    return m(this, zs);
  }
  set chainId(e) {
    g(this, zs, q(e));
  }
  /**
   *  If signed, the signature for this transaction.
   */
  get signature() {
    return m(this, js) || null;
  }
  set signature(e) {
    g(this, js, e == null ? null : ft.from(e));
  }
  /**
   *  The access list.
   *
   *  An access list permits discounted (but pre-paid) access to
   *  bytecode and state variable access within contract execution.
   */
  get accessList() {
    const e = m(this, Ws) || null;
    return e ?? (this.type === 1 || this.type === 2 || this.type === 3 ? [] : null);
  }
  set accessList(e) {
    g(this, Ws, e == null ? null : ts(e));
  }
  get authorizationList() {
    const e = m(this, Ks) || null;
    return e == null && this.type === 4 ? [] : e;
  }
  set authorizationList(e) {
    g(this, Ks, e == null ? null : e.map((t) => Fb(t)));
  }
  /**
   *  The max fee per blob gas for Cancun transactions.
   */
  get maxFeePerBlobGas() {
    const e = m(this, Ri);
    return e == null && this.type === 3 ? ke : e;
  }
  set maxFeePerBlobGas(e) {
    g(this, Ri, e == null ? null : q(e, "maxFeePerBlobGas"));
  }
  /**
   *  The BLOb versioned hashes for Cancun transactions.
   */
  get blobVersionedHashes() {
    let e = m(this, _r);
    return e == null && this.type === 3 ? [] : e;
  }
  set blobVersionedHashes(e) {
    if (e != null) {
      A(Array.isArray(e), "blobVersionedHashes must be an Array", "value", e), e = e.slice();
      for (let t = 0; t < e.length; t++)
        A(me(e[t], 32), "invalid blobVersionedHash", `value[${t}]`, e[t]);
    }
    g(this, _r, e);
  }
  /**
   *  The BLObs for the Transaction, if any.
   *
   *  If ``blobs`` is non-``null``, then the [[seriailized]]
   *  will return the network formatted sidecar, otherwise it
   *  will return the standard [[link-eip-2718]] payload. The
   *  [[unsignedSerialized]] is unaffected regardless.
   *
   *  When setting ``blobs``, either fully valid [[Blob]] objects
   *  may be specified (i.e. correctly padded, with correct
   *  committments and proofs) or a raw [[BytesLike]] may
   *  be provided.
   *
   *  If raw [[BytesLike]] are provided, the [[kzg]] property **must**
   *  be already set. The blob will be correctly padded and the
   *  [[KzgLibrary]] will be used to compute the committment and
   *  proof for the blob.
   *
   *  A BLOb is a sequence of field elements, each of which must
   *  be within the BLS field modulo, so some additional processing
   *  may be required to encode arbitrary data to ensure each 32 byte
   *  field is within the valid range.
   *
   *  Setting this automatically populates [[blobVersionedHashes]],
   *  overwriting any existing values. Setting this to ``null``
   *  does **not** remove the [[blobVersionedHashes]], leaving them
   *  present.
   */
  get blobs() {
    return m(this, kr) == null ? null : m(this, kr).map((e) => Object.assign({}, e));
  }
  set blobs(e) {
    if (e == null) {
      g(this, kr, null);
      return;
    }
    const t = [], r = [];
    for (let i = 0; i < e.length; i++) {
      const s = e[i];
      if ($u(s)) {
        G(m(this, bn), "adding a raw blob requires a KZG library", "UNSUPPORTED_OPERATION", {
          operation: "set blobs()"
        });
        let a = K(s);
        if (A(a.length <= Bl, "blob is too large", `blobs[${i}]`, s), a.length !== Bl) {
          const u = new Uint8Array(Bl);
          u.set(a), a = u;
        }
        const o = m(this, bn).blobToKzgCommitment(a), c = V(m(this, bn).computeBlobKzgProof(a, o));
        t.push({
          data: V(a),
          commitment: V(o),
          proof: c
        }), r.push(Mp(1, o));
      } else {
        const a = V(s.commitment);
        t.push({
          data: V(s.data),
          commitment: a,
          proof: V(s.proof)
        }), r.push(Mp(1, a));
      }
    }
    g(this, kr, t), g(this, _r, r);
  }
  get kzg() {
    return m(this, bn);
  }
  set kzg(e) {
    e == null ? g(this, bn, null) : g(this, bn, C8(e));
  }
  /**
   *  The transaction hash, if signed. Otherwise, ``null``.
   */
  get hash() {
    return this.signature == null ? null : pe(z(this, Qs, Dc).call(this, !0, !1));
  }
  /**
   *  The pre-image hash of this transaction.
   *
   *  This is the digest that a [[Signer]] must sign to authorize
   *  this transaction.
   */
  get unsignedHash() {
    return pe(this.unsignedSerialized);
  }
  /**
   *  The sending address, if signed. Otherwise, ``null``.
   */
  get from() {
    return this.signature == null ? null : E8(this.unsignedHash, this.signature);
  }
  /**
   *  The public key of the sender, if signed. Otherwise, ``null``.
   */
  get fromPublicKey() {
    return this.signature == null ? null : On.recoverPublicKey(this.unsignedHash, this.signature);
  }
  /**
   *  Returns true if signed.
   *
   *  This provides a Type Guard that properties requiring a signed
   *  transaction are non-null.
   */
  isSigned() {
    return this.signature != null;
  }
  /**
   *  The serialized transaction.
   *
   *  This throws if the transaction is unsigned. For the pre-image,
   *  use [[unsignedSerialized]].
   */
  get serialized() {
    return z(this, Qs, Dc).call(this, !0, !0);
  }
  /**
   *  The transaction pre-image.
   *
   *  The hash of this is the digest which needs to be signed to
   *  authorize this transaction.
   */
  get unsignedSerialized() {
    return z(this, Qs, Dc).call(this, !1, !1);
  }
  /**
   *  Return the most "likely" type; currently the highest
   *  supported transaction type.
   */
  inferType() {
    const e = this.inferTypes();
    return e.indexOf(2) >= 0 ? 2 : e.pop();
  }
  /**
   *  Validates the explicit properties and returns a list of compatible
   *  transaction types.
   */
  inferTypes() {
    const e = this.gasPrice != null, t = this.maxFeePerGas != null || this.maxPriorityFeePerGas != null, r = this.accessList != null, i = m(this, Ri) != null || m(this, _r);
    this.maxFeePerGas != null && this.maxPriorityFeePerGas != null && G(this.maxFeePerGas >= this.maxPriorityFeePerGas, "priorityFee cannot be more than maxFee", "BAD_DATA", { value: this }), G(!t || this.type !== 0 && this.type !== 1, "transaction type cannot have maxFeePerGas or maxPriorityFeePerGas", "BAD_DATA", { value: this }), G(this.type !== 0 || !r, "legacy transaction cannot have accessList", "BAD_DATA", { value: this });
    const s = [];
    return this.type != null ? s.push(this.type) : this.authorizationList && this.authorizationList.length ? s.push(4) : t ? s.push(2) : e ? (s.push(1), r || s.push(0)) : r ? (s.push(1), s.push(2)) : (i && this.to || (s.push(0), s.push(1), s.push(2)), s.push(3)), s.sort(), s;
  }
  /**
   *  Returns true if this transaction is a legacy transaction (i.e.
   *  ``type === 0``).
   *
   *  This provides a Type Guard that the related properties are
   *  non-null.
   */
  isLegacy() {
    return this.type === 0;
  }
  /**
   *  Returns true if this transaction is berlin hardform transaction (i.e.
   *  ``type === 1``).
   *
   *  This provides a Type Guard that the related properties are
   *  non-null.
   */
  isBerlin() {
    return this.type === 1;
  }
  /**
   *  Returns true if this transaction is london hardform transaction (i.e.
   *  ``type === 2``).
   *
   *  This provides a Type Guard that the related properties are
   *  non-null.
   */
  isLondon() {
    return this.type === 2;
  }
  /**
   *  Returns true if this transaction is an [[link-eip-4844]] BLOB
   *  transaction.
   *
   *  This provides a Type Guard that the related properties are
   *  non-null.
   */
  isCancun() {
    return this.type === 3;
  }
  /**
   *  Create a copy of this transaciton.
   */
  clone() {
    return pn.from(this);
  }
  /**
   *  Return a JSON-friendly object.
   */
  toJSON() {
    const e = (t) => t == null ? null : t.toString();
    return {
      type: this.type,
      to: this.to,
      //            from: this.from,
      data: this.data,
      nonce: this.nonce,
      gasLimit: e(this.gasLimit),
      gasPrice: e(this.gasPrice),
      maxPriorityFeePerGas: e(this.maxPriorityFeePerGas),
      maxFeePerGas: e(this.maxFeePerGas),
      value: e(this.value),
      chainId: e(this.chainId),
      sig: this.signature ? this.signature.toJSON() : null,
      accessList: this.accessList
    };
  }
  /**
   *  Create a **Transaction** from a serialized transaction or a
   *  Transaction-like object.
   */
  static from(e) {
    if (e == null)
      return new pn();
    if (typeof e == "string") {
      const r = K(e);
      if (r[0] >= 127)
        return pn.from(B8(r));
      switch (r[0]) {
        case 1:
          return pn.from(M8(r));
        case 2:
          return pn.from(k8(r));
        case 3:
          return pn.from(U8(r));
        case 4:
          return pn.from(G8(r));
      }
      G(!1, "unsupported transaction type", "UNSUPPORTED_OPERATION", { operation: "from" });
    }
    const t = new pn();
    return e.type != null && (t.type = e.type), e.to != null && (t.to = e.to), e.nonce != null && (t.nonce = e.nonce), e.gasLimit != null && (t.gasLimit = e.gasLimit), e.gasPrice != null && (t.gasPrice = e.gasPrice), e.maxPriorityFeePerGas != null && (t.maxPriorityFeePerGas = e.maxPriorityFeePerGas), e.maxFeePerGas != null && (t.maxFeePerGas = e.maxFeePerGas), e.maxFeePerBlobGas != null && (t.maxFeePerBlobGas = e.maxFeePerBlobGas), e.data != null && (t.data = e.data), e.value != null && (t.value = e.value), e.chainId != null && (t.chainId = e.chainId), e.signature != null && (t.signature = ft.from(e.signature)), e.accessList != null && (t.accessList = e.accessList), e.authorizationList != null && (t.authorizationList = e.authorizationList), e.blobVersionedHashes != null && (t.blobVersionedHashes = e.blobVersionedHashes), e.kzg != null && (t.kzg = e.kzg), e.blobs != null && (t.blobs = e.blobs), e.hash != null && (A(t.isSigned(), "unsigned transaction cannot define '.hash'", "tx", e), A(t.hash === e.hash, "hash mismatch", "tx", e)), e.from != null && (A(t.isSigned(), "unsigned transaction cannot define '.from'", "tx", e), A(t.from.toLowerCase() === (e.from || "").toLowerCase(), "from mismatch", "tx", e)), t;
  }
};
Xt = new WeakMap(), Ms = new WeakMap(), Ds = new WeakMap(), Us = new WeakMap(), Fs = new WeakMap(), Gs = new WeakMap(), Hs = new WeakMap(), $s = new WeakMap(), Vs = new WeakMap(), zs = new WeakMap(), js = new WeakMap(), Ws = new WeakMap(), Ri = new WeakMap(), _r = new WeakMap(), bn = new WeakMap(), kr = new WeakMap(), Ks = new WeakMap(), Qs = new WeakSet(), Dc = function(e, t) {
  G(!e || this.signature != null, "cannot serialize unsigned transaction; maybe you meant .unsignedSerialized", "UNSUPPORTED_OPERATION", { operation: ".serialized" });
  const r = e ? this.signature : null;
  switch (this.inferType()) {
    case 0:
      return _8(this, r);
    case 1:
      return D8(this, r);
    case 2:
      return L8(this, r);
    case 3:
      return F8(this, r, t ? this.blobs : null);
    case 4:
      return H8(this, r);
  }
  G(!1, "unsupported transaction type", "UNSUPPORTED_OPERATION", { operation: ".serialized" });
};
let wo = pn;
function $8(n) {
  return A(typeof n.address == "string", "invalid address for hashAuthorization", "auth.address", n), pe(le([
    "0x05",
    yr([
      n.chainId != null ? Ae(n.chainId) : "0x",
      oe(n.address),
      n.nonce != null ? Ae(n.nonce) : "0x"
    ])
  ]));
}
function _n(n) {
  return pe(Qe(n));
}
var V8 = "";
const Dp = /* @__PURE__ */ new Map([[8217, "apostrophe"], [8260, "fraction slash"], [12539, "middle dot"]]), Up = 4;
function z8(n) {
  let e = 0;
  function t() {
    return n[e++] << 8 | n[e++];
  }
  let r = t(), i = 1, s = [0, 1];
  for (let I = 1; I < r; I++)
    s.push(i += t());
  let a = t(), o = e;
  e += a;
  let c = 0, u = 0;
  function l() {
    return c == 0 && (u = u << 8 | n[e++], c = 8), u >> --c & 1;
  }
  const d = 31, f = 2 ** d, p = f >>> 1, y = p >> 1, h = f - 1;
  let b = 0;
  for (let I = 0; I < d; I++) b = b << 1 | l();
  let x = [], w = 0, E = f;
  for (; ; ) {
    let I = Math.floor(((b - w + 1) * i - 1) / E), B = 0, U = r;
    for (; U - B > 1; ) {
      let L = B + U >>> 1;
      I < s[L] ? U = L : B = L;
    }
    if (B == 0) break;
    x.push(B);
    let C = w + Math.floor(E * s[B] / i), v = w + Math.floor(E * s[B + 1] / i) - 1;
    for (; !((C ^ v) & p); )
      b = b << 1 & h | l(), C = C << 1 & h, v = v << 1 & h | 1;
    for (; C & ~v & y; )
      b = b & p | b << 1 & h >>> 1 | l(), C = C << 1 ^ p, v = (v ^ p) << 1 | p | 1;
    w = C, E = 1 + v - C;
  }
  let N = r - 4;
  return x.map((I) => {
    switch (I - N) {
      case 3:
        return N + 65792 + (n[o++] << 16 | n[o++] << 8 | n[o++]);
      case 2:
        return N + 256 + (n[o++] << 8 | n[o++]);
      case 1:
        return N + n[o++];
      default:
        return I - 1;
    }
  });
}
function j8(n) {
  let e = 0;
  return () => n[e++];
}
function Gb(n) {
  return j8(z8(W8(n)));
}
function W8(n) {
  let e = [];
  [..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"].forEach((i, s) => e[i.charCodeAt(0)] = s);
  let t = n.length, r = new Uint8Array(6 * t >> 3);
  for (let i = 0, s = 0, a = 0, o = 0; i < t; i++)
    o = o << 6 | e[n.charCodeAt(i)], a += 6, a >= 8 && (r[s++] = o >> (a -= 8));
  return r;
}
function K8(n) {
  return n & 1 ? ~n >> 1 : n >> 1;
}
function Q8(n, e) {
  let t = Array(n);
  for (let r = 0, i = 0; r < n; r++) t[r] = i += K8(e());
  return t;
}
function Ao(n, e = 0) {
  let t = [];
  for (; ; ) {
    let r = n(), i = n();
    if (!i) break;
    e += r;
    for (let s = 0; s < i; s++)
      t.push(e + s);
    e += i + 1;
  }
  return t;
}
function Hb(n) {
  return Eo(() => {
    let e = Ao(n);
    if (e.length) return e;
  });
}
function $b(n) {
  let e = [];
  for (; ; ) {
    let t = n();
    if (t == 0) break;
    e.push(q8(t, n));
  }
  for (; ; ) {
    let t = n() - 1;
    if (t < 0) break;
    e.push(J8(t, n));
  }
  return e.flat();
}
function Eo(n) {
  let e = [];
  for (; ; ) {
    let t = n(e.length);
    if (!t) break;
    e.push(t);
  }
  return e;
}
function Vb(n, e, t) {
  let r = Array(n).fill().map(() => []);
  for (let i = 0; i < e; i++)
    Q8(n, t).forEach((s, a) => r[a].push(s));
  return r;
}
function q8(n, e) {
  let t = 1 + e(), r = e(), i = Eo(e);
  return Vb(i.length, 1 + n, e).flatMap((a, o) => {
    let [c, ...u] = a;
    return Array(i[o]).fill().map((l, d) => {
      let f = d * r;
      return [c + d * t, u.map((p) => p + f)];
    });
  });
}
function J8(n, e) {
  let t = 1 + e();
  return Vb(t, 1 + n, e).map((i) => [i[0], i.slice(1)]);
}
function Y8(n) {
  let e = [], t = Ao(n);
  return i(r([]), []), e;
  function r(s) {
    let a = n(), o = Eo(() => {
      let c = Ao(n).map((u) => t[u]);
      if (c.length) return r(c);
    });
    return { S: a, B: o, Q: s };
  }
  function i({ S: s, B: a }, o, c) {
    if (!(s & 4 && c === o[o.length - 1])) {
      s & 2 && (c = o[o.length - 1]), s & 1 && e.push(o);
      for (let u of a)
        for (let l of u.Q)
          i(u, [...o, l], c);
    }
  }
}
function Z8(n) {
  return n.toString(16).toUpperCase().padStart(2, "0");
}
function zb(n) {
  return `{${Z8(n)}}`;
}
function X8(n) {
  let e = [];
  for (let t = 0, r = n.length; t < r; ) {
    let i = n.codePointAt(t);
    t += i < 65536 ? 1 : 2, e.push(i);
  }
  return e;
}
function Pa(n) {
  let t = n.length;
  if (t < 4096) return String.fromCodePoint(...n);
  let r = [];
  for (let i = 0; i < t; )
    r.push(String.fromCodePoint(...n.slice(i, i += 4096)));
  return r.join("");
}
function eE(n, e) {
  let t = n.length, r = t - e.length;
  for (let i = 0; r == 0 && i < t; i++) r = n[i] - e[i];
  return r;
}
var tE = "AEUDTAHBCFQATQDRADAAcgAgADQAFAAsABQAHwAOACQADQARAAoAFwAHABIACAAPAAUACwAFAAwABAAQAAMABwAEAAoABQAIAAIACgABAAQAFAALAAIACwABAAIAAQAHAAMAAwAEAAsADAAMAAwACgANAA0AAwAKAAkABAAdAAYAZwDSAdsDJgC0CkMB8xhZAqfoC190UGcThgBurwf7PT09Pb09AjgJum8OjDllxHYUKXAPxzq6tABAxgK8ysUvWAgMPT09PT09PSs6LT2HcgWXWwFLoSMEEEl5RFVMKvO0XQ8ExDdJMnIgsj26PTQyy8FfEQ8AY8IPAGcEbwRwBHEEcgRzBHQEdQR2BHcEeAR6BHsEfAR+BIAEgfndBQoBYgULAWIFDAFiBNcE2ATZBRAFEQUvBdALFAsVDPcNBw13DYcOMA4xDjMB4BllHI0B2grbAMDpHLkQ7QHVAPRNQQFnGRUEg0yEB2uaJF8AJpIBpob5AERSMAKNoAXqaQLUBMCzEiACnwRZEkkVsS7tANAsBG0RuAQLEPABv9HICTUBXigPZwRBApMDOwAamhtaABqEAY8KvKx3LQ4ArAB8UhwEBAVSagD8AEFZADkBIadVj2UMUgx5Il4ANQC9AxIB1BlbEPMAs30CGxlXAhwZKQIECBc6EbsCoxngzv7UzRQA8M0BawL6ZwkN7wABAD33OQRcsgLJCjMCjqUChtw/km+NAsXPAoP2BT84PwURAK0RAvptb6cApQS/OMMey5HJS84UdxpxTPkCogVFITaTOwERAK5pAvkNBOVyA7q3BKlOJSALAgUIBRcEdASpBXqzABXFSWZOawLCOqw//AolCZdvv3dSBkEQGyelEPcMMwG1ATsN7UvYBPEGOwTJH30ZGQ/NlZwIpS3dDO0m4y6hgFoj9SqDBe1L9DzdC01RaA9ZC2UJ4zpjgU4DIQENIosK3Q05CG0Q8wrJaw3lEUUHOQPVSZoApQcBCxEdNRW1JhBirAsJOXcG+xr2C48mrxMpevwF0xohBk0BKRr/AM8u54WwWjFcHE9fBgMLJSPHFKhQIA0lQLd4SBobBxUlqQKRQ3BKh1E2HpMh9jw9DWYuE1F8B/U8BRlPC4E8nkarRQ4R0j6NPUgiSUwsBDV/LC8niwnPD4UMuXxyAVkJIQmxDHETMREXN8UIOQcZLZckJxUIIUaVYJoE958D8xPRAwsFPwlBBxMDtRwtEy4VKQUNgSTXAvM21S6zAo9WgAEXBcsPJR/fEFBH4A7pCJsCZQODJesALRUhABcimwhDYwBfj9hTBS7LCMdqbCN0A2cU52ERcweRDlcHpxwzFb8c4XDIXguGCCijrwlbAXUJmQFfBOMICTVbjKAgQWdTi1gYmyBhQT9d/AIxDGUVn0S9h3gCiw9rEhsBNQFzBzkNAQJ3Ee0RaxCVCOuGBDW1M/g6JQRPIYMgEQonA09szgsnJvkM+GkBoxJiAww0PXfuZ6tgtiQX/QcZMsVBYCHxC5JPzQycGsEYQlQuGeQHvwPzGvMn6kFXBf8DowMTOk0z7gS9C2kIiwk/AEkOoxcH1xhqCnGM0AExiwG3mQNXkYMCb48GNwcLAGcLhwV55QAdAqcIowAFAM8DVwA5Aq0HnQAZAIVBAT0DJy8BIeUCjwOTCDHLAZUvAfMpBBvDDBUA9zduSgLDsQKAamaiBd1YAo4CSTUBTSUEBU5HUQOvceEA2wBLBhPfRwEVq0rLGuNDAd9vKwDHAPsABTUHBUEBzQHzbQC3AV8LMQmis7UBTekpAIMAFWsB1wKJAN0ANQB/8QFTAE0FWfkF0wJPSQERMRgrV2EBuwMfATMBDQB5BsuNpckHHwRtB9MCEBsV4QLvLge1AQMi3xPNQsUCvd5VoWACZIECYkJbTa9bNyACofcCaJgCZgkCn4Q4GwsCZjsCZiYEbgR/A38TA36SOQY5dxc5gjojIwJsHQIyNjgKAm3HAm2u74ozZ0UrAWcA3gDhAEoFB5gMjQD+C8IADbUCdy8CdqI/AnlLQwJ4uh1c20WuRtcCfD8CesgCfQkCfPAFWQUgSABIfWMkAoFtAoAAAoAFAn+uSVhKWxUXSswC0QEC0MxLJwOITwOH5kTFkTIC8qFdAwMDrkvOTC0lA89NTE2vAos/AorYwRsHHUNnBbcCjjcCjlxAl4ECjtkCjlx4UbRTNQpS1FSFApP7ApMMAOkAHFUeVa9V0AYsGymVhjLheGZFOzkCl58C77JYIagAWSUClo8ClnycAKlZrFoJgU0AOwKWtQKWTlxEXNECmcsCmWRcyl0HGQKcmznCOp0CnBYCn5sCnriKAB0PMSoPAp3xAp6SALU9YTRh7wKe0wKgbgGpAp6fHwKeTqVjyGQnJSsCJ68CJn4CoPsCoEwCot0CocQCpi8Cpc4Cp/8AfQKn8mh8aLEAA0lqHGrRAqzjAqyuAq1nAq0CAlcdAlXcArHh1wMfTmyXArK9DQKy6Bds4G1jbUhfAyXNArZcOz9ukAMpRQK4XgK5RxUCuSp3cDZw4QK9GQK72nCWAzIRAr6IcgIDM3ECvhpzInNPAsPLAsMEc4J0SzVFdOADPKcDPJoDPb8CxXwCxkcCxhCJAshpUQLIRALJTwLJLgJknQLd0nh5YXiueSVL0AMYo2cCAmH0GfOVJHsLXpJeuxECz2sCz2wvS1PS8xOfAMatAs9zASnqA04SfksFAtwnAtuKAtJPA1JcA1NfAQEDVYyAiT8AyxbtYEWCHILTgs6DjQLaxwLZ3oQQhEmnPAOGpQAvA2QOhnFZ+QBVAt9lAt64c3cC4i/tFAHzMCcB9JsB8tKHAuvzAulweQLq+QLq5AD5RwG5Au6JAuuclqqXAwLuPwOF4Jh5cOBxoQLzAwBpA44WmZMC9xMDkW4DkocC95gC+dkC+GaaHJqruzebHgOdgwL++gEbADmfHJ+zAwWNA6ZqA6bZANHFAwZqoYiiBQkDDEkCwAA/AwDhQRdTARHzA2sHl2cFAJMtK7evvdsBiZkUfxEEOQH7KQUhDp0JnwCS/SlXxQL3AZ0AtwW5AG8LbUEuFCaNLgFDAYD8AbUmAHUDDgRtACwCFgyhAAAKAj0CagPdA34EkQEgRQUhfAoABQBEABMANhICdwEABdUDa+8KxQIA9wqfJ7+xt+UBkSFBQgHpFH8RNMCJAAQAGwBaAkUChIsABjpTOpSNbQC4Oo860ACNOME63AClAOgAywE6gTo7Ofw5+Tt2iTpbO56JOm85GAFWATMBbAUvNV01njWtNWY1dTW2NcU1gjWRNdI14TWeNa017jX9NbI1wTYCNhE1xjXVNhY2JzXeNe02LjY9Ni41LSE2OjY9Njw2yTcIBJA8VzY4Nt03IDcPNsogN4k3MAoEsDxnNiQ3GTdsOo03IULUQwdC4EMLHA8PCZsobShRVQYA6X8A6bABFCnXAukBowC9BbcAbwNzBL8MDAMMAQgDAAkKCwsLCQoGBAVVBI/DvwDz9b29kaUCb0QtsRTNLt4eGBcSHAMZFhYZEhYEARAEBUEcQRxBHEEcQRxBHEEaQRxBHEFCSTxBPElISUhBNkM2QTYbNklISVmBVIgBFLWZAu0BhQCjBcEAbykBvwGJAaQcEZ0ePCklMAAhMvAIMAL54gC7Bm8EescjzQMpARQpKgDUABavAj626xQAJP0A3etzuf4NNRA7efy2Z9NQrCnC0OSyANz5BBIbJ5IFDR6miIavYS6tprjjmuKebxm5C74Q225X1pkaYYPb6f1DK4k3xMEBb9S2WMjEibTNWhsRJIA+vwNVEiXTE5iXs/wezV66oFLfp9NZGYW+Gk19J2+bCT6Ye2w6LDYdgzKMUabk595eLBCXANz9HUpWbATq9vqXVx9XDg+Pc9Xp4+bsS005SVM/BJBM4687WUuf+Uj9dEi8aDNaPxtpbDxcG1THTImUMZq4UCaaNYpsVqraNyKLJXDYsFZ/5jl7bLRtO88t7P3xZaAxhb5OdPMXqsSkp1WCieG8jXm1U99+blvLlXzPCS+M93VnJCiK+09LfaSaBAVBomyDgJua8dfUzR7ga34IvR2Nvj+A9heJ6lsl1KG4NkI1032Cnff1m1wof2B9oHJK4bi6JkEdSqeNeiuo6QoZZincoc73/TH9SXF8sCE7XyuYyW8WSgbGFCjPV0ihLKhdPs08Tx82fYAkLLc4I2wdl4apY7GU5lHRFzRWJep7Ww3wbeA3qmd59/86P4xuNaqDpygXt6M85glSBHOCGgJDnt+pN9bK7HApMguX6+06RZNjzVmcZJ+wcUrJ9//bpRNxNuKpNl9uFds+S9tdx7LaM5ZkIrPj6nIU9mnbFtVbs9s/uLgl8MVczAwet+iOEzzBlYW7RCMgE6gyNLeq6+1tIx4dpgZnd0DksJS5f+JNDpwwcPNXaaVspq1fbQajOrJgK0ofKtJ1Ne90L6VO4MOl5S886p7u6xo7OLjG8TGL+HU1JXGJgppg4nNbNJ5nlzSpuPYy21JUEcUA94PoFiZfjZue+QnyQ80ekOuZVkxx4g+cvhJfHgNl4hy1/a6+RKcKlar/J29y//EztlbVPHVUeQ1zX86eQVAjR/M3dA9w4W8LfaXp4EgM85wOWasli837PzVMOnsLzR+k3o75/lRPAJSE1xAKQzEi5v10ke+VBvRt1cwQRMd+U5mLCTGVd6XiZtgBG5cDi0w22GKcVNvHiu5LQbZEDVtz0onn7k5+heuKXVsZtSzilkLRAUmjMXEMB3J9YC50XBxPiz53SC+EhnPl9WsKCv92SM/OFFIMJZYfl0WW8tIO3UxYcwdMAj7FSmgrsZ2aAZO03BOhP1bNNZItyXYQFTpC3SG1VuPDqH9GkiCDmE+JwxyIVSO5siDErAOpEXFgjy6PQtOVDj+s6e1r8heWVvmZnTciuf4EiNZzCAd7SOMhXERIOlsHIMG399i9aLTy3m2hRLZjJVDNLS53iGIK11dPqQt0zBDyg6qc7YqkDm2M5Ve6dCWCaCbTXX2rToaIgz6+zh4lYUi/+6nqcFMAkQJKHYLK0wYk5N9szV6xihDbDDFr45lN1K4aCXBq/FitPSud9gLt5ZVn+ZqGX7cwm2z5EGMgfFpIFyhGGuDPmso6TItTMwny+7uPnLCf4W6goFQFV0oQSsc9VfMmVLcLr6ZetDZbaSFTLqnSO/bIPjA3/zAUoqgGFAEQS4IhuMzEp2I3jJzbzkk/IEmyax+rhZTwd6f+CGtwPixu8IvzACquPWPREu9ZvGkUzpRwvRRuaNN6cr0W1wWits9ICdYJ7ltbgMiSL3sTPeufgNcVqMVWFkCPDH4jG2jA0XcVgQj62Cb29v9f/z/+2KbYvIv/zzjpQAPkliaVDzNrW57TZ/ZOyZD0nlfMmAIBIAGAI0D3k/mdN4xr9v85ZbZbbqfH2jGd5hUqNZWwl5SPfoGmfElmazUIeNL1j/mkF7VNAzTq4jNt8JoQ11NQOcmhprXoxSxfRGJ9LDEOAQ+dmxAQH90iti9e2u/MoeuaGcDTHoC+xsmEeWmxEKefQuIzHbpw5Tc5cEocboAD09oipWQhtTO1wivf/O+DRe2rpl/E9wlrzBorjJsOeG1B/XPW4EaJEFdNlECEZga5ZoGRHXgYouGRuVkm8tDESiEyFNo+3s5M5puSdTyUL2llnINVHEt91XUNW4ewdMgJ4boJfEyt/iY5WXqbA+A2Fkt5Z0lutiWhe9nZIyIUjyXDC3UsaG1t+eNx6z4W/OYoTB7A6x+dNSTOi9AInctbESqm5gvOLww7OWXPrmHwVZasrl4eD113pm+JtT7JVOvnCXqdzzdTRHgJ0PiGTFYW5Gvt9R9LD6Lzfs0v/TZZHSmyVNq7viIHE6DBK7Qp07Iz55EM8SYtQvZf/obBniTWi5C2/ovHfw4VndkE5XYdjOhCMRjDeOEfXeN/CwfGduiUIfsoFeUxXeQXba7c7972XNv8w+dTjjUM0QeNAReW+J014dKAD/McQYXT7c0GQPIkn3Ll6R7gGjuiQoZD0TEeEqQpKoZ15g/0OPQI17QiSv9AUROa/V/TQN3dvLArec3RrsYlvBm1b8LWzltdugsC50lNKYLEp2a+ZZYqPejULRlOJh5zj/LVMyTDvwKhMxxwuDkxJ1QpoNI0OTWLom4Z71SNzI9TV1iXJrIu9Wcnd+MCaAw8o1jSXd94YU/1gnkrC9BUEOtQvEIQ7g0i6h+KL2JKk8Ydl7HruvgWMSAmNe+LshGhV4qnWHhO9/RIPQzY1tHRj2VqOyNsDpK0cww+56AdDC4gsWwY0XxoucIWIqs/GcwnWqlaT0KPr8mbK5U94/301i1WLt4YINTVvCFBrFZbIbY8eycOdeJ2teD5IfPLCRg7jjcFTwlMFNl9zdh/o3E/hHPwj7BWg0MU09pPrBLbrCgm54A6H+I6v27+jL5gkjWg/iYdks9jbfVP5y/n0dlgWEMlKasl7JvFZd56LfybW1eeaVO0gxTfXZwD8G4SI116yx7UKVRgui6Ya1YpixqXeNLc8IxtAwCU5IhwQgn+NqHnRaDv61CxKhOq4pOX7M6pkA+Pmpd4j1vn6ACUALoLLc4vpXci8VidLxzm7qFBe7s+quuJs6ETYmnpgS3LwSZxPIltgBDXz8M1k/W2ySNv2f9/NPhxLGK2D21dkHeSGmenRT3Yqcdl0m/h3OYr8V+lXNYGf8aCCpd4bWjE4QIPj7vUKN4Nrfs7ML6Y2OyS830JCnofg/k7lpFpt4SqZc5HGg1HCOrHvOdC8bP6FGDbE/VV0mX4IakzbdS/op+Kt3G24/8QbBV7y86sGSQ/vZzU8FXs7u6jIvwchsEP2BpIhW3G8uWNwa3HmjfH/ZjhhCWvluAcF+nMf14ClKg5hGgtPLJ98ueNAkc5Hs2WZlk2QHvfreCK1CCGO6nMZVSb99VM/ajr8WHTte9JSmkXq/i/U943HEbdzW6Re/S88dKgg8pGOLlAeNiqrcLkUR3/aClFpMXcOUP3rmETcWSfMXZE3TUOi8i+fqRnTYLflVx/Vb/6GJ7eIRZUA6k3RYR3iFSK9c4iDdNwJuZL2FKz/IK5VimcNWEqdXjSoxSgmF0UPlDoUlNrPcM7ftmA8Y9gKiqKEHuWN+AZRIwtVSxye2Kf8rM3lhJ5XcBXU9n4v0Oy1RU2M+4qM8AQPVwse8ErNSob5oFPWxuqZnVzo1qB/IBxkM3EVUKFUUlO3e51259GgNcJbCmlvrdjtoTW7rChm1wyCKzpCTwozUUEOIcWLneRLgMXh+SjGSFkAllzbGS5HK7LlfCMRNRDSvbQPjcXaenNYxCvu2Qyznz6StuxVj66SgI0T8B6/sfHAJYZaZ78thjOSIFumNWLQbeZixDCCC+v0YBtkxiBB3jefHqZ/dFHU+crbj6OvS1x/JDD7vlm7zOVPwpUC01nhxZuY/63E7g";
const vo = 44032, ou = 4352, cu = 4449, uu = 4519, jb = 19, Wb = 21, Sa = 28, lu = Wb * Sa, nE = jb * lu, rE = vo + nE, iE = ou + jb, sE = cu + Wb, aE = uu + Sa;
function Qa(n) {
  return n >> 24 & 255;
}
function Kb(n) {
  return n & 16777215;
}
let Id, Fp, Cd, Uc;
function oE() {
  let n = Gb(tE);
  Id = new Map(Hb(n).flatMap((e, t) => e.map((r) => [r, t + 1 << 24]))), Fp = new Set(Ao(n)), Cd = /* @__PURE__ */ new Map(), Uc = /* @__PURE__ */ new Map();
  for (let [e, t] of $b(n)) {
    if (!Fp.has(e) && t.length == 2) {
      let [r, i] = t, s = Uc.get(r);
      s || (s = /* @__PURE__ */ new Map(), Uc.set(r, s)), s.set(i, e);
    }
    Cd.set(e, t.reverse());
  }
}
function Qb(n) {
  return n >= vo && n < rE;
}
function cE(n, e) {
  if (n >= ou && n < iE && e >= cu && e < sE)
    return vo + (n - ou) * lu + (e - cu) * Sa;
  if (Qb(n) && e > uu && e < aE && (n - vo) % Sa == 0)
    return n + (e - uu);
  {
    let t = Uc.get(n);
    return t && (t = t.get(e), t) ? t : -1;
  }
}
function qb(n) {
  Id || oE();
  let e = [], t = [], r = !1;
  function i(s) {
    let a = Id.get(s);
    a && (r = !0, s |= a), e.push(s);
  }
  for (let s of n)
    for (; ; ) {
      if (s < 128)
        e.push(s);
      else if (Qb(s)) {
        let a = s - vo, o = a / lu | 0, c = a % lu / Sa | 0, u = a % Sa;
        i(ou + o), i(cu + c), u > 0 && i(uu + u);
      } else {
        let a = Cd.get(s);
        a ? t.push(...a) : i(s);
      }
      if (!t.length) break;
      s = t.pop();
    }
  if (r && e.length > 1) {
    let s = Qa(e[0]);
    for (let a = 1; a < e.length; a++) {
      let o = Qa(e[a]);
      if (o == 0 || s <= o) {
        s = o;
        continue;
      }
      let c = a - 1;
      for (; ; ) {
        let u = e[c + 1];
        if (e[c + 1] = e[c], e[c] = u, !c || (s = Qa(e[--c]), s <= o)) break;
      }
      s = Qa(e[a]);
    }
  }
  return e;
}
function uE(n) {
  let e = [], t = [], r = -1, i = 0;
  for (let s of n) {
    let a = Qa(s), o = Kb(s);
    if (r == -1)
      a == 0 ? r = o : e.push(o);
    else if (i > 0 && i >= a)
      a == 0 ? (e.push(r, ...t), t.length = 0, r = o) : t.push(o), i = a;
    else {
      let c = cE(r, o);
      c >= 0 ? r = c : i == 0 && a == 0 ? (e.push(r), r = o) : (t.push(o), i = a);
    }
  }
  return r >= 0 && e.push(r, ...t), e;
}
function Jb(n) {
  return qb(n).map(Kb);
}
function lE(n) {
  return uE(qb(n));
}
const Gp = 45, Yb = ".", Zb = 65039, Xb = 1, du = (n) => Array.from(n);
function To(n, e) {
  return n.P.has(e) || n.Q.has(e);
}
class dE extends Array {
  get is_emoji() {
    return !0;
  }
  // free tagging system
}
let Od, ex, xi, Nd, tx, Ts, _l, ds, ai, Hp, Rd;
function Kf() {
  if (Od) return;
  let n = Gb(V8);
  const e = () => Ao(n), t = () => new Set(e()), r = (l, d) => d.forEach((f) => l.add(f));
  Od = new Map($b(n)), ex = t(), xi = e(), Nd = new Set(e().map((l) => xi[l])), xi = new Set(xi), tx = t(), t();
  let i = Hb(n), s = n();
  const a = () => {
    let l = /* @__PURE__ */ new Set();
    return e().forEach((d) => r(l, i[d])), r(l, e()), l;
  };
  Ts = Eo((l) => {
    let d = Eo(n).map((f) => f + 96);
    if (d.length) {
      let f = l >= s;
      d[0] -= 32, d = Pa(d), f && (d = `Restricted[${d}]`);
      let p = a(), y = a(), h = !n();
      return { N: d, P: p, Q: y, M: h, R: f };
    }
  }), _l = t(), ds = /* @__PURE__ */ new Map();
  let o = e().concat(du(_l)).sort((l, d) => l - d);
  o.forEach((l, d) => {
    let f = n(), p = o[d] = f ? o[d - f] : { V: [], M: /* @__PURE__ */ new Map() };
    p.V.push(l), _l.has(l) || ds.set(l, p);
  });
  for (let { V: l, M: d } of new Set(ds.values())) {
    let f = [];
    for (let y of l) {
      let h = Ts.filter((x) => To(x, y)), b = f.find(({ G: x }) => h.some((w) => x.has(w)));
      b || (b = { G: /* @__PURE__ */ new Set(), V: [] }, f.push(b)), b.V.push(y), r(b.G, h);
    }
    let p = f.flatMap((y) => du(y.G));
    for (let { G: y, V: h } of f) {
      let b = new Set(p.filter((x) => !y.has(x)));
      for (let x of h)
        d.set(x, b);
    }
  }
  ai = /* @__PURE__ */ new Set();
  let c = /* @__PURE__ */ new Set();
  const u = (l) => ai.has(l) ? c.add(l) : ai.add(l);
  for (let l of Ts) {
    for (let d of l.P) u(d);
    for (let d of l.Q) u(d);
  }
  for (let l of ai)
    !ds.has(l) && !c.has(l) && ds.set(l, Xb);
  r(ai, Jb(ai)), Hp = Y8(n).map((l) => dE.from(l)).sort(eE), Rd = /* @__PURE__ */ new Map();
  for (let l of Hp) {
    let d = [Rd];
    for (let f of l) {
      let p = d.map((y) => {
        let h = y.get(f);
        return h || (h = /* @__PURE__ */ new Map(), y.set(f, h)), h;
      });
      f === Zb ? d.push(...p) : d = p;
    }
    for (let f of d)
      f.V = l;
  }
}
function Qf(n) {
  return (nx(n) ? "" : `${qf(Xu([n]))} `) + zb(n);
}
function qf(n) {
  return `"${n}"‎`;
}
function fE(n) {
  if (n.length >= 4 && n[2] == Gp && n[3] == Gp)
    throw new Error(`invalid label extension: "${Pa(n.slice(0, 4))}"`);
}
function pE(n) {
  for (let t = n.lastIndexOf(95); t > 0; )
    if (n[--t] !== 95)
      throw new Error("underscore allowed only at start");
}
function hE(n) {
  let e = n[0], t = Dp.get(e);
  if (t) throw ao(`leading ${t}`);
  let r = n.length, i = -1;
  for (let s = 1; s < r; s++) {
    e = n[s];
    let a = Dp.get(e);
    if (a) {
      if (i == s) throw ao(`${t} + ${a}`);
      i = s + 1, t = a;
    }
  }
  if (i == r) throw ao(`trailing ${t}`);
}
function Xu(n, e = 1 / 0, t = zb) {
  let r = [];
  yE(n[0]) && r.push("◌"), n.length > e && (e >>= 1, n = [...n.slice(0, e), 8230, ...n.slice(-e)]);
  let i = 0, s = n.length;
  for (let a = 0; a < s; a++) {
    let o = n[a];
    nx(o) && (r.push(Pa(n.slice(i, a))), r.push(t(o)), i = a + 1);
  }
  return r.push(Pa(n.slice(i, s))), r.join("");
}
function yE(n) {
  return Kf(), xi.has(n);
}
function nx(n) {
  return Kf(), tx.has(n);
}
function mE(n) {
  return wE(bE(n, lE, vE));
}
function bE(n, e, t) {
  if (!n) return [];
  Kf();
  let r = 0;
  return n.split(Yb).map((i) => {
    let s = X8(i), a = {
      input: s,
      offset: r
      // codepoint, not substring!
    };
    r += s.length + 1;
    try {
      let o = a.tokens = EE(s, e, t), c = o.length, u;
      if (!c)
        throw new Error("empty label");
      let l = a.output = o.flat();
      if (pE(l), !(a.emoji = c > 1 || o[0].is_emoji) && l.every((f) => f < 128))
        fE(l), u = "ASCII";
      else {
        let f = o.flatMap((p) => p.is_emoji ? [] : p);
        if (!f.length)
          u = "Emoji";
        else {
          if (xi.has(l[0])) throw ao("leading combining mark");
          for (let h = 1; h < c; h++) {
            let b = o[h];
            if (!b.is_emoji && xi.has(b[0]))
              throw ao(`emoji + combining mark: "${Pa(o[h - 1])} + ${Xu([b[0]])}"`);
          }
          hE(l);
          let p = du(new Set(f)), [y] = gE(p);
          AE(y, f), xE(y, p), u = y.N;
        }
      }
      a.type = u;
    } catch (o) {
      a.error = o;
    }
    return a;
  });
}
function xE(n, e) {
  let t, r = [];
  for (let i of e) {
    let s = ds.get(i);
    if (s === Xb) return;
    if (s) {
      let a = s.M.get(i);
      if (t = t ? t.filter((o) => a.has(o)) : du(a), !t.length) return;
    } else
      r.push(i);
  }
  if (t) {
    for (let i of t)
      if (r.every((s) => To(i, s)))
        throw new Error(`whole-script confusable: ${n.N}/${i.N}`);
  }
}
function gE(n) {
  let e = Ts;
  for (let t of n) {
    let r = e.filter((i) => To(i, t));
    if (!r.length)
      throw Ts.some((i) => To(i, t)) ? ix(e[0], t) : rx(t);
    if (e = r, r.length == 1) break;
  }
  return e;
}
function wE(n) {
  return n.map(({ input: e, error: t, output: r }) => {
    if (t) {
      let i = t.message;
      throw new Error(n.length == 1 ? i : `Invalid label ${qf(Xu(e, 63))}: ${i}`);
    }
    return Pa(r);
  }).join(Yb);
}
function rx(n) {
  return new Error(`disallowed character: ${Qf(n)}`);
}
function ix(n, e) {
  let t = Qf(e), r = Ts.find((i) => i.P.has(e));
  return r && (t = `${r.N} ${t}`), new Error(`illegal mixture: ${n.N} + ${t}`);
}
function ao(n) {
  return new Error(`illegal placement: ${n}`);
}
function AE(n, e) {
  for (let t of e)
    if (!To(n, t))
      throw ix(n, t);
  if (n.M) {
    let t = Jb(e);
    for (let r = 1, i = t.length; r < i; r++)
      if (Nd.has(t[r])) {
        let s = r + 1;
        for (let a; s < i && Nd.has(a = t[s]); s++)
          for (let o = r; o < s; o++)
            if (t[o] == a)
              throw new Error(`duplicate non-spacing marks: ${Qf(a)}`);
        if (s - r > Up)
          throw new Error(`excessive non-spacing marks: ${qf(Xu(t.slice(r - 1, s)))} (${s - r}/${Up})`);
        r = s;
      }
  }
}
function EE(n, e, t) {
  let r = [], i = [];
  for (n = n.slice().reverse(); n.length; ) {
    let s = TE(n);
    if (s)
      i.length && (r.push(e(i)), i = []), r.push(t(s));
    else {
      let a = n.pop();
      if (ai.has(a))
        i.push(a);
      else {
        let o = Od.get(a);
        if (o)
          i.push(...o);
        else if (!ex.has(a))
          throw rx(a);
      }
    }
  }
  return i.length && r.push(e(i)), r;
}
function vE(n) {
  return n.filter((e) => e != Zb);
}
function TE(n, e) {
  let t = Rd, r, i = n.length;
  for (; i && (t = t.get(n[--i]), !!t); ) {
    let { V: s } = t;
    s && (r = s, n.length = i);
  }
  return r;
}
const sx = new Uint8Array(32);
sx.fill(0);
function $p(n) {
  return A(n.length !== 0, "invalid ENS name; empty component", "comp", n), n;
}
function ax(n) {
  const e = Qe(PE(n)), t = [];
  if (n.length === 0)
    return t;
  let r = 0;
  for (let i = 0; i < e.length; i++)
    e[i] === 46 && (t.push($p(e.slice(r, i))), r = i + 1);
  return A(r < e.length, "invalid ENS name; empty component", "name", n), t.push($p(e.slice(r))), t;
}
function PE(n) {
  try {
    if (n.length === 0)
      throw new Error("empty label");
    return mE(n);
  } catch (e) {
    A(!1, `invalid ENS name (${e.message})`, "name", n);
  }
}
function Bd(n) {
  A(typeof n == "string", "invalid ENS name; not a string", "name", n), A(n.length, "invalid ENS name (empty label)", "name", n);
  let e = sx;
  const t = ax(n);
  for (; t.length; )
    e = pe(le([e, pe(t.pop())]));
  return V(e);
}
function SE(n, e) {
  const t = e;
  return A(t <= 255, "DNS encoded label cannot exceed 255", "length", t), V(le(ax(n).map((r) => {
    A(r.length <= t, `label ${JSON.stringify(n)} exceeds ${t} bytes`, "name", n);
    const i = new Uint8Array(r.length + 1);
    return i.set(r, 1), i[0] = i.length - 1, i;
  }))) + "00";
}
function IE(n) {
  return typeof n == "string" && (n = Qe(n)), pe(le([
    Qe(n8),
    Qe(String(n.length)),
    n
  ]));
}
const CE = new RegExp("^bytes([0-9]+)$"), OE = new RegExp("^(u?int)([0-9]*)$"), NE = new RegExp("^(.*)\\[([0-9]*)\\]$");
function ox(n, e, t) {
  switch (n) {
    case "address":
      return K(t ? $t(e, 32) : oe(e));
    case "string":
      return Qe(e);
    case "bytes":
      return K(e);
    case "bool":
      return e = e ? "0x01" : "0x00", K(t ? $t(e, 32) : e);
  }
  let r = n.match(OE);
  if (r) {
    let i = r[1] === "int", s = parseInt(r[2] || "256");
    return A((!r[2] || r[2] === String(s)) && s % 8 === 0 && s !== 0 && s <= 256, "invalid number type", "type", n), t && (s = 256), i && (e = _f(e, s)), K($t(Ae(e), s / 8));
  }
  if (r = n.match(CE), r) {
    const i = parseInt(r[1]);
    return A(String(i) === r[1] && i !== 0 && i <= 32, "invalid bytes type", "type", n), A(or(e) === i, `invalid value for ${n}`, "value", e), t ? K(Im(e, 32)) : e;
  }
  if (r = n.match(NE), r && Array.isArray(e)) {
    const i = r[1], s = parseInt(r[2] || String(e.length));
    A(s === e.length, `invalid array length for ${n}`, "value", e);
    const a = [];
    return e.forEach(function(o) {
      a.push(ox(i, o, !0));
    }), K(le(a));
  }
  A(!1, "invalid type", "type", n);
}
function Gn(n, e) {
  A(n.length === e.length, "wrong number of values; expected ${ types.length }", "values", e);
  const t = [];
  return n.forEach(function(r, i) {
    t.push(ox(r, e[i]));
  }), V(le(t));
}
function Vp(n, e) {
  return pe(Gn(n, e));
}
const cx = new Uint8Array(32);
cx.fill(0);
const RE = BigInt(-1), ux = BigInt(0), lx = BigInt(1), BE = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
function _E(n) {
  const e = K(n), t = e.length % 32;
  return t ? le([e, cx.slice(t)]) : V(e);
}
const kE = pr(lx, 32), LE = pr(ux, 32), zp = {
  name: "string",
  version: "string",
  chainId: "uint256",
  verifyingContract: "address",
  salt: "bytes32"
}, kl = [
  "name",
  "version",
  "chainId",
  "verifyingContract",
  "salt"
];
function jp(n) {
  return function(e) {
    return A(typeof e == "string", `invalid domain value for ${JSON.stringify(n)}`, `domain.${n}`, e), e;
  };
}
const ME = {
  name: jp("name"),
  version: jp("version"),
  chainId: function(n) {
    const e = q(n, "domain.chainId");
    return A(e >= 0, "invalid chain ID", "domain.chainId", n), Number.isSafeInteger(e) ? Number(e) : nn(e);
  },
  verifyingContract: function(n) {
    try {
      return oe(n).toLowerCase();
    } catch {
    }
    A(!1, 'invalid domain value "verifyingContract"', "domain.verifyingContract", n);
  },
  salt: function(n) {
    const e = K(n, "domain.salt");
    return A(e.length === 32, 'invalid domain value "salt"', "domain.salt", n), V(e);
  }
};
function Ll(n) {
  {
    const e = n.match(/^(u?)int(\d+)$/);
    if (e) {
      const t = e[1] === "", r = parseInt(e[2]);
      A(r % 8 === 0 && r !== 0 && r <= 256 && e[2] === String(r), "invalid numeric width", "type", n);
      const i = Wa(BE, t ? r - 1 : r), s = t ? (i + lx) * RE : ux;
      return function(a) {
        const o = q(a, "value");
        return A(o >= s && o <= i, `value out-of-bounds for ${n}`, "value", o), pr(t ? _f(o, 256) : o, 32);
      };
    }
  }
  {
    const e = n.match(/^bytes(\d+)$/);
    if (e) {
      const t = parseInt(e[1]);
      return A(t !== 0 && t <= 32 && e[1] === String(t), "invalid bytes width", "type", n), function(r) {
        const i = K(r);
        return A(i.length === t, `invalid length for ${n}`, "value", r), _E(r);
      };
    }
  }
  switch (n) {
    case "address":
      return function(e) {
        return $t(oe(e), 32);
      };
    case "bool":
      return function(e) {
        return e ? kE : LE;
      };
    case "bytes":
      return function(e) {
        return pe(e);
      };
    case "string":
      return function(e) {
        return _n(e);
      };
  }
  return null;
}
function Wp(n, e) {
  return `${n}(${e.map(({ name: t, type: r }) => r + " " + t).join(",")})`;
}
function Pc(n) {
  const e = n.match(/^([^\x5b]*)((\x5b\d*\x5d)*)(\x5b(\d*)\x5d)$/);
  return e ? {
    base: e[1],
    index: e[2] + e[4],
    array: {
      base: e[1],
      prefix: e[1] + e[2],
      count: e[5] ? parseInt(e[5]) : -1
    }
  } : { base: n };
}
var ko, Yn, qs, wu, dx;
const _t = class _t {
  /**
   *  Create a new **TypedDataEncoder** for %%types%%.
   *
   *  This performs all necessary checking that types are valid and
   *  do not violate the [[link-eip-712]] structural constraints as
   *  well as computes the [[primaryType]].
   */
  constructor(e) {
    _(this, wu);
    /**
     *  The primary type for the structured [[types]].
     *
     *  This is derived automatically from the [[types]], since no
     *  recursion is possible, once the DAG for the types is consturcted
     *  internally, the primary type must be the only remaining type with
     *  no parent nodes.
     */
    T(this, "primaryType");
    _(this, ko);
    _(this, Yn);
    _(this, qs);
    g(this, Yn, /* @__PURE__ */ new Map()), g(this, qs, /* @__PURE__ */ new Map());
    const t = /* @__PURE__ */ new Map(), r = /* @__PURE__ */ new Map(), i = /* @__PURE__ */ new Map(), s = {};
    Object.keys(e).forEach((c) => {
      s[c] = e[c].map(({ name: u, type: l }) => {
        let { base: d, index: f } = Pc(l);
        return d === "int" && !e.int && (d = "int256"), d === "uint" && !e.uint && (d = "uint256"), { name: u, type: d + (f || "") };
      }), t.set(c, /* @__PURE__ */ new Set()), r.set(c, []), i.set(c, /* @__PURE__ */ new Set());
    }), g(this, ko, JSON.stringify(s));
    for (const c in s) {
      const u = /* @__PURE__ */ new Set();
      for (const l of s[c]) {
        A(!u.has(l.name), `duplicate variable name ${JSON.stringify(l.name)} in ${JSON.stringify(c)}`, "types", e), u.add(l.name);
        const d = Pc(l.type).base;
        A(d !== c, `circular type reference to ${JSON.stringify(d)}`, "types", e), !Ll(d) && (A(r.has(d), `unknown type ${JSON.stringify(d)}`, "types", e), r.get(d).push(c), t.get(c).add(d));
      }
    }
    const a = Array.from(r.keys()).filter((c) => r.get(c).length === 0);
    A(a.length !== 0, "missing primary type", "types", e), A(a.length === 1, `ambiguous primary types or unused types: ${a.map((c) => JSON.stringify(c)).join(", ")}`, "types", e), Y(this, { primaryType: a[0] });
    function o(c, u) {
      A(!u.has(c), `circular type reference to ${JSON.stringify(c)}`, "types", e), u.add(c);
      for (const l of t.get(c))
        if (r.has(l)) {
          o(l, u);
          for (const d of u)
            i.get(d).add(l);
        }
      u.delete(c);
    }
    o(this.primaryType, /* @__PURE__ */ new Set());
    for (const [c, u] of i) {
      const l = Array.from(u);
      l.sort(), m(this, Yn).set(c, Wp(c, s[c]) + l.map((d) => Wp(d, s[d])).join(""));
    }
  }
  /**
   *  The types.
   */
  get types() {
    return JSON.parse(m(this, ko));
  }
  /**
   *  Returnthe encoder for the specific %%type%%.
   */
  getEncoder(e) {
    let t = m(this, qs).get(e);
    return t || (t = z(this, wu, dx).call(this, e), m(this, qs).set(e, t)), t;
  }
  /**
   *  Return the full type for %%name%%.
   */
  encodeType(e) {
    const t = m(this, Yn).get(e);
    return A(t, `unknown type: ${JSON.stringify(e)}`, "name", e), t;
  }
  /**
   *  Return the encoded %%value%% for the %%type%%.
   */
  encodeData(e, t) {
    return this.getEncoder(e)(t);
  }
  /**
   *  Returns the hash of %%value%% for the type of %%name%%.
   */
  hashStruct(e, t) {
    return pe(this.encodeData(e, t));
  }
  /**
   *  Return the fulled encoded %%value%% for the [[types]].
   */
  encode(e) {
    return this.encodeData(this.primaryType, e);
  }
  /**
   *  Return the hash of the fully encoded %%value%% for the [[types]].
   */
  hash(e) {
    return this.hashStruct(this.primaryType, e);
  }
  /**
   *  @_ignore:
   */
  _visit(e, t, r) {
    if (Ll(e))
      return r(e, t);
    const i = Pc(e).array;
    if (i)
      return A(i.count === -1 || i.count === t.length, `array length mismatch; expected length ${i.count}`, "value", t), t.map((a) => this._visit(i.prefix, a, r));
    const s = this.types[e];
    if (s)
      return s.reduce((a, { name: o, type: c }) => (a[o] = this._visit(c, t[o], r), a), {});
    A(!1, `unknown type: ${e}`, "type", e);
  }
  /**
   *  Call %%calback%% for each value in %%value%%, passing the type and
   *  component within %%value%%.
   *
   *  This is useful for replacing addresses or other transformation that
   *  may be desired on each component, based on its type.
   */
  visit(e, t) {
    return this._visit(this.primaryType, e, t);
  }
  /**
   *  Create a new **TypedDataEncoder** for %%types%%.
   */
  static from(e) {
    return new _t(e);
  }
  /**
   *  Return the primary type for %%types%%.
   */
  static getPrimaryType(e) {
    return _t.from(e).primaryType;
  }
  /**
   *  Return the hashed struct for %%value%% using %%types%% and %%name%%.
   */
  static hashStruct(e, t, r) {
    return _t.from(t).hashStruct(e, r);
  }
  /**
   *  Return the domain hash for %%domain%%.
   */
  static hashDomain(e) {
    const t = [];
    for (const r in e) {
      if (e[r] == null)
        continue;
      const i = zp[r];
      A(i, `invalid typed-data domain key: ${JSON.stringify(r)}`, "domain", e), t.push({ name: r, type: i });
    }
    return t.sort((r, i) => kl.indexOf(r.name) - kl.indexOf(i.name)), _t.hashStruct("EIP712Domain", { EIP712Domain: t }, e);
  }
  /**
   *  Return the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.
   */
  static encode(e, t, r) {
    return le([
      "0x1901",
      _t.hashDomain(e),
      _t.from(t).hash(r)
    ]);
  }
  /**
   *  Return the hash of the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.
   */
  static hash(e, t, r) {
    return pe(_t.encode(e, t, r));
  }
  // Replaces all address types with ENS names with their looked up address
  /**
   * Resolves to the value from resolving all addresses in %%value%% for
   * %%types%% and the %%domain%%.
   */
  static async resolveNames(e, t, r, i) {
    e = Object.assign({}, e);
    for (const o in e)
      e[o] == null && delete e[o];
    const s = {};
    e.verifyingContract && !me(e.verifyingContract, 20) && (s[e.verifyingContract] = "0x");
    const a = _t.from(t);
    a.visit(r, (o, c) => (o === "address" && !me(c, 20) && (s[c] = "0x"), c));
    for (const o in s)
      s[o] = await i(o);
    return e.verifyingContract && s[e.verifyingContract] && (e.verifyingContract = s[e.verifyingContract]), r = a.visit(r, (o, c) => o === "address" && s[c] ? s[c] : c), { domain: e, value: r };
  }
  /**
   *  Returns the JSON-encoded payload expected by nodes which implement
   *  the JSON-RPC [[link-eip-712]] method.
   */
  static getPayload(e, t, r) {
    _t.hashDomain(e);
    const i = {}, s = [];
    kl.forEach((c) => {
      const u = e[c];
      u != null && (i[c] = ME[c](u), s.push({ name: c, type: zp[c] }));
    });
    const a = _t.from(t);
    t = a.types;
    const o = Object.assign({}, t);
    return A(o.EIP712Domain == null, "types must not contain EIP712Domain type", "types.EIP712Domain", t), o.EIP712Domain = s, a.encode(r), {
      types: o,
      domain: i,
      primaryType: a.primaryType,
      message: a.visit(r, (c, u) => {
        if (c.match(/^bytes(\d*)/))
          return V(K(u));
        if (c.match(/^u?int/))
          return q(u).toString();
        switch (c) {
          case "address":
            return u.toLowerCase();
          case "bool":
            return !!u;
          case "string":
            return A(typeof u == "string", "invalid string", "value", u), u;
        }
        A(!1, "unsupported type", "type", c);
      })
    };
  }
};
ko = new WeakMap(), Yn = new WeakMap(), qs = new WeakMap(), wu = new WeakSet(), dx = function(e) {
  {
    const i = Ll(e);
    if (i)
      return i;
  }
  const t = Pc(e).array;
  if (t) {
    const i = t.prefix, s = this.getEncoder(i);
    return (a) => {
      A(t.count === -1 || t.count === a.length, `array length mismatch; expected length ${t.count}`, "value", a);
      let o = a.map(s);
      return m(this, Yn).has(i) && (o = o.map(pe)), pe(le(o));
    };
  }
  const r = this.types[e];
  if (r) {
    const i = _n(m(this, Yn).get(e));
    return (s) => {
      const a = r.map(({ name: o, type: c }) => {
        const u = this.getEncoder(c)(s[o]);
        return m(this, Yn).has(c) ? pe(u) : u;
      });
      return a.unshift(i), le(a);
    };
  }
  A(!1, `unknown type: ${e}`, "type", e);
};
let Zr = _t;
function tt(n) {
  const e = /* @__PURE__ */ new Set();
  return n.forEach((t) => e.add(t)), Object.freeze(e);
}
const DE = "external public payable override", UE = tt(DE.split(" ")), fx = "constant external internal payable private public pure view override", FE = tt(fx.split(" ")), px = "constructor error event fallback function receive struct", hx = tt(px.split(" ")), yx = "calldata memory storage payable indexed", GE = tt(yx.split(" ")), HE = "tuple returns", $E = [px, yx, HE, fx].join(" "), VE = tt($E.split(" ")), zE = {
  "(": "OPEN_PAREN",
  ")": "CLOSE_PAREN",
  "[": "OPEN_BRACKET",
  "]": "CLOSE_BRACKET",
  ",": "COMMA",
  "@": "AT"
}, jE = new RegExp("^(\\s*)"), WE = new RegExp("^([0-9]+)"), KE = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)"), mx = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)$"), bx = new RegExp("^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$");
var Fe, en, Lo, _d;
const Au = class Au {
  constructor(e) {
    _(this, Lo);
    _(this, Fe);
    _(this, en);
    g(this, Fe, 0), g(this, en, e.slice());
  }
  get offset() {
    return m(this, Fe);
  }
  get length() {
    return m(this, en).length - m(this, Fe);
  }
  clone() {
    return new Au(m(this, en));
  }
  reset() {
    g(this, Fe, 0);
  }
  // Pops and returns the value of the next token, if it is a keyword in allowed; throws if out of tokens
  popKeyword(e) {
    const t = this.peek();
    if (t.type !== "KEYWORD" || !e.has(t.text))
      throw new Error(`expected keyword ${t.text}`);
    return this.pop().text;
  }
  // Pops and returns the value of the next token if it is `type`; throws if out of tokens
  popType(e) {
    if (this.peek().type !== e) {
      const t = this.peek();
      throw new Error(`expected ${e}; got ${t.type} ${JSON.stringify(t.text)}`);
    }
    return this.pop().text;
  }
  // Pops and returns a "(" TOKENS ")"
  popParen() {
    const e = this.peek();
    if (e.type !== "OPEN_PAREN")
      throw new Error("bad start");
    const t = z(this, Lo, _d).call(this, m(this, Fe) + 1, e.match + 1);
    return g(this, Fe, e.match + 1), t;
  }
  // Pops and returns the items within "(" ITEM1 "," ITEM2 "," ... ")"
  popParams() {
    const e = this.peek();
    if (e.type !== "OPEN_PAREN")
      throw new Error("bad start");
    const t = [];
    for (; m(this, Fe) < e.match - 1; ) {
      const r = this.peek().linkNext;
      t.push(z(this, Lo, _d).call(this, m(this, Fe) + 1, r)), g(this, Fe, r);
    }
    return g(this, Fe, e.match + 1), t;
  }
  // Returns the top Token, throwing if out of tokens
  peek() {
    if (m(this, Fe) >= m(this, en).length)
      throw new Error("out-of-bounds");
    return m(this, en)[m(this, Fe)];
  }
  // Returns the next value, if it is a keyword in `allowed`
  peekKeyword(e) {
    const t = this.peekType("KEYWORD");
    return t != null && e.has(t) ? t : null;
  }
  // Returns the value of the next token if it is `type`
  peekType(e) {
    if (this.length === 0)
      return null;
    const t = this.peek();
    return t.type === e ? t.text : null;
  }
  // Returns the next token; throws if out of tokens
  pop() {
    const e = this.peek();
    return Ua(this, Fe)._++, e;
  }
  toString() {
    const e = [];
    for (let t = m(this, Fe); t < m(this, en).length; t++) {
      const r = m(this, en)[t];
      e.push(`${r.type}:${r.text}`);
    }
    return `<TokenString ${e.join(" ")}>`;
  }
};
Fe = new WeakMap(), en = new WeakMap(), Lo = new WeakSet(), _d = function(e = 0, t = 0) {
  return new Au(m(this, en).slice(e, t).map((r) => Object.freeze(Object.assign({}, r, {
    match: r.match - e,
    linkBack: r.linkBack - e,
    linkNext: r.linkNext - e
  }))));
};
let on = Au;
function ni(n) {
  const e = [], t = (a) => {
    const o = s < n.length ? JSON.stringify(n[s]) : "$EOI";
    throw new Error(`invalid token ${o} at ${s}: ${a}`);
  };
  let r = [], i = [], s = 0;
  for (; s < n.length; ) {
    let a = n.substring(s), o = a.match(jE);
    o && (s += o[1].length, a = n.substring(s));
    const c = { depth: r.length, linkBack: -1, linkNext: -1, match: -1, type: "", text: "", offset: s, value: -1 };
    e.push(c);
    let u = zE[a[0]] || "";
    if (u) {
      if (c.type = u, c.text = a[0], s++, u === "OPEN_PAREN")
        r.push(e.length - 1), i.push(e.length - 1);
      else if (u == "CLOSE_PAREN")
        r.length === 0 && t("no matching open bracket"), c.match = r.pop(), e[c.match].match = e.length - 1, c.depth--, c.linkBack = i.pop(), e[c.linkBack].linkNext = e.length - 1;
      else if (u === "COMMA")
        c.linkBack = i.pop(), e[c.linkBack].linkNext = e.length - 1, i.push(e.length - 1);
      else if (u === "OPEN_BRACKET")
        c.type = "BRACKET";
      else if (u === "CLOSE_BRACKET") {
        let l = e.pop().text;
        if (e.length > 0 && e[e.length - 1].type === "NUMBER") {
          const d = e.pop().text;
          l = d + l, e[e.length - 1].value = te(d);
        }
        if (e.length === 0 || e[e.length - 1].type !== "BRACKET")
          throw new Error("missing opening bracket");
        e[e.length - 1].text += l;
      }
      continue;
    }
    if (o = a.match(KE), o) {
      if (c.text = o[1], s += c.text.length, VE.has(c.text)) {
        c.type = "KEYWORD";
        continue;
      }
      if (c.text.match(bx)) {
        c.type = "TYPE";
        continue;
      }
      c.type = "ID";
      continue;
    }
    if (o = a.match(WE), o) {
      c.text = o[1], c.type = "NUMBER", s += c.text.length;
      continue;
    }
    throw new Error(`unexpected token ${JSON.stringify(a[0])} at position ${s}`);
  }
  return new on(e.map((a) => Object.freeze(a)));
}
function Kp(n, e) {
  let t = [];
  for (const r in e.keys())
    n.has(r) && t.push(r);
  if (t.length > 1)
    throw new Error(`conflicting types: ${t.join(", ")}`);
}
function el(n, e) {
  if (e.peekKeyword(hx)) {
    const t = e.pop().text;
    if (t !== n)
      throw new Error(`expected ${n}, got ${t}`);
  }
  return e.popType("ID");
}
function mr(n, e) {
  const t = /* @__PURE__ */ new Set();
  for (; ; ) {
    const r = n.peekType("KEYWORD");
    if (r == null || e && !e.has(r))
      break;
    if (n.pop(), t.has(r))
      throw new Error(`duplicate keywords: ${JSON.stringify(r)}`);
    t.add(r);
  }
  return Object.freeze(t);
}
function xx(n) {
  let e = mr(n, FE);
  return Kp(e, tt("constant payable nonpayable".split(" "))), Kp(e, tt("pure view payable nonpayable".split(" "))), e.has("view") ? "view" : e.has("pure") ? "pure" : e.has("payable") ? "payable" : e.has("nonpayable") ? "nonpayable" : e.has("constant") ? "view" : "nonpayable";
}
function ur(n, e) {
  return n.popParams().map((t) => Ve.from(t, e));
}
function gx(n) {
  if (n.peekType("AT")) {
    if (n.pop(), n.peekType("NUMBER"))
      return q(n.pop().text);
    throw new Error("invalid gas");
  }
  return null;
}
function Ki(n) {
  if (n.length)
    throw new Error(`unexpected tokens at offset ${n.offset}: ${n.toString()}`);
}
const QE = new RegExp(/^(.*)\[([0-9]*)\]$/);
function Qp(n) {
  const e = n.match(bx);
  if (A(e, "invalid type", "type", n), n === "uint")
    return "uint256";
  if (n === "int")
    return "int256";
  if (e[2]) {
    const t = parseInt(e[2]);
    A(t !== 0 && t <= 32, "invalid bytes length", "type", n);
  } else if (e[3]) {
    const t = parseInt(e[3]);
    A(t !== 0 && t <= 256 && t % 8 === 0, "invalid numeric width", "type", n);
  }
  return n;
}
const we = {}, ht = Symbol.for("_ethers_internal"), qp = "_ParamTypeInternal", Jp = "_ErrorInternal", Yp = "_EventInternal", Zp = "_ConstructorInternal", Xp = "_FallbackInternal", eh = "_FunctionInternal", th = "_StructInternal";
var Js, Fc;
const kt = class kt {
  /**
   *  @private
   */
  constructor(e, t, r, i, s, a, o, c) {
    _(this, Js);
    /**
     *  The local name of the parameter (or ``""`` if unbound)
     */
    T(this, "name");
    /**
     *  The fully qualified type (e.g. ``"address"``, ``"tuple(address)"``,
     *  ``"uint256[3][]"``)
     */
    T(this, "type");
    /**
     *  The base type (e.g. ``"address"``, ``"tuple"``, ``"array"``)
     */
    T(this, "baseType");
    /**
     *  True if the parameters is indexed.
     *
     *  For non-indexable types this is ``null``.
     */
    T(this, "indexed");
    /**
     *  The components for the tuple.
     *
     *  For non-tuple types this is ``null``.
     */
    T(this, "components");
    /**
     *  The array length, or ``-1`` for dynamic-lengthed arrays.
     *
     *  For non-array types this is ``null``.
     */
    T(this, "arrayLength");
    /**
     *  The type of each child in the array.
     *
     *  For non-array types this is ``null``.
     */
    T(this, "arrayChildren");
    if (es(e, we, "ParamType"), Object.defineProperty(this, ht, { value: qp }), a && (a = Object.freeze(a.slice())), i === "array") {
      if (o == null || c == null)
        throw new Error("");
    } else if (o != null || c != null)
      throw new Error("");
    if (i === "tuple") {
      if (a == null)
        throw new Error("");
    } else if (a != null)
      throw new Error("");
    Y(this, {
      name: t,
      type: r,
      baseType: i,
      indexed: s,
      components: a,
      arrayLength: o,
      arrayChildren: c
    });
  }
  /**
   *  Return a string representation of this type.
   *
   *  For example,
   *
   *  ``sighash" => "(uint256,address)"``
   *
   *  ``"minimal" => "tuple(uint256,address) indexed"``
   *
   *  ``"full" => "tuple(uint256 foo, address bar) indexed baz"``
   */
  format(e) {
    if (e == null && (e = "sighash"), e === "json") {
      const r = this.name || "";
      if (this.isArray()) {
        const s = JSON.parse(this.arrayChildren.format("json"));
        return s.name = r, s.type += `[${this.arrayLength < 0 ? "" : String(this.arrayLength)}]`, JSON.stringify(s);
      }
      const i = {
        type: this.baseType === "tuple" ? "tuple" : this.type,
        name: r
      };
      return typeof this.indexed == "boolean" && (i.indexed = this.indexed), this.isTuple() && (i.components = this.components.map((s) => JSON.parse(s.format(e)))), JSON.stringify(i);
    }
    let t = "";
    return this.isArray() ? (t += this.arrayChildren.format(e), t += `[${this.arrayLength < 0 ? "" : String(this.arrayLength)}]`) : this.isTuple() ? t += "(" + this.components.map((r) => r.format(e)).join(e === "full" ? ", " : ",") + ")" : t += this.type, e !== "sighash" && (this.indexed === !0 && (t += " indexed"), e === "full" && this.name && (t += " " + this.name)), t;
  }
  /**
   *  Returns true if %%this%% is an Array type.
   *
   *  This provides a type gaurd ensuring that [[arrayChildren]]
   *  and [[arrayLength]] are non-null.
   */
  isArray() {
    return this.baseType === "array";
  }
  /**
   *  Returns true if %%this%% is a Tuple type.
   *
   *  This provides a type gaurd ensuring that [[components]]
   *  is non-null.
   */
  isTuple() {
    return this.baseType === "tuple";
  }
  /**
   *  Returns true if %%this%% is an Indexable type.
   *
   *  This provides a type gaurd ensuring that [[indexed]]
   *  is non-null.
   */
  isIndexable() {
    return this.indexed != null;
  }
  /**
   *  Walks the **ParamType** with %%value%%, calling %%process%%
   *  on each type, destructing the %%value%% recursively.
   */
  walk(e, t) {
    if (this.isArray()) {
      if (!Array.isArray(e))
        throw new Error("invalid array value");
      if (this.arrayLength !== -1 && e.length !== this.arrayLength)
        throw new Error("array is wrong length");
      const r = this;
      return e.map((i) => r.arrayChildren.walk(i, t));
    }
    if (this.isTuple()) {
      if (!Array.isArray(e))
        throw new Error("invalid tuple value");
      if (e.length !== this.components.length)
        throw new Error("array is wrong length");
      const r = this;
      return e.map((i, s) => r.components[s].walk(i, t));
    }
    return t(this.type, e);
  }
  /**
   *  Walks the **ParamType** with %%value%%, asynchronously calling
   *  %%process%% on each type, destructing the %%value%% recursively.
   *
   *  This can be used to resolve ENS names by walking and resolving each
   *  ``"address"`` type.
   */
  async walkAsync(e, t) {
    const r = [], i = [e];
    return z(this, Js, Fc).call(this, r, e, t, (s) => {
      i[0] = s;
    }), r.length && await Promise.all(r), i[0];
  }
  /**
   *  Creates a new **ParamType** for %%obj%%.
   *
   *  If %%allowIndexed%% then the ``indexed`` keyword is permitted,
   *  otherwise the ``indexed`` keyword will throw an error.
   */
  static from(e, t) {
    if (kt.isParamType(e))
      return e;
    if (typeof e == "string")
      try {
        return kt.from(ni(e), t);
      } catch {
        A(!1, "invalid param type", "obj", e);
      }
    else if (e instanceof on) {
      let o = "", c = "", u = null;
      mr(e, tt(["tuple"])).has("tuple") || e.peekType("OPEN_PAREN") ? (c = "tuple", u = e.popParams().map((h) => kt.from(h)), o = `tuple(${u.map((h) => h.format()).join(",")})`) : (o = Qp(e.popType("TYPE")), c = o);
      let l = null, d = null;
      for (; e.length && e.peekType("BRACKET"); ) {
        const h = e.pop();
        l = new kt(we, "", o, c, null, u, d, l), d = h.value, o += h.text, c = "array", u = null;
      }
      let f = null;
      if (mr(e, GE).has("indexed")) {
        if (!t)
          throw new Error("");
        f = !0;
      }
      const y = e.peekType("ID") ? e.pop().text : "";
      if (e.length)
        throw new Error("leftover tokens");
      return new kt(we, y, o, c, f, u, d, l);
    }
    const r = e.name;
    A(!r || typeof r == "string" && r.match(mx), "invalid name", "obj.name", r);
    let i = e.indexed;
    i != null && (A(t, "parameter cannot be indexed", "obj.indexed", e.indexed), i = !!i);
    let s = e.type, a = s.match(QE);
    if (a) {
      const o = parseInt(a[2] || "-1"), c = kt.from({
        type: a[1],
        components: e.components
      });
      return new kt(we, r || "", s, "array", i, null, o, c);
    }
    if (s === "tuple" || s.startsWith(
      "tuple("
      /* fix: ) */
    ) || s.startsWith(
      "("
      /* fix: ) */
    )) {
      const o = e.components != null ? e.components.map((u) => kt.from(u)) : null;
      return new kt(we, r || "", s, "tuple", i, o, null, null);
    }
    return s = Qp(e.type), new kt(we, r || "", s, s, i, null, null, null);
  }
  /**
   *  Returns true if %%value%% is a **ParamType**.
   */
  static isParamType(e) {
    return e && e[ht] === qp;
  }
};
Js = new WeakSet(), Fc = function(e, t, r, i) {
  if (this.isArray()) {
    if (!Array.isArray(t))
      throw new Error("invalid array value");
    if (this.arrayLength !== -1 && t.length !== this.arrayLength)
      throw new Error("array is wrong length");
    const a = this.arrayChildren, o = t.slice();
    o.forEach((c, u) => {
      var l;
      z(l = a, Js, Fc).call(l, e, c, r, (d) => {
        o[u] = d;
      });
    }), i(o);
    return;
  }
  if (this.isTuple()) {
    const a = this.components;
    let o;
    if (Array.isArray(t))
      o = t.slice();
    else {
      if (t == null || typeof t != "object")
        throw new Error("invalid tuple value");
      o = a.map((c) => {
        if (!c.name)
          throw new Error("cannot use object value with unnamed components");
        if (!(c.name in t))
          throw new Error(`missing value for component ${c.name}`);
        return t[c.name];
      });
    }
    if (o.length !== this.components.length)
      throw new Error("array is wrong length");
    o.forEach((c, u) => {
      var l;
      z(l = a[u], Js, Fc).call(l, e, c, r, (d) => {
        o[u] = d;
      });
    }), i(o);
    return;
  }
  const s = r(this.type, t);
  s.then ? e.push(async function() {
    i(await s);
  }()) : i(s);
};
let Ve = kt;
class Qi {
  /**
   *  @private
   */
  constructor(e, t, r) {
    /**
     *  The type of the fragment.
     */
    T(this, "type");
    /**
     *  The inputs for the fragment.
     */
    T(this, "inputs");
    es(e, we, "Fragment"), r = Object.freeze(r.slice()), Y(this, { type: t, inputs: r });
  }
  /**
   *  Creates a new **Fragment** for %%obj%%, wich can be any supported
   *  ABI frgament type.
   */
  static from(e) {
    if (typeof e == "string") {
      try {
        Qi.from(JSON.parse(e));
      } catch {
      }
      return Qi.from(ni(e));
    }
    if (e instanceof on)
      switch (e.peekKeyword(hx)) {
        case "constructor":
          return sr.from(e);
        case "error":
          return ut.from(e);
        case "event":
          return Pn.from(e);
        case "fallback":
        case "receive":
          return zn.from(e);
        case "function":
          return Sn.from(e);
        case "struct":
          return Vi.from(e);
      }
    else if (typeof e == "object") {
      switch (e.type) {
        case "constructor":
          return sr.from(e);
        case "error":
          return ut.from(e);
        case "event":
          return Pn.from(e);
        case "fallback":
        case "receive":
          return zn.from(e);
        case "function":
          return Sn.from(e);
        case "struct":
          return Vi.from(e);
      }
      G(!1, `unsupported type: ${e.type}`, "UNSUPPORTED_OPERATION", {
        operation: "Fragment.from"
      });
    }
    A(!1, "unsupported frgament object", "obj", e);
  }
  /**
   *  Returns true if %%value%% is a [[ConstructorFragment]].
   */
  static isConstructor(e) {
    return sr.isFragment(e);
  }
  /**
   *  Returns true if %%value%% is an [[ErrorFragment]].
   */
  static isError(e) {
    return ut.isFragment(e);
  }
  /**
   *  Returns true if %%value%% is an [[EventFragment]].
   */
  static isEvent(e) {
    return Pn.isFragment(e);
  }
  /**
   *  Returns true if %%value%% is a [[FunctionFragment]].
   */
  static isFunction(e) {
    return Sn.isFragment(e);
  }
  /**
   *  Returns true if %%value%% is a [[StructFragment]].
   */
  static isStruct(e) {
    return Vi.isFragment(e);
  }
}
class tl extends Qi {
  /**
   *  @private
   */
  constructor(t, r, i, s) {
    super(t, r, s);
    /**
     *  The name of the fragment.
     */
    T(this, "name");
    A(typeof i == "string" && i.match(mx), "invalid identifier", "name", i), s = Object.freeze(s.slice()), Y(this, { name: i });
  }
}
function Po(n, e) {
  return "(" + e.map((t) => t.format(n)).join(n === "full" ? ", " : ",") + ")";
}
class ut extends tl {
  /**
   *  @private
   */
  constructor(e, t, r) {
    super(e, "error", t, r), Object.defineProperty(this, ht, { value: Jp });
  }
  /**
   *  The Custom Error selector.
   */
  get selector() {
    return _n(this.format("sighash")).substring(0, 10);
  }
  /**
   *  Returns a string representation of this fragment as %%format%%.
   */
  format(e) {
    if (e == null && (e = "sighash"), e === "json")
      return JSON.stringify({
        type: "error",
        name: this.name,
        inputs: this.inputs.map((r) => JSON.parse(r.format(e)))
      });
    const t = [];
    return e !== "sighash" && t.push("error"), t.push(this.name + Po(e, this.inputs)), t.join(" ");
  }
  /**
   *  Returns a new **ErrorFragment** for %%obj%%.
   */
  static from(e) {
    if (ut.isFragment(e))
      return e;
    if (typeof e == "string")
      return ut.from(ni(e));
    if (e instanceof on) {
      const t = el("error", e), r = ur(e);
      return Ki(e), new ut(we, t, r);
    }
    return new ut(we, e.name, e.inputs ? e.inputs.map(Ve.from) : []);
  }
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is an
   *  **ErrorFragment**.
   */
  static isFragment(e) {
    return e && e[ht] === Jp;
  }
}
class Pn extends tl {
  /**
   *  @private
   */
  constructor(t, r, i, s) {
    super(t, "event", r, i);
    /**
     *  Whether this event is anonymous.
     */
    T(this, "anonymous");
    Object.defineProperty(this, ht, { value: Yp }), Y(this, { anonymous: s });
  }
  /**
   *  The Event topic hash.
   */
  get topicHash() {
    return _n(this.format("sighash"));
  }
  /**
   *  Returns a string representation of this event as %%format%%.
   */
  format(t) {
    if (t == null && (t = "sighash"), t === "json")
      return JSON.stringify({
        type: "event",
        anonymous: this.anonymous,
        name: this.name,
        inputs: this.inputs.map((i) => JSON.parse(i.format(t)))
      });
    const r = [];
    return t !== "sighash" && r.push("event"), r.push(this.name + Po(t, this.inputs)), t !== "sighash" && this.anonymous && r.push("anonymous"), r.join(" ");
  }
  /**
   *  Return the topic hash for an event with %%name%% and %%params%%.
   */
  static getTopicHash(t, r) {
    return r = (r || []).map((s) => Ve.from(s)), new Pn(we, t, r, !1).topicHash;
  }
  /**
   *  Returns a new **EventFragment** for %%obj%%.
   */
  static from(t) {
    if (Pn.isFragment(t))
      return t;
    if (typeof t == "string")
      try {
        return Pn.from(ni(t));
      } catch {
        A(!1, "invalid event fragment", "obj", t);
      }
    else if (t instanceof on) {
      const r = el("event", t), i = ur(t, !0), s = !!mr(t, tt(["anonymous"])).has("anonymous");
      return Ki(t), new Pn(we, r, i, s);
    }
    return new Pn(we, t.name, t.inputs ? t.inputs.map((r) => Ve.from(r, !0)) : [], !!t.anonymous);
  }
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is an
   *  **EventFragment**.
   */
  static isFragment(t) {
    return t && t[ht] === Yp;
  }
}
class sr extends Qi {
  /**
   *  @private
   */
  constructor(t, r, i, s, a) {
    super(t, r, i);
    /**
     *  Whether the constructor can receive an endowment.
     */
    T(this, "payable");
    /**
     *  The recommended gas limit for deployment or ``null``.
     */
    T(this, "gas");
    Object.defineProperty(this, ht, { value: Zp }), Y(this, { payable: s, gas: a });
  }
  /**
   *  Returns a string representation of this constructor as %%format%%.
   */
  format(t) {
    if (G(t != null && t !== "sighash", "cannot format a constructor for sighash", "UNSUPPORTED_OPERATION", { operation: "format(sighash)" }), t === "json")
      return JSON.stringify({
        type: "constructor",
        stateMutability: this.payable ? "payable" : "undefined",
        payable: this.payable,
        gas: this.gas != null ? this.gas : void 0,
        inputs: this.inputs.map((i) => JSON.parse(i.format(t)))
      });
    const r = [`constructor${Po(t, this.inputs)}`];
    return this.payable && r.push("payable"), this.gas != null && r.push(`@${this.gas.toString()}`), r.join(" ");
  }
  /**
   *  Returns a new **ConstructorFragment** for %%obj%%.
   */
  static from(t) {
    if (sr.isFragment(t))
      return t;
    if (typeof t == "string")
      try {
        return sr.from(ni(t));
      } catch {
        A(!1, "invalid constuctor fragment", "obj", t);
      }
    else if (t instanceof on) {
      mr(t, tt(["constructor"]));
      const r = ur(t), i = !!mr(t, UE).has("payable"), s = gx(t);
      return Ki(t), new sr(we, "constructor", r, i, s);
    }
    return new sr(we, "constructor", t.inputs ? t.inputs.map(Ve.from) : [], !!t.payable, t.gas != null ? t.gas : null);
  }
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is a
   *  **ConstructorFragment**.
   */
  static isFragment(t) {
    return t && t[ht] === Zp;
  }
}
class zn extends Qi {
  constructor(t, r, i) {
    super(t, "fallback", r);
    /**
     *  If the function can be sent value during invocation.
     */
    T(this, "payable");
    Object.defineProperty(this, ht, { value: Xp }), Y(this, { payable: i });
  }
  /**
   *  Returns a string representation of this fallback as %%format%%.
   */
  format(t) {
    const r = this.inputs.length === 0 ? "receive" : "fallback";
    if (t === "json") {
      const i = this.payable ? "payable" : "nonpayable";
      return JSON.stringify({ type: r, stateMutability: i });
    }
    return `${r}()${this.payable ? " payable" : ""}`;
  }
  /**
   *  Returns a new **FallbackFragment** for %%obj%%.
   */
  static from(t) {
    if (zn.isFragment(t))
      return t;
    if (typeof t == "string")
      try {
        return zn.from(ni(t));
      } catch {
        A(!1, "invalid fallback fragment", "obj", t);
      }
    else if (t instanceof on) {
      const r = t.toString(), i = t.peekKeyword(tt(["fallback", "receive"]));
      if (A(i, "type must be fallback or receive", "obj", r), t.popKeyword(tt(["fallback", "receive"])) === "receive") {
        const c = ur(t);
        return A(c.length === 0, "receive cannot have arguments", "obj.inputs", c), mr(t, tt(["payable"])), Ki(t), new zn(we, [], !0);
      }
      let a = ur(t);
      a.length ? A(a.length === 1 && a[0].type === "bytes", "invalid fallback inputs", "obj.inputs", a.map((c) => c.format("minimal")).join(", ")) : a = [Ve.from("bytes")];
      const o = xx(t);
      if (A(o === "nonpayable" || o === "payable", "fallback cannot be constants", "obj.stateMutability", o), mr(t, tt(["returns"])).has("returns")) {
        const c = ur(t);
        A(c.length === 1 && c[0].type === "bytes", "invalid fallback outputs", "obj.outputs", c.map((u) => u.format("minimal")).join(", "));
      }
      return Ki(t), new zn(we, a, o === "payable");
    }
    if (t.type === "receive")
      return new zn(we, [], !0);
    if (t.type === "fallback") {
      const r = [Ve.from("bytes")], i = t.stateMutability === "payable";
      return new zn(we, r, i);
    }
    A(!1, "invalid fallback description", "obj", t);
  }
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is a
   *  **FallbackFragment**.
   */
  static isFragment(t) {
    return t && t[ht] === Xp;
  }
}
class Sn extends tl {
  /**
   *  @private
   */
  constructor(t, r, i, s, a, o) {
    super(t, "function", r, s);
    /**
     *  If the function is constant (e.g. ``pure`` or ``view`` functions).
     */
    T(this, "constant");
    /**
     *  The returned types for the result of calling this function.
     */
    T(this, "outputs");
    /**
     *  The state mutability (e.g. ``payable``, ``nonpayable``, ``view``
     *  or ``pure``)
     */
    T(this, "stateMutability");
    /**
     *  If the function can be sent value during invocation.
     */
    T(this, "payable");
    /**
     *  The recommended gas limit to send when calling this function.
     */
    T(this, "gas");
    Object.defineProperty(this, ht, { value: eh }), a = Object.freeze(a.slice()), Y(this, { constant: i === "view" || i === "pure", gas: o, outputs: a, payable: i === "payable", stateMutability: i });
  }
  /**
   *  The Function selector.
   */
  get selector() {
    return _n(this.format("sighash")).substring(0, 10);
  }
  /**
   *  Returns a string representation of this function as %%format%%.
   */
  format(t) {
    if (t == null && (t = "sighash"), t === "json")
      return JSON.stringify({
        type: "function",
        name: this.name,
        constant: this.constant,
        stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
        payable: this.payable,
        gas: this.gas != null ? this.gas : void 0,
        inputs: this.inputs.map((i) => JSON.parse(i.format(t))),
        outputs: this.outputs.map((i) => JSON.parse(i.format(t)))
      });
    const r = [];
    return t !== "sighash" && r.push("function"), r.push(this.name + Po(t, this.inputs)), t !== "sighash" && (this.stateMutability !== "nonpayable" && r.push(this.stateMutability), this.outputs && this.outputs.length && (r.push("returns"), r.push(Po(t, this.outputs))), this.gas != null && r.push(`@${this.gas.toString()}`)), r.join(" ");
  }
  /**
   *  Return the selector for a function with %%name%% and %%params%%.
   */
  static getSelector(t, r) {
    return r = (r || []).map((s) => Ve.from(s)), new Sn(we, t, "view", r, [], null).selector;
  }
  /**
   *  Returns a new **FunctionFragment** for %%obj%%.
   */
  static from(t) {
    if (Sn.isFragment(t))
      return t;
    if (typeof t == "string")
      try {
        return Sn.from(ni(t));
      } catch {
        A(!1, "invalid function fragment", "obj", t);
      }
    else if (t instanceof on) {
      const i = el("function", t), s = ur(t), a = xx(t);
      let o = [];
      mr(t, tt(["returns"])).has("returns") && (o = ur(t));
      const c = gx(t);
      return Ki(t), new Sn(we, i, a, s, o, c);
    }
    let r = t.stateMutability;
    return r == null && (r = "payable", typeof t.constant == "boolean" ? (r = "view", t.constant || (r = "payable", typeof t.payable == "boolean" && !t.payable && (r = "nonpayable"))) : typeof t.payable == "boolean" && !t.payable && (r = "nonpayable")), new Sn(we, t.name, r, t.inputs ? t.inputs.map(Ve.from) : [], t.outputs ? t.outputs.map(Ve.from) : [], t.gas != null ? t.gas : null);
  }
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is a
   *  **FunctionFragment**.
   */
  static isFragment(t) {
    return t && t[ht] === eh;
  }
}
class Vi extends tl {
  /**
   *  @private
   */
  constructor(e, t, r) {
    super(e, "struct", t, r), Object.defineProperty(this, ht, { value: th });
  }
  /**
   *  Returns a string representation of this struct as %%format%%.
   */
  format() {
    throw new Error("@TODO");
  }
  /**
   *  Returns a new **StructFragment** for %%obj%%.
   */
  static from(e) {
    if (typeof e == "string")
      try {
        return Vi.from(ni(e));
      } catch {
        A(!1, "invalid struct fragment", "obj", e);
      }
    else if (e instanceof on) {
      const t = el("struct", e), r = ur(e);
      return Ki(e), new Vi(we, t, r);
    }
    return new Vi(we, e.name, e.inputs ? e.inputs.map(Ve.from) : []);
  }
  // @TODO: fix this return type
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is a
   *  **StructFragment**.
   */
  static isFragment(e) {
    return e && e[ht] === th;
  }
}
const un = /* @__PURE__ */ new Map();
un.set(0, "GENERIC_PANIC");
un.set(1, "ASSERT_FALSE");
un.set(17, "OVERFLOW");
un.set(18, "DIVIDE_BY_ZERO");
un.set(33, "ENUM_RANGE_ERROR");
un.set(34, "BAD_STORAGE_DATA");
un.set(49, "STACK_UNDERFLOW");
un.set(50, "ARRAY_RANGE_ERROR");
un.set(65, "OUT_OF_MEMORY");
un.set(81, "UNINITIALIZED_FUNCTION_CALL");
const qE = new RegExp(/^bytes([0-9]*)$/), JE = new RegExp(/^(u?int)([0-9]*)$/);
let Ml = null, nh = 1024;
function YE(n, e, t, r) {
  let i = "missing revert data", s = null;
  const a = null;
  let o = null;
  if (t) {
    i = "execution reverted";
    const u = K(t);
    if (t = V(t), u.length === 0)
      i += " (no data present; likely require(false) occurred", s = "require(false)";
    else if (u.length % 32 !== 4)
      i += " (could not decode reason; invalid data length)";
    else if (V(u.slice(0, 4)) === "0x08c379a0")
      try {
        s = r.decode(["string"], u.slice(4))[0], o = {
          signature: "Error(string)",
          name: "Error",
          args: [s]
        }, i += `: ${JSON.stringify(s)}`;
      } catch {
        i += " (could not decode reason; invalid string data)";
      }
    else if (V(u.slice(0, 4)) === "0x4e487b71")
      try {
        const l = Number(r.decode(["uint256"], u.slice(4))[0]);
        o = {
          signature: "Panic(uint256)",
          name: "Panic",
          args: [l]
        }, s = `Panic due to ${un.get(l) || "UNKNOWN"}(${l})`, i += `: ${s}`;
      } catch {
        i += " (could not decode panic code)";
      }
    else
      i += " (unknown custom error)";
  }
  const c = {
    to: e.to ? oe(e.to) : null,
    data: e.data || "0x"
  };
  return e.from && (c.from = oe(e.from)), ge(i, "CALL_EXCEPTION", {
    action: n,
    data: t,
    reason: s,
    transaction: c,
    invocation: a,
    revert: o
  });
}
var Lr, fs;
const Eu = class Eu {
  constructor() {
    _(this, Lr);
  }
  /**
   *  Get the default values for the given %%types%%.
   *
   *  For example, a ``uint`` is by default ``0`` and ``bool``
   *  is by default ``false``.
   */
  getDefaultValue(e) {
    const t = e.map((i) => z(this, Lr, fs).call(this, Ve.from(i)));
    return new Tc(t, "_").defaultValue();
  }
  /**
   *  Encode the %%values%% as the %%types%% into ABI data.
   *
   *  @returns DataHexstring
   */
  encode(e, t) {
    vm(t.length, e.length, "types/values length mismatch");
    const r = e.map((a) => z(this, Lr, fs).call(this, Ve.from(a))), i = new Tc(r, "_"), s = new gd();
    return i.encode(s, t), s.data;
  }
  /**
   *  Decode the ABI %%data%% as the %%types%% into values.
   *
   *  If %%loose%% decoding is enabled, then strict padding is
   *  not enforced. Some older versions of Solidity incorrectly
   *  padded event data emitted from ``external`` functions.
   */
  decode(e, t, r) {
    const i = e.map((a) => z(this, Lr, fs).call(this, Ve.from(a)));
    return new Tc(i, "_").decode(new wd(t, r, nh));
  }
  static _setDefaultMaxInflation(e) {
    A(typeof e == "number" && Number.isInteger(e), "invalid defaultMaxInflation factor", "value", e), nh = e;
  }
  /**
   *  Returns the shared singleton instance of a default [[AbiCoder]].
   *
   *  On the first call, the instance is created internally.
   */
  static defaultAbiCoder() {
    return Ml == null && (Ml = new Eu()), Ml;
  }
  /**
   *  Returns an ethers-compatible [[CallExceptionError]] Error for the given
   *  result %%data%% for the [[CallExceptionAction]] %%action%% against
   *  the Transaction %%tx%%.
   */
  static getBuiltinCallException(e, t, r) {
    return YE(e, t, r, Eu.defaultAbiCoder());
  }
};
Lr = new WeakSet(), fs = function(e) {
  if (e.isArray())
    return new d8(z(this, Lr, fs).call(this, e.arrayChildren), e.arrayLength, e.name);
  if (e.isTuple())
    return new Tc(e.components.map((r) => z(this, Lr, fs).call(this, r)), e.name);
  switch (e.baseType) {
    case "address":
      return new u8(e.name);
    case "bool":
      return new f8(e.name);
    case "string":
      return new A8(e.name);
    case "bytes":
      return new p8(e.name);
    case "":
      return new m8(e.name);
  }
  let t = e.type.match(JE);
  if (t) {
    let r = parseInt(t[2] || "256");
    return A(r !== 0 && r <= 256 && r % 8 === 0, "invalid " + t[1] + " bit length", "param", e), new w8(r / 8, t[1] === "int", e.name);
  }
  if (t = e.type.match(qE), t) {
    let r = parseInt(t[1]);
    return A(r !== 0 && r <= 32, "invalid bytes length", "param", e), new h8(r, e.name);
  }
  A(!1, "invalid type", "type", e.type);
};
let Xe = Eu;
class ZE {
  /**
   *  @_ignore:
   */
  constructor(e, t, r) {
    /**
     *  The matching fragment for the ``topic0``.
     */
    T(this, "fragment");
    /**
     *  The name of the Event.
     */
    T(this, "name");
    /**
     *  The full Event signature.
     */
    T(this, "signature");
    /**
     *  The topic hash for the Event.
     */
    T(this, "topic");
    /**
     *  The arguments passed into the Event with ``emit``.
     */
    T(this, "args");
    const i = e.name, s = e.format();
    Y(this, {
      fragment: e,
      name: i,
      signature: s,
      topic: t,
      args: r
    });
  }
}
class XE {
  /**
   *  @_ignore:
   */
  constructor(e, t, r, i) {
    /**
     *  The matching fragment from the transaction ``data``.
     */
    T(this, "fragment");
    /**
     *  The name of the Function from the transaction ``data``.
     */
    T(this, "name");
    /**
     *  The arguments passed to the Function from the transaction ``data``.
     */
    T(this, "args");
    /**
     *  The full Function signature from the transaction ``data``.
     */
    T(this, "signature");
    /**
     *  The selector for the Function from the transaction ``data``.
     */
    T(this, "selector");
    /**
     *  The ``value`` (in wei) from the transaction.
     */
    T(this, "value");
    const s = e.name, a = e.format();
    Y(this, {
      fragment: e,
      name: s,
      args: r,
      signature: a,
      selector: t,
      value: i
    });
  }
}
class ev {
  /**
   *  @_ignore:
   */
  constructor(e, t, r) {
    /**
     *  The matching fragment.
     */
    T(this, "fragment");
    /**
     *  The name of the Error.
     */
    T(this, "name");
    /**
     *  The arguments passed to the Error with ``revert``.
     */
    T(this, "args");
    /**
     *  The full Error signature.
     */
    T(this, "signature");
    /**
     *  The selector for the Error.
     */
    T(this, "selector");
    const i = e.name, s = e.format();
    Y(this, {
      fragment: e,
      name: i,
      args: r,
      signature: s,
      selector: t
    });
  }
}
class rh {
  /**
   *  @_ignore:
   */
  constructor(e) {
    /**
     *  The ``keccak256`` of the value logged.
     */
    T(this, "hash");
    /**
     *  @_ignore:
     */
    T(this, "_isIndexed");
    Y(this, { hash: e, _isIndexed: !0 });
  }
  /**
   *  Returns ``true`` if %%value%% is an **Indexed**.
   *
   *  This provides a Type Guard for property access.
   */
  static isIndexed(e) {
    return !!(e && e._isIndexed);
  }
}
const ih = {
  0: "generic panic",
  1: "assert(false)",
  17: "arithmetic overflow",
  18: "division or modulo by zero",
  33: "enum overflow",
  34: "invalid encoded storage byte array accessed",
  49: "out-of-bounds array access; popping on an empty array",
  50: "out-of-bounds access of an array or bytesN",
  65: "out of memory",
  81: "uninitialized function"
}, sh = {
  "0x08c379a0": {
    signature: "Error(string)",
    name: "Error",
    inputs: ["string"],
    reason: (n) => `reverted with reason string ${JSON.stringify(n)}`
  },
  "0x4e487b71": {
    signature: "Panic(uint256)",
    name: "Panic",
    inputs: ["uint256"],
    reason: (n) => {
      let e = "unknown panic code";
      return n >= 0 && n <= 255 && ih[n.toString()] && (e = ih[n.toString()]), `reverted with panic code 0x${n.toString(16)} (${e})`;
    }
  }
};
var xn, gn, wn, ze, Rn, Gc, Hc;
const fi = class fi {
  /**
   *  Create a new Interface for the %%fragments%%.
   */
  constructor(e) {
    _(this, Rn);
    /**
     *  All the Contract ABI members (i.e. methods, events, errors, etc).
     */
    T(this, "fragments");
    /**
     *  The Contract constructor.
     */
    T(this, "deploy");
    /**
     *  The Fallback method, if any.
     */
    T(this, "fallback");
    /**
     *  If receiving ether is supported.
     */
    T(this, "receive");
    _(this, xn);
    _(this, gn);
    _(this, wn);
    //    #structs: Map<string, StructFragment>;
    _(this, ze);
    let t = [];
    typeof e == "string" ? t = JSON.parse(e) : t = e, g(this, wn, /* @__PURE__ */ new Map()), g(this, xn, /* @__PURE__ */ new Map()), g(this, gn, /* @__PURE__ */ new Map());
    const r = [];
    for (const a of t)
      try {
        r.push(Qi.from(a));
      } catch (o) {
        console.log(`[Warning] Invalid Fragment ${JSON.stringify(a)}:`, o.message);
      }
    Y(this, {
      fragments: Object.freeze(r)
    });
    let i = null, s = !1;
    g(this, ze, this.getAbiCoder()), this.fragments.forEach((a, o) => {
      let c;
      switch (a.type) {
        case "constructor":
          if (this.deploy) {
            console.log("duplicate definition - constructor");
            return;
          }
          Y(this, { deploy: a });
          return;
        case "fallback":
          a.inputs.length === 0 ? s = !0 : (A(!i || a.payable !== i.payable, "conflicting fallback fragments", `fragments[${o}]`, a), i = a, s = i.payable);
          return;
        case "function":
          c = m(this, wn);
          break;
        case "event":
          c = m(this, gn);
          break;
        case "error":
          c = m(this, xn);
          break;
        default:
          return;
      }
      const u = a.format();
      c.has(u) || c.set(u, a);
    }), this.deploy || Y(this, {
      deploy: sr.from("constructor()")
    }), Y(this, { fallback: i, receive: s });
  }
  /**
   *  Returns the entire Human-Readable ABI, as an array of
   *  signatures, optionally as %%minimal%% strings, which
   *  removes parameter names and unneceesary spaces.
   */
  format(e) {
    const t = e ? "minimal" : "full";
    return this.fragments.map((i) => i.format(t));
  }
  /**
   *  Return the JSON-encoded ABI. This is the format Solidiy
   *  returns.
   */
  formatJson() {
    const e = this.fragments.map((t) => t.format("json"));
    return JSON.stringify(e.map((t) => JSON.parse(t)));
  }
  /**
   *  The ABI coder that will be used to encode and decode binary
   *  data.
   */
  getAbiCoder() {
    return Xe.defaultAbiCoder();
  }
  /**
   *  Get the function name for %%key%%, which may be a function selector,
   *  function name or function signature that belongs to the ABI.
   */
  getFunctionName(e) {
    const t = z(this, Rn, Gc).call(this, e, null, !1);
    return A(t, "no matching function", "key", e), t.name;
  }
  /**
   *  Returns true if %%key%% (a function selector, function name or
   *  function signature) is present in the ABI.
   *
   *  In the case of a function name, the name may be ambiguous, so
   *  accessing the [[FunctionFragment]] may require refinement.
   */
  hasFunction(e) {
    return !!z(this, Rn, Gc).call(this, e, null, !1);
  }
  /**
   *  Get the [[FunctionFragment]] for %%key%%, which may be a function
   *  selector, function name or function signature that belongs to the ABI.
   *
   *  If %%values%% is provided, it will use the Typed API to handle
   *  ambiguous cases where multiple functions match by name.
   *
   *  If the %%key%% and %%values%% do not refine to a single function in
   *  the ABI, this will throw.
   */
  getFunction(e, t) {
    return z(this, Rn, Gc).call(this, e, t || null, !0);
  }
  /**
   *  Iterate over all functions, calling %%callback%%, sorted by their name.
   */
  forEachFunction(e) {
    const t = Array.from(m(this, wn).keys());
    t.sort((r, i) => r.localeCompare(i));
    for (let r = 0; r < t.length; r++) {
      const i = t[r];
      e(m(this, wn).get(i), r);
    }
  }
  /**
   *  Get the event name for %%key%%, which may be a topic hash,
   *  event name or event signature that belongs to the ABI.
   */
  getEventName(e) {
    const t = z(this, Rn, Hc).call(this, e, null, !1);
    return A(t, "no matching event", "key", e), t.name;
  }
  /**
   *  Returns true if %%key%% (an event topic hash, event name or
   *  event signature) is present in the ABI.
   *
   *  In the case of an event name, the name may be ambiguous, so
   *  accessing the [[EventFragment]] may require refinement.
   */
  hasEvent(e) {
    return !!z(this, Rn, Hc).call(this, e, null, !1);
  }
  /**
   *  Get the [[EventFragment]] for %%key%%, which may be a topic hash,
   *  event name or event signature that belongs to the ABI.
   *
   *  If %%values%% is provided, it will use the Typed API to handle
   *  ambiguous cases where multiple events match by name.
   *
   *  If the %%key%% and %%values%% do not refine to a single event in
   *  the ABI, this will throw.
   */
  getEvent(e, t) {
    return z(this, Rn, Hc).call(this, e, t || null, !0);
  }
  /**
   *  Iterate over all events, calling %%callback%%, sorted by their name.
   */
  forEachEvent(e) {
    const t = Array.from(m(this, gn).keys());
    t.sort((r, i) => r.localeCompare(i));
    for (let r = 0; r < t.length; r++) {
      const i = t[r];
      e(m(this, gn).get(i), r);
    }
  }
  /**
   *  Get the [[ErrorFragment]] for %%key%%, which may be an error
   *  selector, error name or error signature that belongs to the ABI.
   *
   *  If %%values%% is provided, it will use the Typed API to handle
   *  ambiguous cases where multiple errors match by name.
   *
   *  If the %%key%% and %%values%% do not refine to a single error in
   *  the ABI, this will throw.
   */
  getError(e, t) {
    if (me(e)) {
      const i = e.toLowerCase();
      if (sh[i])
        return ut.from(sh[i].signature);
      for (const s of m(this, xn).values())
        if (i === s.selector)
          return s;
      return null;
    }
    if (e.indexOf("(") === -1) {
      const i = [];
      for (const [s, a] of m(this, xn))
        s.split(
          "("
          /* fix:) */
        )[0] === e && i.push(a);
      if (i.length === 0)
        return e === "Error" ? ut.from("error Error(string)") : e === "Panic" ? ut.from("error Panic(uint256)") : null;
      if (i.length > 1) {
        const s = i.map((a) => JSON.stringify(a.format())).join(", ");
        A(!1, `ambiguous error description (i.e. ${s})`, "name", e);
      }
      return i[0];
    }
    if (e = ut.from(e).format(), e === "Error(string)")
      return ut.from("error Error(string)");
    if (e === "Panic(uint256)")
      return ut.from("error Panic(uint256)");
    const r = m(this, xn).get(e);
    return r || null;
  }
  /**
   *  Iterate over all errors, calling %%callback%%, sorted by their name.
   */
  forEachError(e) {
    const t = Array.from(m(this, xn).keys());
    t.sort((r, i) => r.localeCompare(i));
    for (let r = 0; r < t.length; r++) {
      const i = t[r];
      e(m(this, xn).get(i), r);
    }
  }
  // Get the 4-byte selector used by Solidity to identify a function
  /*
  getSelector(fragment: ErrorFragment | FunctionFragment): string {
      if (typeof(fragment) === "string") {
          const matches: Array<Fragment> = [ ];
  
          try { matches.push(this.getFunction(fragment)); } catch (error) { }
          try { matches.push(this.getError(<string>fragment)); } catch (_) { }
  
          if (matches.length === 0) {
              logger.throwArgumentError("unknown fragment", "key", fragment);
          } else if (matches.length > 1) {
              logger.throwArgumentError("ambiguous fragment matches function and error", "key", fragment);
          }
  
          fragment = matches[0];
      }
  
      return dataSlice(id(fragment.format()), 0, 4);
  }
      */
  // Get the 32-byte topic hash used by Solidity to identify an event
  /*
  getEventTopic(fragment: EventFragment): string {
      //if (typeof(fragment) === "string") { fragment = this.getEvent(eventFragment); }
      return id(fragment.format());
  }
  */
  _decodeParams(e, t) {
    return m(this, ze).decode(e, t);
  }
  _encodeParams(e, t) {
    return m(this, ze).encode(e, t);
  }
  /**
   *  Encodes a ``tx.data`` object for deploying the Contract with
   *  the %%values%% as the constructor arguments.
   */
  encodeDeploy(e) {
    return this._encodeParams(this.deploy.inputs, e || []);
  }
  /**
   *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the
   *  specified error (see [[getError]] for valid values for
   *  %%key%%).
   *
   *  Most developers should prefer the [[parseCallResult]] method instead,
   *  which will automatically detect a ``CALL_EXCEPTION`` and throw the
   *  corresponding error.
   */
  decodeErrorResult(e, t) {
    if (typeof e == "string") {
      const r = this.getError(e);
      A(r, "unknown error", "fragment", e), e = r;
    }
    return A(be(t, 0, 4) === e.selector, `data signature does not match error ${e.name}.`, "data", t), this._decodeParams(e.inputs, be(t, 4));
  }
  /**
   *  Encodes the transaction revert data for a call result that
   *  reverted from the the Contract with the sepcified %%error%%
   *  (see [[getError]] for valid values for %%fragment%%) with the %%values%%.
   *
   *  This is generally not used by most developers, unless trying to mock
   *  a result from a Contract.
   */
  encodeErrorResult(e, t) {
    if (typeof e == "string") {
      const r = this.getError(e);
      A(r, "unknown error", "fragment", e), e = r;
    }
    return le([
      e.selector,
      this._encodeParams(e.inputs, t || [])
    ]);
  }
  /**
   *  Decodes the %%data%% from a transaction ``tx.data`` for
   *  the function specified (see [[getFunction]] for valid values
   *  for %%fragment%%).
   *
   *  Most developers should prefer the [[parseTransaction]] method
   *  instead, which will automatically detect the fragment.
   */
  decodeFunctionData(e, t) {
    if (typeof e == "string") {
      const r = this.getFunction(e);
      A(r, "unknown function", "fragment", e), e = r;
    }
    return A(be(t, 0, 4) === e.selector, `data signature does not match function ${e.name}.`, "data", t), this._decodeParams(e.inputs, be(t, 4));
  }
  /**
   *  Encodes the ``tx.data`` for a transaction that calls the function
   *  specified (see [[getFunction]] for valid values for %%fragment%%) with
   *  the %%values%%.
   */
  encodeFunctionData(e, t) {
    if (typeof e == "string") {
      const r = this.getFunction(e);
      A(r, "unknown function", "fragment", e), e = r;
    }
    return le([
      e.selector,
      this._encodeParams(e.inputs, t || [])
    ]);
  }
  /**
   *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the
   *  specified function (see [[getFunction]] for valid values for
   *  %%key%%).
   *
   *  Most developers should prefer the [[parseCallResult]] method instead,
   *  which will automatically detect a ``CALL_EXCEPTION`` and throw the
   *  corresponding error.
   */
  decodeFunctionResult(e, t) {
    if (typeof e == "string") {
      const s = this.getFunction(e);
      A(s, "unknown function", "fragment", e), e = s;
    }
    let r = "invalid length for result data";
    const i = $e(t);
    if (i.length % 32 === 0)
      try {
        return m(this, ze).decode(e.outputs, i);
      } catch {
        r = "could not decode result data";
      }
    G(!1, r, "BAD_DATA", {
      value: V(i),
      info: { method: e.name, signature: e.format() }
    });
  }
  makeError(e, t) {
    const r = K(e, "data"), i = Xe.getBuiltinCallException("call", t, r);
    if (i.message.startsWith("execution reverted (unknown custom error)")) {
      const o = V(r.slice(0, 4)), c = this.getError(o);
      if (c)
        try {
          const u = m(this, ze).decode(c.inputs, r.slice(4));
          i.revert = {
            name: c.name,
            signature: c.format(),
            args: u
          }, i.reason = i.revert.signature, i.message = `execution reverted: ${i.reason}`;
        } catch {
          i.message = "execution reverted (coult not decode custom error)";
        }
    }
    const a = this.parseTransaction(t);
    return a && (i.invocation = {
      method: a.name,
      signature: a.signature,
      args: a.args
    }), i;
  }
  /**
   *  Encodes the result data (e.g. from an ``eth_call``) for the
   *  specified function (see [[getFunction]] for valid values
   *  for %%fragment%%) with %%values%%.
   *
   *  This is generally not used by most developers, unless trying to mock
   *  a result from a Contract.
   */
  encodeFunctionResult(e, t) {
    if (typeof e == "string") {
      const r = this.getFunction(e);
      A(r, "unknown function", "fragment", e), e = r;
    }
    return V(m(this, ze).encode(e.outputs, t || []));
  }
  /*
      spelunk(inputs: Array<ParamType>, values: ReadonlyArray<any>, processfunc: (type: string, value: any) => Promise<any>): Promise<Array<any>> {
          const promises: Array<Promise<>> = [ ];
          const process = function(type: ParamType, value: any): any {
              if (type.baseType === "array") {
                  return descend(type.child
              }
              if (type. === "address") {
              }
          };
  
          const descend = function (inputs: Array<ParamType>, values: ReadonlyArray<any>) {
              if (inputs.length !== values.length) { throw new Error("length mismatch"); }
              
          };
  
          const result: Array<any> = [ ];
          values.forEach((value, index) => {
              if (value == null) {
                  topics.push(null);
              } else if (param.baseType === "array" || param.baseType === "tuple") {
                  logger.throwArgumentError("filtering with tuples or arrays not supported", ("contract." + param.name), value);
              } else if (Array.isArray(value)) {
                  topics.push(value.map((value) => encodeTopic(param, value)));
              } else {
                  topics.push(encodeTopic(param, value));
              }
          });
      }
  */
  // Create the filter for the event with search criteria (e.g. for eth_filterLog)
  encodeFilterTopics(e, t) {
    if (typeof e == "string") {
      const s = this.getEvent(e);
      A(s, "unknown event", "eventFragment", e), e = s;
    }
    G(t.length <= e.inputs.length, `too many arguments for ${e.format()}`, "UNEXPECTED_ARGUMENT", { count: t.length, expectedCount: e.inputs.length });
    const r = [];
    e.anonymous || r.push(e.topicHash);
    const i = (s, a) => s.type === "string" ? _n(a) : s.type === "bytes" ? pe(V(a)) : (s.type === "bool" && typeof a == "boolean" ? a = a ? "0x01" : "0x00" : s.type.match(/^u?int/) ? a = pr(a) : s.type.match(/^bytes/) ? a = Im(a, 32) : s.type === "address" && m(this, ze).encode(["address"], [a]), $t(V(a), 32));
    for (t.forEach((s, a) => {
      const o = e.inputs[a];
      if (!o.indexed) {
        A(s == null, "cannot filter non-indexed parameters; must be null", "contract." + o.name, s);
        return;
      }
      s == null ? r.push(null) : o.baseType === "array" || o.baseType === "tuple" ? A(!1, "filtering with tuples or arrays not supported", "contract." + o.name, s) : Array.isArray(s) ? r.push(s.map((c) => i(o, c))) : r.push(i(o, s));
    }); r.length && r[r.length - 1] === null; )
      r.pop();
    return r;
  }
  encodeEventLog(e, t) {
    if (typeof e == "string") {
      const a = this.getEvent(e);
      A(a, "unknown event", "eventFragment", e), e = a;
    }
    const r = [], i = [], s = [];
    return e.anonymous || r.push(e.topicHash), A(t.length === e.inputs.length, "event arguments/values mismatch", "values", t), e.inputs.forEach((a, o) => {
      const c = t[o];
      if (a.indexed)
        if (a.type === "string")
          r.push(_n(c));
        else if (a.type === "bytes")
          r.push(pe(c));
        else {
          if (a.baseType === "tuple" || a.baseType === "array")
            throw new Error("not implemented");
          r.push(m(this, ze).encode([a.type], [c]));
        }
      else
        i.push(a), s.push(c);
    }), {
      data: m(this, ze).encode(i, s),
      topics: r
    };
  }
  // Decode a filter for the event and the search criteria
  decodeEventLog(e, t, r) {
    if (typeof e == "string") {
      const p = this.getEvent(e);
      A(p, "unknown event", "eventFragment", e), e = p;
    }
    if (r != null && !e.anonymous) {
      const p = e.topicHash;
      A(me(r[0], 32) && r[0].toLowerCase() === p, "fragment/topic mismatch", "topics[0]", r[0]), r = r.slice(1);
    }
    const i = [], s = [], a = [];
    e.inputs.forEach((p, y) => {
      p.indexed ? p.type === "string" || p.type === "bytes" || p.baseType === "tuple" || p.baseType === "array" ? (i.push(Ve.from({ type: "bytes32", name: p.name })), a.push(!0)) : (i.push(p), a.push(!1)) : (s.push(p), a.push(!1));
    });
    const o = r != null ? m(this, ze).decode(i, le(r)) : null, c = m(this, ze).decode(s, t, !0), u = [], l = [];
    let d = 0, f = 0;
    return e.inputs.forEach((p, y) => {
      let h = null;
      if (p.indexed)
        if (o == null)
          h = new rh(null);
        else if (a[y])
          h = new rh(o[f++]);
        else
          try {
            h = o[f++];
          } catch (b) {
            h = b;
          }
      else
        try {
          h = c[d++];
        } catch (b) {
          h = b;
        }
      u.push(h), l.push(p.name || null);
    }), ga.fromItems(u, l);
  }
  /**
   *  Parses a transaction, finding the matching function and extracts
   *  the parameter values along with other useful function details.
   *
   *  If the matching function cannot be found, return null.
   */
  parseTransaction(e) {
    const t = K(e.data, "tx.data"), r = q(e.value != null ? e.value : 0, "tx.value"), i = this.getFunction(V(t.slice(0, 4)));
    if (!i)
      return null;
    const s = m(this, ze).decode(i.inputs, t.slice(4));
    return new XE(i, i.selector, s, r);
  }
  parseCallResult(e) {
    throw new Error("@TODO");
  }
  /**
   *  Parses a receipt log, finding the matching event and extracts
   *  the parameter values along with other useful event details.
   *
   *  If the matching event cannot be found, returns null.
   */
  parseLog(e) {
    const t = this.getEvent(e.topics[0]);
    return !t || t.anonymous ? null : new ZE(t, t.topicHash, this.decodeEventLog(t, e.data, e.topics));
  }
  /**
   *  Parses a revert data, finding the matching error and extracts
   *  the parameter values along with other useful error details.
   *
   *  If the matching error cannot be found, returns null.
   */
  parseError(e) {
    const t = V(e), r = this.getError(be(t, 0, 4));
    if (!r)
      return null;
    const i = m(this, ze).decode(r.inputs, be(t, 4));
    return new ev(r, r.selector, i);
  }
  /**
   *  Creates a new [[Interface]] from the ABI %%value%%.
   *
   *  The %%value%% may be provided as an existing [[Interface]] object,
   *  a JSON-encoded ABI or any Human-Readable ABI format.
   */
  static from(e) {
    return e instanceof fi ? e : typeof e == "string" ? new fi(JSON.parse(e)) : typeof e.formatJson == "function" ? new fi(e.formatJson()) : typeof e.format == "function" ? new fi(e.format("json")) : new fi(e);
  }
};
xn = new WeakMap(), gn = new WeakMap(), wn = new WeakMap(), ze = new WeakMap(), Rn = new WeakSet(), // Find a function definition by any means necessary (unless it is ambiguous)
Gc = function(e, t, r) {
  if (me(e)) {
    const s = e.toLowerCase();
    for (const a of m(this, wn).values())
      if (s === a.selector)
        return a;
    return null;
  }
  if (e.indexOf("(") === -1) {
    const s = [];
    for (const [a, o] of m(this, wn))
      a.split(
        "("
        /* fix:) */
      )[0] === e && s.push(o);
    if (t) {
      const a = t.length > 0 ? t[t.length - 1] : null;
      let o = t.length, c = !0;
      qe.isTyped(a) && a.type === "overrides" && (c = !1, o--);
      for (let u = s.length - 1; u >= 0; u--) {
        const l = s[u].inputs.length;
        l !== o && (!c || l !== o - 1) && s.splice(u, 1);
      }
      for (let u = s.length - 1; u >= 0; u--) {
        const l = s[u].inputs;
        for (let d = 0; d < t.length; d++)
          if (qe.isTyped(t[d])) {
            if (d >= l.length) {
              if (t[d].type === "overrides")
                continue;
              s.splice(u, 1);
              break;
            }
            if (t[d].type !== l[d].baseType) {
              s.splice(u, 1);
              break;
            }
          }
      }
    }
    if (s.length === 1 && t && t.length !== s[0].inputs.length) {
      const a = t[t.length - 1];
      (a == null || Array.isArray(a) || typeof a != "object") && s.splice(0, 1);
    }
    if (s.length === 0)
      return null;
    if (s.length > 1 && r) {
      const a = s.map((o) => JSON.stringify(o.format())).join(", ");
      A(!1, `ambiguous function description (i.e. matches ${a})`, "key", e);
    }
    return s[0];
  }
  const i = m(this, wn).get(Sn.from(e).format());
  return i || null;
}, // Find an event definition by any means necessary (unless it is ambiguous)
Hc = function(e, t, r) {
  if (me(e)) {
    const s = e.toLowerCase();
    for (const a of m(this, gn).values())
      if (s === a.topicHash)
        return a;
    return null;
  }
  if (e.indexOf("(") === -1) {
    const s = [];
    for (const [a, o] of m(this, gn))
      a.split(
        "("
        /* fix:) */
      )[0] === e && s.push(o);
    if (t) {
      for (let a = s.length - 1; a >= 0; a--)
        s[a].inputs.length < t.length && s.splice(a, 1);
      for (let a = s.length - 1; a >= 0; a--) {
        const o = s[a].inputs;
        for (let c = 0; c < t.length; c++)
          if (qe.isTyped(t[c]) && t[c].type !== o[c].baseType) {
            s.splice(a, 1);
            break;
          }
      }
    }
    if (s.length === 0)
      return null;
    if (s.length > 1 && r) {
      const a = s.map((o) => JSON.stringify(o.format())).join(", ");
      A(!1, `ambiguous event description (i.e. matches ${a})`, "key", e);
    }
    return s[0];
  }
  const i = m(this, gn).get(Pn.from(e).format());
  return i || null;
};
let kd = fi;
const wx = BigInt(0);
function Ps(n) {
  return n ?? null;
}
function Pe(n) {
  return n == null ? null : n.toString();
}
class ah {
  /**
   *  Creates a new FeeData for %%gasPrice%%, %%maxFeePerGas%% and
   *  %%maxPriorityFeePerGas%%.
   */
  constructor(e, t, r) {
    /**
     *  The gas price for legacy networks.
     */
    T(this, "gasPrice");
    /**
     *  The maximum fee to pay per gas.
     *
     *  The base fee per gas is defined by the network and based on
     *  congestion, increasing the cost during times of heavy load
     *  and lowering when less busy.
     *
     *  The actual fee per gas will be the base fee for the block
     *  and the priority fee, up to the max fee per gas.
     *
     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))
     */
    T(this, "maxFeePerGas");
    /**
     *  The additional amout to pay per gas to encourage a validator
     *  to include the transaction.
     *
     *  The purpose of this is to compensate the validator for the
     *  adjusted risk for including a given transaction.
     *
     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))
     */
    T(this, "maxPriorityFeePerGas");
    Y(this, {
      gasPrice: Ps(e),
      maxFeePerGas: Ps(t),
      maxPriorityFeePerGas: Ps(r)
    });
  }
  /**
   *  Returns a JSON-friendly value.
   */
  toJSON() {
    const { gasPrice: e, maxFeePerGas: t, maxPriorityFeePerGas: r } = this;
    return {
      _type: "FeeData",
      gasPrice: Pe(e),
      maxFeePerGas: Pe(t),
      maxPriorityFeePerGas: Pe(r)
    };
  }
}
function So(n) {
  const e = {};
  n.to && (e.to = n.to), n.from && (e.from = n.from), n.data && (e.data = V(n.data));
  const t = "chainId,gasLimit,gasPrice,maxFeePerBlobGas,maxFeePerGas,maxPriorityFeePerGas,value".split(/,/);
  for (const i of t)
    !(i in n) || n[i] == null || (e[i] = q(n[i], `request.${i}`));
  const r = "type,nonce".split(/,/);
  for (const i of r)
    !(i in n) || n[i] == null || (e[i] = te(n[i], `request.${i}`));
  return n.accessList && (e.accessList = ts(n.accessList)), n.authorizationList && (e.authorizationList = n.authorizationList.slice()), "blockTag" in n && (e.blockTag = n.blockTag), "enableCcipRead" in n && (e.enableCcipRead = !!n.enableCcipRead), "customData" in n && (e.customData = n.customData), "blobVersionedHashes" in n && n.blobVersionedHashes && (e.blobVersionedHashes = n.blobVersionedHashes.slice()), "kzg" in n && (e.kzg = n.kzg), "blobs" in n && n.blobs && (e.blobs = n.blobs.map((i) => $u(i) ? V(i) : Object.assign({}, i))), e;
}
var Zn;
class tv {
  /**
   *  Create a new **Block** object.
   *
   *  This should generally not be necessary as the unless implementing a
   *  low-level library.
   */
  constructor(e, t) {
    /**
     *  The provider connected to the block used to fetch additional details
     *  if necessary.
     */
    T(this, "provider");
    /**
     *  The block number, sometimes called the block height. This is a
     *  sequential number that is one higher than the parent block.
     */
    T(this, "number");
    /**
     *  The block hash.
     *
     *  This hash includes all properties, so can be safely used to identify
     *  an exact set of block properties.
     */
    T(this, "hash");
    /**
     *  The timestamp for this block, which is the number of seconds since
     *  epoch that this block was included.
     */
    T(this, "timestamp");
    /**
     *  The block hash of the parent block.
     */
    T(this, "parentHash");
    /**
     *  The hash tree root of the parent beacon block for the given
     *  execution block. See [[link-eip-4788]].
     */
    T(this, "parentBeaconBlockRoot");
    /**
     *  The nonce.
     *
     *  On legacy networks, this is the random number inserted which
     *  permitted the difficulty target to be reached.
     */
    T(this, "nonce");
    /**
     *  The difficulty target.
     *
     *  On legacy networks, this is the proof-of-work target required
     *  for a block to meet the protocol rules to be included.
     *
     *  On modern networks, this is a random number arrived at using
     *  randao.  @TODO: Find links?
     */
    T(this, "difficulty");
    /**
     *  The total gas limit for this block.
     */
    T(this, "gasLimit");
    /**
     *  The total gas used in this block.
     */
    T(this, "gasUsed");
    /**
     *  The root hash for the global state after applying changes
     *  in this block.
     */
    T(this, "stateRoot");
    /**
     *  The hash of the transaction receipts trie.
     */
    T(this, "receiptsRoot");
    /**
     *  The total amount of blob gas consumed by the transactions
     *  within the block. See [[link-eip-4844]].
     */
    T(this, "blobGasUsed");
    /**
     *  The running total of blob gas consumed in excess of the
     *  target, prior to the block. See [[link-eip-4844]].
     */
    T(this, "excessBlobGas");
    /**
     *  The miner coinbase address, wihch receives any subsidies for
     *  including this block.
     */
    T(this, "miner");
    /**
     *  The latest RANDAO mix of the post beacon state of
     *  the previous block.
     */
    T(this, "prevRandao");
    /**
     *  Any extra data the validator wished to include.
     */
    T(this, "extraData");
    /**
     *  The base fee per gas that all transactions in this block were
     *  charged.
     *
     *  This adjusts after each block, depending on how congested the network
     *  is.
     */
    T(this, "baseFeePerGas");
    _(this, Zn);
    g(this, Zn, e.transactions.map((r) => typeof r != "string" ? new Io(r, t) : r)), Y(this, {
      provider: t,
      hash: Ps(e.hash),
      number: e.number,
      timestamp: e.timestamp,
      parentHash: e.parentHash,
      parentBeaconBlockRoot: e.parentBeaconBlockRoot,
      nonce: e.nonce,
      difficulty: e.difficulty,
      gasLimit: e.gasLimit,
      gasUsed: e.gasUsed,
      blobGasUsed: e.blobGasUsed,
      excessBlobGas: e.excessBlobGas,
      miner: e.miner,
      prevRandao: Ps(e.prevRandao),
      extraData: e.extraData,
      baseFeePerGas: Ps(e.baseFeePerGas),
      stateRoot: e.stateRoot,
      receiptsRoot: e.receiptsRoot
    });
  }
  /**
   *  Returns the list of transaction hashes, in the order
   *  they were executed within the block.
   */
  get transactions() {
    return m(this, Zn).map((e) => typeof e == "string" ? e : e.hash);
  }
  /**
   *  Returns the complete transactions, in the order they
   *  were executed within the block.
   *
   *  This is only available for blocks which prefetched
   *  transactions, by passing ``true`` to %%prefetchTxs%%
   *  into [[Provider-getBlock]].
   */
  get prefetchedTransactions() {
    const e = m(this, Zn).slice();
    return e.length === 0 ? [] : (G(typeof e[0] == "object", "transactions were not prefetched with block request", "UNSUPPORTED_OPERATION", {
      operation: "transactionResponses()"
    }), e);
  }
  /**
   *  Returns a JSON-friendly value.
   */
  toJSON() {
    const { baseFeePerGas: e, difficulty: t, extraData: r, gasLimit: i, gasUsed: s, hash: a, miner: o, prevRandao: c, nonce: u, number: l, parentHash: d, parentBeaconBlockRoot: f, stateRoot: p, receiptsRoot: y, timestamp: h, transactions: b } = this;
    return {
      _type: "Block",
      baseFeePerGas: Pe(e),
      difficulty: Pe(t),
      extraData: r,
      gasLimit: Pe(i),
      gasUsed: Pe(s),
      blobGasUsed: Pe(this.blobGasUsed),
      excessBlobGas: Pe(this.excessBlobGas),
      hash: a,
      miner: o,
      prevRandao: c,
      nonce: u,
      number: l,
      parentHash: d,
      timestamp: h,
      parentBeaconBlockRoot: f,
      stateRoot: p,
      receiptsRoot: y,
      transactions: b
    };
  }
  [Symbol.iterator]() {
    let e = 0;
    const t = this.transactions;
    return {
      next: () => e < this.length ? {
        value: t[e++],
        done: !1
      } : { value: void 0, done: !0 }
    };
  }
  /**
   *  The number of transactions in this block.
   */
  get length() {
    return m(this, Zn).length;
  }
  /**
   *  The [[link-js-date]] this block was included at.
   */
  get date() {
    return this.timestamp == null ? null : new Date(this.timestamp * 1e3);
  }
  /**
   *  Get the transaction at %%indexe%% within this block.
   */
  async getTransaction(e) {
    let t;
    if (typeof e == "number")
      t = m(this, Zn)[e];
    else {
      const r = e.toLowerCase();
      for (const i of m(this, Zn))
        if (typeof i == "string") {
          if (i !== r)
            continue;
          t = i;
          break;
        } else {
          if (i.hash !== r)
            continue;
          t = i;
          break;
        }
    }
    if (t == null)
      throw new Error("no such tx");
    return typeof t == "string" ? await this.provider.getTransaction(t) : t;
  }
  /**
   *  If a **Block** was fetched with a request to include the transactions
   *  this will allow synchronous access to those transactions.
   *
   *  If the transactions were not prefetched, this will throw.
   */
  getPrefetchedTransaction(e) {
    const t = this.prefetchedTransactions;
    if (typeof e == "number")
      return t[e];
    e = e.toLowerCase();
    for (const r of t)
      if (r.hash === e)
        return r;
    A(!1, "no matching transaction", "indexOrHash", e);
  }
  /**
   *  Returns true if this block been mined. This provides a type guard
   *  for all properties on a [[MinedBlock]].
   */
  isMined() {
    return !!this.hash;
  }
  /**
   *  Returns true if this block is an [[link-eip-2930]] block.
   */
  isLondon() {
    return !!this.baseFeePerGas;
  }
  /**
   *  @_ignore:
   */
  orphanedEvent() {
    if (!this.isMined())
      throw new Error("");
    return nv(this);
  }
}
Zn = new WeakMap();
class nc {
  /**
   *  @_ignore:
   */
  constructor(e, t) {
    /**
     *  The provider connected to the log used to fetch additional details
     *  if necessary.
     */
    T(this, "provider");
    /**
     *  The transaction hash of the transaction this log occurred in. Use the
     *  [[Log-getTransaction]] to get the [[TransactionResponse]].
     */
    T(this, "transactionHash");
    /**
     *  The block hash of the block this log occurred in. Use the
     *  [[Log-getBlock]] to get the [[Block]].
     */
    T(this, "blockHash");
    /**
     *  The block number of the block this log occurred in. It is preferred
     *  to use the [[Block-hash]] when fetching the related [[Block]],
     *  since in the case of an orphaned block, the block at that height may
     *  have changed.
     */
    T(this, "blockNumber");
    /**
     *  If the **Log** represents a block that was removed due to an orphaned
     *  block, this will be true.
     *
     *  This can only happen within an orphan event listener.
     */
    T(this, "removed");
    /**
     *  The address of the contract that emitted this log.
     */
    T(this, "address");
    /**
     *  The data included in this log when it was emitted.
     */
    T(this, "data");
    /**
     *  The indexed topics included in this log when it was emitted.
     *
     *  All topics are included in the bloom filters, so they can be
     *  efficiently filtered using the [[Provider-getLogs]] method.
     */
    T(this, "topics");
    /**
     *  The index within the block this log occurred at. This is generally
     *  not useful to developers, but can be used with the various roots
     *  to proof inclusion within a block.
     */
    T(this, "index");
    /**
     *  The index within the transaction of this log.
     */
    T(this, "transactionIndex");
    this.provider = t;
    const r = Object.freeze(e.topics.slice());
    Y(this, {
      transactionHash: e.transactionHash,
      blockHash: e.blockHash,
      blockNumber: e.blockNumber,
      removed: e.removed,
      address: e.address,
      data: e.data,
      topics: r,
      index: e.index,
      transactionIndex: e.transactionIndex
    });
  }
  /**
   *  Returns a JSON-compatible object.
   */
  toJSON() {
    const { address: e, blockHash: t, blockNumber: r, data: i, index: s, removed: a, topics: o, transactionHash: c, transactionIndex: u } = this;
    return {
      _type: "log",
      address: e,
      blockHash: t,
      blockNumber: r,
      data: i,
      index: s,
      removed: a,
      topics: o,
      transactionHash: c,
      transactionIndex: u
    };
  }
  /**
   *  Returns the block that this log occurred in.
   */
  async getBlock() {
    const e = await this.provider.getBlock(this.blockHash);
    return G(!!e, "failed to find transaction", "UNKNOWN_ERROR", {}), e;
  }
  /**
   *  Returns the transaction that this log occurred in.
   */
  async getTransaction() {
    const e = await this.provider.getTransaction(this.transactionHash);
    return G(!!e, "failed to find transaction", "UNKNOWN_ERROR", {}), e;
  }
  /**
   *  Returns the transaction receipt fot the transaction that this
   *  log occurred in.
   */
  async getTransactionReceipt() {
    const e = await this.provider.getTransactionReceipt(this.transactionHash);
    return G(!!e, "failed to find transaction receipt", "UNKNOWN_ERROR", {}), e;
  }
  /**
   *  @_ignore:
   */
  removedEvent() {
    return rv(this);
  }
}
var Mo;
class Ax {
  /**
   *  @_ignore:
   */
  constructor(e, t) {
    /**
     *  The provider connected to the log used to fetch additional details
     *  if necessary.
     */
    T(this, "provider");
    /**
     *  The address the transaction was sent to.
     */
    T(this, "to");
    /**
     *  The sender of the transaction.
     */
    T(this, "from");
    /**
     *  The address of the contract if the transaction was directly
     *  responsible for deploying one.
     *
     *  This is non-null **only** if the ``to`` is empty and the ``data``
     *  was successfully executed as initcode.
     */
    T(this, "contractAddress");
    /**
     *  The transaction hash.
     */
    T(this, "hash");
    /**
     *  The index of this transaction within the block transactions.
     */
    T(this, "index");
    /**
     *  The block hash of the [[Block]] this transaction was included in.
     */
    T(this, "blockHash");
    /**
     *  The block number of the [[Block]] this transaction was included in.
     */
    T(this, "blockNumber");
    /**
     *  The bloom filter bytes that represent all logs that occurred within
     *  this transaction. This is generally not useful for most developers,
     *  but can be used to validate the included logs.
     */
    T(this, "logsBloom");
    /**
     *  The actual amount of gas used by this transaction.
     *
     *  When creating a transaction, the amount of gas that will be used can
     *  only be approximated, but the sender must pay the gas fee for the
     *  entire gas limit. After the transaction, the difference is refunded.
     */
    T(this, "gasUsed");
    /**
     *  The gas used for BLObs. See [[link-eip-4844]].
     */
    T(this, "blobGasUsed");
    /**
     *  The amount of gas used by all transactions within the block for this
     *  and all transactions with a lower ``index``.
     *
     *  This is generally not useful for developers but can be used to
     *  validate certain aspects of execution.
     */
    T(this, "cumulativeGasUsed");
    /**
     *  The actual gas price used during execution.
     *
     *  Due to the complexity of [[link-eip-1559]] this value can only
     *  be caluclated after the transaction has been mined, snce the base
     *  fee is protocol-enforced.
     */
    T(this, "gasPrice");
    /**
     *  The price paid per BLOB in gas. See [[link-eip-4844]].
     */
    T(this, "blobGasPrice");
    /**
     *  The [[link-eip-2718]] transaction type.
     */
    T(this, "type");
    //readonly byzantium!: boolean;
    /**
     *  The status of this transaction, indicating success (i.e. ``1``) or
     *  a revert (i.e. ``0``).
     *
     *  This is available in post-byzantium blocks, but some backends may
     *  backfill this value.
     */
    T(this, "status");
    /**
     *  The root hash of this transaction.
     *
     *  This is no present and was only included in pre-byzantium blocks, but
     *  could be used to validate certain parts of the receipt.
     */
    T(this, "root");
    _(this, Mo);
    g(this, Mo, Object.freeze(e.logs.map((i) => new nc(i, t))));
    let r = wx;
    e.effectiveGasPrice != null ? r = e.effectiveGasPrice : e.gasPrice != null && (r = e.gasPrice), Y(this, {
      provider: t,
      to: e.to,
      from: e.from,
      contractAddress: e.contractAddress,
      hash: e.hash,
      index: e.index,
      blockHash: e.blockHash,
      blockNumber: e.blockNumber,
      logsBloom: e.logsBloom,
      gasUsed: e.gasUsed,
      cumulativeGasUsed: e.cumulativeGasUsed,
      blobGasUsed: e.blobGasUsed,
      gasPrice: r,
      blobGasPrice: e.blobGasPrice,
      type: e.type,
      //byzantium: tx.byzantium,
      status: e.status,
      root: e.root
    });
  }
  /**
   *  The logs for this transaction.
   */
  get logs() {
    return m(this, Mo);
  }
  /**
   *  Returns a JSON-compatible representation.
   */
  toJSON() {
    const {
      to: e,
      from: t,
      contractAddress: r,
      hash: i,
      index: s,
      blockHash: a,
      blockNumber: o,
      logsBloom: c,
      logs: u,
      //byzantium, 
      status: l,
      root: d
    } = this;
    return {
      _type: "TransactionReceipt",
      blockHash: a,
      blockNumber: o,
      //byzantium, 
      contractAddress: r,
      cumulativeGasUsed: Pe(this.cumulativeGasUsed),
      from: t,
      gasPrice: Pe(this.gasPrice),
      blobGasUsed: Pe(this.blobGasUsed),
      blobGasPrice: Pe(this.blobGasPrice),
      gasUsed: Pe(this.gasUsed),
      hash: i,
      index: s,
      logs: u,
      logsBloom: c,
      root: d,
      status: l,
      to: e
    };
  }
  /**
   *  @_ignore:
   */
  get length() {
    return this.logs.length;
  }
  [Symbol.iterator]() {
    let e = 0;
    return {
      next: () => e < this.length ? { value: this.logs[e++], done: !1 } : { value: void 0, done: !0 }
    };
  }
  /**
   *  The total fee for this transaction, in wei.
   */
  get fee() {
    return this.gasUsed * this.gasPrice;
  }
  /**
   *  Resolves to the block this transaction occurred in.
   */
  async getBlock() {
    const e = await this.provider.getBlock(this.blockHash);
    if (e == null)
      throw new Error("TODO");
    return e;
  }
  /**
   *  Resolves to the transaction this transaction occurred in.
   */
  async getTransaction() {
    const e = await this.provider.getTransaction(this.hash);
    if (e == null)
      throw new Error("TODO");
    return e;
  }
  /**
   *  Resolves to the return value of the execution of this transaction.
   *
   *  Support for this feature is limited, as it requires an archive node
   *  with the ``debug_`` or ``trace_`` API enabled.
   */
  async getResult() {
    return await this.provider.getTransactionResult(this.hash);
  }
  /**
   *  Resolves to the number of confirmations this transaction has.
   */
  async confirmations() {
    return await this.provider.getBlockNumber() - this.blockNumber + 1;
  }
  /**
   *  @_ignore:
   */
  removedEvent() {
    return vx(this);
  }
  /**
   *  @_ignore:
   */
  reorderedEvent(e) {
    return G(!e || e.isMined(), "unmined 'other' transction cannot be orphaned", "UNSUPPORTED_OPERATION", { operation: "reorderedEvent(other)" }), Ex(this, e);
  }
}
Mo = new WeakMap();
var Mr;
const u0 = class u0 {
  /**
   *  @_ignore:
   */
  constructor(e, t) {
    /**
     *  The provider this is connected to, which will influence how its
     *  methods will resolve its async inspection methods.
     */
    T(this, "provider");
    /**
     *  The block number of the block that this transaction was included in.
     *
     *  This is ``null`` for pending transactions.
     */
    T(this, "blockNumber");
    /**
     *  The blockHash of the block that this transaction was included in.
     *
     *  This is ``null`` for pending transactions.
     */
    T(this, "blockHash");
    /**
     *  The index within the block that this transaction resides at.
     */
    T(this, "index");
    /**
     *  The transaction hash.
     */
    T(this, "hash");
    /**
     *  The [[link-eip-2718]] transaction envelope type. This is
     *  ``0`` for legacy transactions types.
     */
    T(this, "type");
    /**
     *  The receiver of this transaction.
     *
     *  If ``null``, then the transaction is an initcode transaction.
     *  This means the result of executing the [[data]] will be deployed
     *  as a new contract on chain (assuming it does not revert) and the
     *  address may be computed using [[getCreateAddress]].
     */
    T(this, "to");
    /**
     *  The sender of this transaction. It is implicitly computed
     *  from the transaction pre-image hash (as the digest) and the
     *  [[signature]] using ecrecover.
     */
    T(this, "from");
    /**
     *  The nonce, which is used to prevent replay attacks and offer
     *  a method to ensure transactions from a given sender are explicitly
     *  ordered.
     *
     *  When sending a transaction, this must be equal to the number of
     *  transactions ever sent by [[from]].
     */
    T(this, "nonce");
    /**
     *  The maximum units of gas this transaction can consume. If execution
     *  exceeds this, the entries transaction is reverted and the sender
     *  is charged for the full amount, despite not state changes being made.
     */
    T(this, "gasLimit");
    /**
     *  The gas price can have various values, depending on the network.
     *
     *  In modern networks, for transactions that are included this is
     *  the //effective gas price// (the fee per gas that was actually
     *  charged), while for transactions that have not been included yet
     *  is the [[maxFeePerGas]].
     *
     *  For legacy transactions, or transactions on legacy networks, this
     *  is the fee that will be charged per unit of gas the transaction
     *  consumes.
     */
    T(this, "gasPrice");
    /**
     *  The maximum priority fee (per unit of gas) to allow a
     *  validator to charge the sender. This is inclusive of the
     *  [[maxFeeFeePerGas]].
     */
    T(this, "maxPriorityFeePerGas");
    /**
     *  The maximum fee (per unit of gas) to allow this transaction
     *  to charge the sender.
     */
    T(this, "maxFeePerGas");
    /**
     *  The [[link-eip-4844]] max fee per BLOb gas.
     */
    T(this, "maxFeePerBlobGas");
    /**
     *  The data.
     */
    T(this, "data");
    /**
     *  The value, in wei. Use [[formatEther]] to format this value
     *  as ether.
     */
    T(this, "value");
    /**
     *  The chain ID.
     */
    T(this, "chainId");
    /**
     *  The signature.
     */
    T(this, "signature");
    /**
     *  The [[link-eip-2930]] access list for transaction types that
     *  support it, otherwise ``null``.
     */
    T(this, "accessList");
    /**
     *  The [[link-eip-4844]] BLOb versioned hashes.
     */
    T(this, "blobVersionedHashes");
    /**
     *  The [[link-eip-7702]] authorizations (if any).
     */
    T(this, "authorizationList");
    _(this, Mr);
    this.provider = t, this.blockNumber = e.blockNumber != null ? e.blockNumber : null, this.blockHash = e.blockHash != null ? e.blockHash : null, this.hash = e.hash, this.index = e.index, this.type = e.type, this.from = e.from, this.to = e.to || null, this.gasLimit = e.gasLimit, this.nonce = e.nonce, this.data = e.data, this.value = e.value, this.gasPrice = e.gasPrice, this.maxPriorityFeePerGas = e.maxPriorityFeePerGas != null ? e.maxPriorityFeePerGas : null, this.maxFeePerGas = e.maxFeePerGas != null ? e.maxFeePerGas : null, this.maxFeePerBlobGas = e.maxFeePerBlobGas != null ? e.maxFeePerBlobGas : null, this.chainId = e.chainId, this.signature = e.signature, this.accessList = e.accessList != null ? e.accessList : null, this.blobVersionedHashes = e.blobVersionedHashes != null ? e.blobVersionedHashes : null, this.authorizationList = e.authorizationList != null ? e.authorizationList : null, g(this, Mr, -1);
  }
  /**
   *  Returns a JSON-compatible representation of this transaction.
   */
  toJSON() {
    const { blockNumber: e, blockHash: t, index: r, hash: i, type: s, to: a, from: o, nonce: c, data: u, signature: l, accessList: d, blobVersionedHashes: f } = this;
    return {
      _type: "TransactionResponse",
      accessList: d,
      blockNumber: e,
      blockHash: t,
      blobVersionedHashes: f,
      chainId: Pe(this.chainId),
      data: u,
      from: o,
      gasLimit: Pe(this.gasLimit),
      gasPrice: Pe(this.gasPrice),
      hash: i,
      maxFeePerGas: Pe(this.maxFeePerGas),
      maxPriorityFeePerGas: Pe(this.maxPriorityFeePerGas),
      maxFeePerBlobGas: Pe(this.maxFeePerBlobGas),
      nonce: c,
      signature: l,
      to: a,
      index: r,
      type: s,
      value: Pe(this.value)
    };
  }
  /**
   *  Resolves to the Block that this transaction was included in.
   *
   *  This will return null if the transaction has not been included yet.
   */
  async getBlock() {
    let e = this.blockNumber;
    if (e == null) {
      const r = await this.getTransaction();
      r && (e = r.blockNumber);
    }
    if (e == null)
      return null;
    const t = this.provider.getBlock(e);
    if (t == null)
      throw new Error("TODO");
    return t;
  }
  /**
   *  Resolves to this transaction being re-requested from the
   *  provider. This can be used if you have an unmined transaction
   *  and wish to get an up-to-date populated instance.
   */
  async getTransaction() {
    return this.provider.getTransaction(this.hash);
  }
  /**
   *  Resolve to the number of confirmations this transaction has.
   */
  async confirmations() {
    if (this.blockNumber == null) {
      const { tx: t, blockNumber: r } = await Ke({
        tx: this.getTransaction(),
        blockNumber: this.provider.getBlockNumber()
      });
      return t == null || t.blockNumber == null ? 0 : r - t.blockNumber + 1;
    }
    return await this.provider.getBlockNumber() - this.blockNumber + 1;
  }
  /**
   *  Resolves once this transaction has been mined and has
   *  %%confirms%% blocks including it (default: ``1``) with an
   *  optional %%timeout%%.
   *
   *  This can resolve to ``null`` only if %%confirms%% is ``0``
   *  and the transaction has not been mined, otherwise this will
   *  wait until enough confirmations have completed.
   */
  async wait(e, t) {
    const r = e ?? 1, i = t ?? 0;
    let s = m(this, Mr), a = -1, o = s === -1;
    const c = async () => {
      if (o)
        return null;
      const { blockNumber: f, nonce: p } = await Ke({
        blockNumber: this.provider.getBlockNumber(),
        nonce: this.provider.getTransactionCount(this.from)
      });
      if (p < this.nonce) {
        s = f;
        return;
      }
      if (o)
        return null;
      const y = await this.getTransaction();
      if (!(y && y.blockNumber != null))
        for (a === -1 && (a = s - 3, a < m(this, Mr) && (a = m(this, Mr))); a <= f; ) {
          if (o)
            return null;
          const h = await this.provider.getBlock(a, !0);
          if (h == null)
            return;
          for (const b of h)
            if (b === this.hash)
              return;
          for (let b = 0; b < h.length; b++) {
            const x = await h.getTransaction(b);
            if (x.from === this.from && x.nonce === this.nonce) {
              if (o)
                return null;
              const w = await this.provider.getTransactionReceipt(x.hash);
              if (w == null || f - w.blockNumber + 1 < r)
                return;
              let E = "replaced";
              x.data === this.data && x.to === this.to && x.value === this.value ? E = "repriced" : x.data === "0x" && x.from === x.to && x.value === wx && (E = "cancelled"), G(!1, "transaction was replaced", "TRANSACTION_REPLACED", {
                cancelled: E === "replaced" || E === "cancelled",
                reason: E,
                replacement: x.replaceableTransaction(s),
                hash: x.hash,
                receipt: w
              });
            }
          }
          a++;
        }
    }, u = (f) => {
      if (f == null || f.status !== 0)
        return f;
      G(!1, "transaction execution reverted", "CALL_EXCEPTION", {
        action: "sendTransaction",
        data: null,
        reason: null,
        invocation: null,
        revert: null,
        transaction: {
          to: f.to,
          from: f.from,
          data: ""
          // @TODO: in v7, split out sendTransaction properties
        },
        receipt: f
      });
    }, l = await this.provider.getTransactionReceipt(this.hash);
    if (r === 0)
      return u(l);
    if (l) {
      if (r === 1 || await l.confirmations() >= r)
        return u(l);
    } else if (await c(), r === 0)
      return null;
    return await new Promise((f, p) => {
      const y = [], h = () => {
        y.forEach((x) => x());
      };
      if (y.push(() => {
        o = !0;
      }), i > 0) {
        const x = setTimeout(() => {
          h(), p(ge("wait for transaction timeout", "TIMEOUT"));
        }, i);
        y.push(() => {
          clearTimeout(x);
        });
      }
      const b = async (x) => {
        if (await x.confirmations() >= r) {
          h();
          try {
            f(u(x));
          } catch (w) {
            p(w);
          }
        }
      };
      if (y.push(() => {
        this.provider.off(this.hash, b);
      }), this.provider.on(this.hash, b), s >= 0) {
        const x = async () => {
          try {
            await c();
          } catch (w) {
            if (He(w, "TRANSACTION_REPLACED")) {
              h(), p(w);
              return;
            }
          }
          o || this.provider.once("block", x);
        };
        y.push(() => {
          this.provider.off("block", x);
        }), this.provider.once("block", x);
      }
    });
  }
  /**
   *  Returns ``true`` if this transaction has been included.
   *
   *  This is effective only as of the time the TransactionResponse
   *  was instantiated. To get up-to-date information, use
   *  [[getTransaction]].
   *
   *  This provides a Type Guard that this transaction will have
   *  non-null property values for properties that are null for
   *  unmined transactions.
   */
  isMined() {
    return this.blockHash != null;
  }
  /**
   *  Returns true if the transaction is a legacy (i.e. ``type == 0``)
   *  transaction.
   *
   *  This provides a Type Guard that this transaction will have
   *  the ``null``-ness for hardfork-specific properties set correctly.
   */
  isLegacy() {
    return this.type === 0;
  }
  /**
   *  Returns true if the transaction is a Berlin (i.e. ``type == 1``)
   *  transaction. See [[link-eip-2070]].
   *
   *  This provides a Type Guard that this transaction will have
   *  the ``null``-ness for hardfork-specific properties set correctly.
   */
  isBerlin() {
    return this.type === 1;
  }
  /**
   *  Returns true if the transaction is a London (i.e. ``type == 2``)
   *  transaction. See [[link-eip-1559]].
   *
   *  This provides a Type Guard that this transaction will have
   *  the ``null``-ness for hardfork-specific properties set correctly.
   */
  isLondon() {
    return this.type === 2;
  }
  /**
   *  Returns true if hte transaction is a Cancun (i.e. ``type == 3``)
   *  transaction. See [[link-eip-4844]].
   */
  isCancun() {
    return this.type === 3;
  }
  /**
   *  Returns a filter which can be used to listen for orphan events
   *  that evict this transaction.
   */
  removedEvent() {
    return G(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" }), vx(this);
  }
  /**
   *  Returns a filter which can be used to listen for orphan events
   *  that re-order this event against %%other%%.
   */
  reorderedEvent(e) {
    return G(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" }), G(!e || e.isMined(), "unmined 'other' transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" }), Ex(this, e);
  }
  /**
   *  Returns a new TransactionResponse instance which has the ability to
   *  detect (and throw an error) if the transaction is replaced, which
   *  will begin scanning at %%startBlock%%.
   *
   *  This should generally not be used by developers and is intended
   *  primarily for internal use. Setting an incorrect %%startBlock%% can
   *  have devastating performance consequences if used incorrectly.
   */
  replaceableTransaction(e) {
    A(Number.isInteger(e) && e >= 0, "invalid startBlock", "startBlock", e);
    const t = new u0(this, this.provider);
    return g(t, Mr, e), t;
  }
};
Mr = new WeakMap();
let Io = u0;
function nv(n) {
  return { orphan: "drop-block", hash: n.hash, number: n.number };
}
function Ex(n, e) {
  return { orphan: "reorder-transaction", tx: n, other: e };
}
function vx(n) {
  return { orphan: "drop-transaction", tx: n };
}
function rv(n) {
  return { orphan: "drop-log", log: {
    transactionHash: n.transactionHash,
    blockHash: n.blockHash,
    blockNumber: n.blockNumber,
    address: n.address,
    data: n.data,
    topics: Object.freeze(n.topics.slice()),
    index: n.index
  } };
}
class Jf extends nc {
  /**
   * @_ignore:
   */
  constructor(t, r, i) {
    super(t, t.provider);
    /**
     *  The Contract Interface.
     */
    T(this, "interface");
    /**
     *  The matching event.
     */
    T(this, "fragment");
    /**
     *  The parsed arguments passed to the event by ``emit``.
     */
    T(this, "args");
    const s = r.decodeEventLog(i, t.data, t.topics);
    Y(this, { args: s, fragment: i, interface: r });
  }
  /**
   *  The name of the event.
   */
  get eventName() {
    return this.fragment.name;
  }
  /**
   *  The signature of the event.
   */
  get eventSignature() {
    return this.fragment.format();
  }
}
class Tx extends nc {
  /**
   * @_ignore:
   */
  constructor(t, r) {
    super(t, t.provider);
    /**
     *  The error encounted when trying to decode the log.
     */
    T(this, "error");
    Y(this, { error: r });
  }
}
var Ys;
class iv extends Ax {
  /**
   *  @_ignore:
   */
  constructor(t, r, i) {
    super(i, r);
    _(this, Ys);
    g(this, Ys, t);
  }
  /**
   *  The parsed logs for any [[Log]] which has a matching event in the
   *  Contract ABI.
   */
  get logs() {
    return super.logs.map((t) => {
      const r = t.topics.length ? m(this, Ys).getEvent(t.topics[0]) : null;
      if (r)
        try {
          return new Jf(t, m(this, Ys), r);
        } catch (i) {
          return new Tx(t, i);
        }
      return t;
    });
  }
}
Ys = new WeakMap();
var Do;
class Yf extends Io {
  /**
   *  @_ignore:
   */
  constructor(t, r, i) {
    super(i, r);
    _(this, Do);
    g(this, Do, t);
  }
  /**
   *  Resolves once this transaction has been mined and has
   *  %%confirms%% blocks including it (default: ``1``) with an
   *  optional %%timeout%%.
   *
   *  This can resolve to ``null`` only if %%confirms%% is ``0``
   *  and the transaction has not been mined, otherwise this will
   *  wait until enough confirmations have completed.
   */
  async wait(t, r) {
    const i = await super.wait(t, r);
    return i == null ? null : new iv(m(this, Do), this.provider, i);
  }
}
Do = new WeakMap();
class Px extends Om {
  /**
   *  @_event:
   */
  constructor(t, r, i, s) {
    super(t, r, i);
    /**
     *  The log with no matching events.
     */
    T(this, "log");
    Y(this, { log: s });
  }
  /**
   *  Resolves to the block the event occured in.
   */
  async getBlock() {
    return await this.log.getBlock();
  }
  /**
   *  Resolves to the transaction the event occured in.
   */
  async getTransaction() {
    return await this.log.getTransaction();
  }
  /**
   *  Resolves to the transaction receipt the event occured in.
   */
  async getTransactionReceipt() {
    return await this.log.getTransactionReceipt();
  }
}
class sv extends Px {
  /**
   *  @_ignore:
   */
  constructor(e, t, r, i, s) {
    super(e, t, r, new Jf(s, e.interface, i));
    const a = e.interface.decodeEventLog(i, this.log.data, this.log.topics);
    Y(this, { args: a, fragment: i });
  }
  /**
   *  The event name.
   */
  get eventName() {
    return this.fragment.name;
  }
  /**
   *  The event signature.
   */
  get eventSignature() {
    return this.fragment.format();
  }
}
const oh = BigInt(0);
function Sx(n) {
  return n && typeof n.call == "function";
}
function Ix(n) {
  return n && typeof n.estimateGas == "function";
}
function nl(n) {
  return n && typeof n.resolveName == "function";
}
function Cx(n) {
  return n && typeof n.sendTransaction == "function";
}
function Ox(n) {
  if (n != null) {
    if (nl(n))
      return n;
    if (n.provider)
      return n.provider;
  }
}
var Uo;
class av {
  constructor(e, t, r) {
    _(this, Uo);
    T(this, "fragment");
    if (Y(this, { fragment: t }), t.inputs.length < r.length)
      throw new Error("too many arguments");
    const i = qi(e.runner, "resolveName"), s = nl(i) ? i : null;
    g(this, Uo, async function() {
      const a = await Promise.all(t.inputs.map((o, c) => r[c] == null ? null : o.walkAsync(r[c], (l, d) => l === "address" ? Array.isArray(d) ? Promise.all(d.map((f) => Me(f, s))) : Me(d, s) : d)));
      return e.interface.encodeFilterTopics(t, a);
    }());
  }
  getTopicFilter() {
    return m(this, Uo);
  }
}
Uo = new WeakMap();
function qi(n, e) {
  return n == null ? null : typeof n[e] == "function" ? n : n.provider && typeof n.provider[e] == "function" ? n.provider : null;
}
function gi(n) {
  return n == null ? null : n.provider || null;
}
async function Nx(n, e) {
  const t = qe.dereference(n, "overrides");
  A(typeof t == "object", "invalid overrides parameter", "overrides", n);
  const r = So(t);
  return A(r.to == null || (e || []).indexOf("to") >= 0, "cannot override to", "overrides.to", r.to), A(r.data == null || (e || []).indexOf("data") >= 0, "cannot override data", "overrides.data", r.data), r.from && (r.from = r.from), r;
}
async function ov(n, e, t) {
  const r = qi(n, "resolveName"), i = nl(r) ? r : null;
  return await Promise.all(e.map((s, a) => s.walkAsync(t[a], (o, c) => (c = qe.dereference(c, o), o === "address" ? Me(c, i) : c))));
}
function cv(n) {
  const e = async function(a) {
    const o = await Nx(a, ["data"]);
    o.to = await n.getAddress(), o.from && (o.from = await Me(o.from, Ox(n.runner)));
    const c = n.interface, u = q(o.value || oh, "overrides.value") === oh, l = (o.data || "0x") === "0x";
    c.fallback && !c.fallback.payable && c.receive && !l && !u && A(!1, "cannot send data to receive or send value to non-payable fallback", "overrides", a), A(c.fallback || l, "cannot send data to receive-only contract", "overrides.data", o.data);
    const d = c.receive || c.fallback && c.fallback.payable;
    return A(d || u, "cannot send value to non-payable fallback", "overrides.value", o.value), A(c.fallback || l, "cannot send data to receive-only contract", "overrides.data", o.data), o;
  }, t = async function(a) {
    const o = qi(n.runner, "call");
    G(Sx(o), "contract runner does not support calling", "UNSUPPORTED_OPERATION", { operation: "call" });
    const c = await e(a);
    try {
      return await o.call(c);
    } catch (u) {
      throw Bf(u) && u.data ? n.interface.makeError(u.data, c) : u;
    }
  }, r = async function(a) {
    const o = n.runner;
    G(Cx(o), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", { operation: "sendTransaction" });
    const c = await o.sendTransaction(await e(a)), u = gi(n.runner);
    return new Yf(n.interface, u, c);
  }, i = async function(a) {
    const o = qi(n.runner, "estimateGas");
    return G(Ix(o), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", { operation: "estimateGas" }), await o.estimateGas(await e(a));
  }, s = async (a) => await r(a);
  return Y(s, {
    _contract: n,
    estimateGas: i,
    populateTransaction: e,
    send: r,
    staticCall: t
  }), s;
}
function uv(n, e) {
  const t = function(...u) {
    const l = n.interface.getFunction(e, u);
    return G(l, "no matching fragment", "UNSUPPORTED_OPERATION", {
      operation: "fragment",
      info: { key: e, args: u }
    }), l;
  }, r = async function(...u) {
    const l = t(...u);
    let d = {};
    if (l.inputs.length + 1 === u.length && (d = await Nx(u.pop()), d.from && (d.from = await Me(d.from, Ox(n.runner)))), l.inputs.length !== u.length)
      throw new Error("internal error: fragment inputs doesn't match arguments; should not happen");
    const f = await ov(n.runner, l.inputs, u);
    return Object.assign({}, d, await Ke({
      to: n.getAddress(),
      data: n.interface.encodeFunctionData(l, f)
    }));
  }, i = async function(...u) {
    const l = await o(...u);
    return l.length === 1 ? l[0] : l;
  }, s = async function(...u) {
    const l = n.runner;
    G(Cx(l), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", { operation: "sendTransaction" });
    const d = await l.sendTransaction(await r(...u)), f = gi(n.runner);
    return new Yf(n.interface, f, d);
  }, a = async function(...u) {
    const l = qi(n.runner, "estimateGas");
    return G(Ix(l), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", { operation: "estimateGas" }), await l.estimateGas(await r(...u));
  }, o = async function(...u) {
    const l = qi(n.runner, "call");
    G(Sx(l), "contract runner does not support calling", "UNSUPPORTED_OPERATION", { operation: "call" });
    const d = await r(...u);
    let f = "0x";
    try {
      f = await l.call(d);
    } catch (y) {
      throw Bf(y) && y.data ? n.interface.makeError(y.data, d) : y;
    }
    const p = t(...u);
    return n.interface.decodeFunctionResult(p, f);
  }, c = async (...u) => t(...u).constant ? await i(...u) : await s(...u);
  return Y(c, {
    name: n.interface.getFunctionName(e),
    _contract: n,
    _key: e,
    getFragment: t,
    estimateGas: a,
    populateTransaction: r,
    send: s,
    staticCall: i,
    staticCallResult: o
  }), Object.defineProperty(c, "fragment", {
    configurable: !1,
    enumerable: !0,
    get: () => {
      const u = n.interface.getFunction(e);
      return G(u, "no matching fragment", "UNSUPPORTED_OPERATION", {
        operation: "fragment",
        info: { key: e }
      }), u;
    }
  }), c;
}
function lv(n, e) {
  const t = function(...i) {
    const s = n.interface.getEvent(e, i);
    return G(s, "no matching fragment", "UNSUPPORTED_OPERATION", {
      operation: "fragment",
      info: { key: e, args: i }
    }), s;
  }, r = function(...i) {
    return new av(n, t(...i), i);
  };
  return Y(r, {
    name: n.interface.getEventName(e),
    _contract: n,
    _key: e,
    getFragment: t
  }), Object.defineProperty(r, "fragment", {
    configurable: !1,
    enumerable: !0,
    get: () => {
      const i = n.interface.getEvent(e);
      return G(i, "no matching fragment", "UNSUPPORTED_OPERATION", {
        operation: "fragment",
        info: { key: e }
      }), i;
    }
  }), r;
}
const fu = Symbol.for("_ethersInternal_contract"), Rx = /* @__PURE__ */ new WeakMap();
function dv(n, e) {
  Rx.set(n[fu], e);
}
function mt(n) {
  return Rx.get(n[fu]);
}
function fv(n) {
  return n && typeof n == "object" && "getTopicFilter" in n && typeof n.getTopicFilter == "function" && n.fragment;
}
async function Zf(n, e) {
  let t, r = null;
  if (Array.isArray(e)) {
    const s = function(a) {
      if (me(a, 32))
        return a;
      const o = n.interface.getEvent(a);
      return A(o, "unknown fragment", "name", a), o.topicHash;
    };
    t = e.map((a) => a == null ? null : Array.isArray(a) ? a.map(s) : s(a));
  } else e === "*" ? t = [null] : typeof e == "string" ? me(e, 32) ? t = [e] : (r = n.interface.getEvent(e), A(r, "unknown fragment", "event", e), t = [r.topicHash]) : fv(e) ? t = await e.getTopicFilter() : "fragment" in e ? (r = e.fragment, t = [r.topicHash]) : A(!1, "unknown event name", "event", e);
  t = t.map((s) => {
    if (s == null)
      return null;
    if (Array.isArray(s)) {
      const a = Array.from(new Set(s.map((o) => o.toLowerCase())).values());
      return a.length === 1 ? a[0] : (a.sort(), a);
    }
    return s.toLowerCase();
  });
  const i = t.map((s) => s == null ? "null" : Array.isArray(s) ? s.join("|") : s).join("&");
  return { fragment: r, tag: i, topics: t };
}
async function qa(n, e) {
  const { subs: t } = mt(n);
  return t.get((await Zf(n, e)).tag) || null;
}
async function ch(n, e, t) {
  const r = gi(n.runner);
  G(r, "contract runner does not support subscribing", "UNSUPPORTED_OPERATION", { operation: e });
  const { fragment: i, tag: s, topics: a } = await Zf(n, t), { addr: o, subs: c } = mt(n);
  let u = c.get(s);
  if (!u) {
    const d = { address: o || n, topics: a }, f = (b) => {
      let x = i;
      if (x == null)
        try {
          x = n.interface.getEvent(b.topics[0]);
        } catch {
        }
      if (x) {
        const w = x, E = i ? n.interface.decodeEventLog(i, b.data, b.topics) : [];
        Md(n, t, E, (N) => new sv(n, N, t, w, b));
      } else
        Md(n, t, [], (w) => new Px(n, w, t, b));
    };
    let p = [];
    u = { tag: s, listeners: [], start: () => {
      p.length || p.push(r.on(d, f));
    }, stop: async () => {
      if (p.length == 0)
        return;
      let b = p;
      p = [], await Promise.all(b), r.off(d, f);
    } }, c.set(s, u);
  }
  return u;
}
let Ld = Promise.resolve();
async function pv(n, e, t, r) {
  await Ld;
  const i = await qa(n, e);
  if (!i)
    return !1;
  const s = i.listeners.length;
  return i.listeners = i.listeners.filter(({ listener: a, once: o }) => {
    const c = Array.from(t);
    r && c.push(r(o ? null : a));
    try {
      a.call(n, ...c);
    } catch {
    }
    return !o;
  }), i.listeners.length === 0 && (i.stop(), mt(n).subs.delete(i.tag)), s > 0;
}
async function Md(n, e, t, r) {
  try {
    await Ld;
  } catch {
  }
  const i = pv(n, e, t, r);
  return Ld = i, await i;
}
const Sc = ["then"];
var Nh;
Nh = fu;
const uo = class uo {
  /**
   *  Creates a new contract connected to %%target%% with the %%abi%% and
   *  optionally connected to a %%runner%% to perform operations on behalf
   *  of.
   */
  constructor(e, t, r, i) {
    /**
     *  The target to connect to.
     *
     *  This can be an address, ENS name or any [[Addressable]], such as
     *  another contract. To get the resovled address, use the ``getAddress``
     *  method.
     */
    T(this, "target");
    /**
     *  The contract Interface.
     */
    T(this, "interface");
    /**
     *  The connected runner. This is generally a [[Provider]] or a
     *  [[Signer]], which dictates what operations are supported.
     *
     *  For example, a **Contract** connected to a [[Provider]] may
     *  only execute read-only operations.
     */
    T(this, "runner");
    /**
     *  All the Events available on this contract.
     */
    T(this, "filters");
    /**
     *  @_ignore:
     */
    T(this, Nh);
    /**
     *  The fallback or receive function if any.
     */
    T(this, "fallback");
    A(typeof e == "string" || Lb(e), "invalid value for Contract target", "target", e), r == null && (r = null);
    const s = kd.from(t);
    Y(this, { target: e, runner: r, interface: s }), Object.defineProperty(this, fu, { value: {} });
    let a, o = null, c = null;
    if (i) {
      const d = gi(r);
      c = new Yf(this.interface, d, i);
    }
    let u = /* @__PURE__ */ new Map();
    if (typeof e == "string")
      if (me(e))
        o = e, a = Promise.resolve(e);
      else {
        const d = qi(r, "resolveName");
        if (!nl(d))
          throw ge("contract runner does not support name resolution", "UNSUPPORTED_OPERATION", {
            operation: "resolveName"
          });
        a = d.resolveName(e).then((f) => {
          if (f == null)
            throw ge("an ENS name used for a contract target must be correctly configured", "UNCONFIGURED_NAME", {
              value: e
            });
          return mt(this).addr = f, f;
        });
      }
    else
      a = e.getAddress().then((d) => {
        if (d == null)
          throw new Error("TODO");
        return mt(this).addr = d, d;
      });
    dv(this, { addrPromise: a, addr: o, deployTx: c, subs: u });
    const l = new Proxy({}, {
      get: (d, f, p) => {
        if (typeof f == "symbol" || Sc.indexOf(f) >= 0)
          return Reflect.get(d, f, p);
        try {
          return this.getEvent(f);
        } catch (y) {
          if (!He(y, "INVALID_ARGUMENT") || y.argument !== "key")
            throw y;
        }
      },
      has: (d, f) => Sc.indexOf(f) >= 0 ? Reflect.has(d, f) : Reflect.has(d, f) || this.interface.hasEvent(String(f))
    });
    return Y(this, { filters: l }), Y(this, {
      fallback: s.receive || s.fallback ? cv(this) : null
    }), new Proxy(this, {
      get: (d, f, p) => {
        if (typeof f == "symbol" || f in d || Sc.indexOf(f) >= 0)
          return Reflect.get(d, f, p);
        try {
          return d.getFunction(f);
        } catch (y) {
          if (!He(y, "INVALID_ARGUMENT") || y.argument !== "key")
            throw y;
        }
      },
      has: (d, f) => typeof f == "symbol" || f in d || Sc.indexOf(f) >= 0 ? Reflect.has(d, f) : d.interface.hasFunction(f)
    });
  }
  /**
   *  Return a new Contract instance with the same target and ABI, but
   *  a different %%runner%%.
   */
  connect(e) {
    return new uo(this.target, this.interface, e);
  }
  /**
   *  Return a new Contract instance with the same ABI and runner, but
   *  a different %%target%%.
   */
  attach(e) {
    return new uo(e, this.interface, this.runner);
  }
  /**
   *  Return the resolved address of this Contract.
   */
  async getAddress() {
    return await mt(this).addrPromise;
  }
  /**
   *  Return the deployed bytecode or null if no bytecode is found.
   */
  async getDeployedCode() {
    const e = gi(this.runner);
    G(e, "runner does not support .provider", "UNSUPPORTED_OPERATION", { operation: "getDeployedCode" });
    const t = await e.getCode(await this.getAddress());
    return t === "0x" ? null : t;
  }
  /**
   *  Resolve to this Contract once the bytecode has been deployed, or
   *  resolve immediately if already deployed.
   */
  async waitForDeployment() {
    const e = this.deploymentTransaction();
    if (e)
      return await e.wait(), this;
    if (await this.getDeployedCode() != null)
      return this;
    const r = gi(this.runner);
    return G(r != null, "contract runner does not support .provider", "UNSUPPORTED_OPERATION", { operation: "waitForDeployment" }), new Promise((i, s) => {
      const a = async () => {
        try {
          if (await this.getDeployedCode() != null)
            return i(this);
          r.once("block", a);
        } catch (o) {
          s(o);
        }
      };
      a();
    });
  }
  /**
   *  Return the transaction used to deploy this contract.
   *
   *  This is only available if this instance was returned from a
   *  [[ContractFactory]].
   */
  deploymentTransaction() {
    return mt(this).deployTx;
  }
  /**
   *  Return the function for a given name. This is useful when a contract
   *  method name conflicts with a JavaScript name such as ``prototype`` or
   *  when using a Contract programatically.
   */
  getFunction(e) {
    return typeof e != "string" && (e = e.format()), uv(this, e);
  }
  /**
   *  Return the event for a given name. This is useful when a contract
   *  event name conflicts with a JavaScript name such as ``prototype`` or
   *  when using a Contract programatically.
   */
  getEvent(e) {
    return typeof e != "string" && (e = e.format()), lv(this, e);
  }
  /**
   *  @_ignore:
   */
  async queryTransaction(e) {
    throw new Error("@TODO");
  }
  /*
      // @TODO: this is a non-backwards compatible change, but will be added
      //        in v7 and in a potential SmartContract class in an upcoming
      //        v6 release
      async getTransactionReceipt(hash: string): Promise<null | ContractTransactionReceipt> {
          const provider = getProvider(this.runner);
          assert(provider, "contract runner does not have a provider",
              "UNSUPPORTED_OPERATION", { operation: "queryTransaction" });
  
          const receipt = await provider.getTransactionReceipt(hash);
          if (receipt == null) { return null; }
  
          return new ContractTransactionReceipt(this.interface, provider, receipt);
      }
      */
  /**
   *  Provide historic access to event data for %%event%% in the range
   *  %%fromBlock%% (default: ``0``) to %%toBlock%% (default: ``"latest"``)
   *  inclusive.
   */
  async queryFilter(e, t, r) {
    t == null && (t = 0), r == null && (r = "latest");
    const { addr: i, addrPromise: s } = mt(this), a = i || await s, { fragment: o, topics: c } = await Zf(this, e), u = { address: a, topics: c, fromBlock: t, toBlock: r }, l = gi(this.runner);
    return G(l, "contract runner does not have a provider", "UNSUPPORTED_OPERATION", { operation: "queryFilter" }), (await l.getLogs(u)).map((d) => {
      let f = o;
      if (f == null)
        try {
          f = this.interface.getEvent(d.topics[0]);
        } catch {
        }
      if (f)
        try {
          return new Jf(d, this.interface, f);
        } catch (p) {
          return new Tx(d, p);
        }
      return new nc(d, l);
    });
  }
  /**
   *  Add an event %%listener%% for the %%event%%.
   */
  async on(e, t) {
    const r = await ch(this, "on", e);
    return r.listeners.push({ listener: t, once: !1 }), r.start(), this;
  }
  /**
   *  Add an event %%listener%% for the %%event%%, but remove the listener
   *  after it is fired once.
   */
  async once(e, t) {
    const r = await ch(this, "once", e);
    return r.listeners.push({ listener: t, once: !0 }), r.start(), this;
  }
  /**
   *  Emit an %%event%% calling all listeners with %%args%%.
   *
   *  Resolves to ``true`` if any listeners were called.
   */
  async emit(e, ...t) {
    return await Md(this, e, t, null);
  }
  /**
   *  Resolves to the number of listeners of %%event%% or the total number
   *  of listeners if unspecified.
   */
  async listenerCount(e) {
    if (e) {
      const i = await qa(this, e);
      return i ? i.listeners.length : 0;
    }
    const { subs: t } = mt(this);
    let r = 0;
    for (const { listeners: i } of t.values())
      r += i.length;
    return r;
  }
  /**
   *  Resolves to the listeners subscribed to %%event%% or all listeners
   *  if unspecified.
   */
  async listeners(e) {
    if (e) {
      const i = await qa(this, e);
      return i ? i.listeners.map(({ listener: s }) => s) : [];
    }
    const { subs: t } = mt(this);
    let r = [];
    for (const { listeners: i } of t.values())
      r = r.concat(i.map(({ listener: s }) => s));
    return r;
  }
  /**
   *  Remove the %%listener%% from the listeners for %%event%% or remove
   *  all listeners if unspecified.
   */
  async off(e, t) {
    const r = await qa(this, e);
    if (!r)
      return this;
    if (t) {
      const i = r.listeners.map(({ listener: s }) => s).indexOf(t);
      i >= 0 && r.listeners.splice(i, 1);
    }
    return (t == null || r.listeners.length === 0) && (r.stop(), mt(this).subs.delete(r.tag)), this;
  }
  /**
   *  Remove all the listeners for %%event%% or remove all listeners if
   *  unspecified.
   */
  async removeAllListeners(e) {
    if (e) {
      const t = await qa(this, e);
      if (!t)
        return this;
      t.stop(), mt(this).subs.delete(t.tag);
    } else {
      const { subs: t } = mt(this);
      for (const { tag: r, stop: i } of t.values())
        i(), t.delete(r);
    }
    return this;
  }
  /**
   *  Alias for [on].
   */
  async addListener(e, t) {
    return await this.on(e, t);
  }
  /**
   *  Alias for [off].
   */
  async removeListener(e, t) {
    return await this.off(e, t);
  }
  /**
   *  Create a new Class for the %%abi%%.
   */
  static buildClass(e) {
    class t extends uo {
      constructor(i, s = null) {
        super(i, e, s);
      }
    }
    return t;
  }
  /**
   *  Create a new BaseContract with a specified Interface.
   */
  static from(e, t, r) {
    return r == null && (r = null), new this(e, t, r);
  }
};
let Dd = uo;
function hv() {
  return Dd;
}
class oo extends hv() {
}
function Dl(n) {
  return n.match(/^ipfs:\/\/ipfs\//i) ? n = n.substring(12) : n.match(/^ipfs:\/\//i) ? n = n.substring(7) : A(!1, "unsupported IPFS format", "link", n), `https://gateway.ipfs.io/ipfs/${n}`;
}
class yv {
  /**
   *  Creates a new **MulticoinProviderPluing** for %%name%%.
   */
  constructor(e) {
    /**
     *  The name.
     */
    T(this, "name");
    Y(this, { name: e });
  }
  connect(e) {
    return this;
  }
  /**
   *  Returns ``true`` if %%coinType%% is supported by this plugin.
   */
  supportsCoinType(e) {
    return !1;
  }
  /**
   *  Resolves to the encoded %%address%% for %%coinType%%.
   */
  async encodeAddress(e, t) {
    throw new Error("unsupported coin");
  }
  /**
   *  Resolves to the decoded %%data%% for %%coinType%%.
   */
  async decodeAddress(e, t) {
    throw new Error("unsupported coin");
  }
}
const Bx = new RegExp("^(ipfs)://(.*)$", "i"), uh = [
  new RegExp("^(https)://(.*)$", "i"),
  new RegExp("^(data):(.*)$", "i"),
  Bx,
  new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i")
];
var Dr, Bi, Ur, ps, vu, _x;
const ws = class ws {
  constructor(e, t, r) {
    _(this, Ur);
    /**
     *  The connected provider.
     */
    T(this, "provider");
    /**
     *  The address of the resolver.
     */
    T(this, "address");
    /**
     *  The name this resolver was resolved against.
     */
    T(this, "name");
    // For EIP-2544 names, the ancestor that provided the resolver
    _(this, Dr);
    _(this, Bi);
    Y(this, { provider: e, address: t, name: r }), g(this, Dr, null), g(this, Bi, new oo(t, [
      "function supportsInterface(bytes4) view returns (bool)",
      "function resolve(bytes, bytes) view returns (bytes)",
      "function addr(bytes32) view returns (address)",
      "function addr(bytes32, uint) view returns (bytes)",
      "function text(bytes32, string) view returns (string)",
      "function contenthash(bytes32) view returns (bytes)"
    ], e));
  }
  /**
   *  Resolves to true if the resolver supports wildcard resolution.
   */
  async supportsWildcard() {
    return m(this, Dr) == null && g(this, Dr, (async () => {
      try {
        return await m(this, Bi).supportsInterface("0x9061b923");
      } catch (e) {
        if (He(e, "CALL_EXCEPTION"))
          return !1;
        throw g(this, Dr, null), e;
      }
    })()), await m(this, Dr);
  }
  /**
   *  Resolves to the address for %%coinType%% or null if the
   *  provided %%coinType%% has not been configured.
   */
  async getAddress(e) {
    if (e == null && (e = 60), e === 60)
      try {
        const s = await z(this, Ur, ps).call(this, "addr(bytes32)");
        return s == null || s === go ? null : s;
      } catch (s) {
        if (He(s, "CALL_EXCEPTION"))
          return null;
        throw s;
      }
    if (e >= 0 && e < 2147483648) {
      let s = e + 2147483648;
      const a = await z(this, Ur, ps).call(this, "addr(bytes32,uint)", [s]);
      if (me(a, 20))
        return oe(a);
    }
    let t = null;
    for (const s of this.provider.plugins)
      if (s instanceof yv && s.supportsCoinType(e)) {
        t = s;
        break;
      }
    if (t == null)
      return null;
    const r = await z(this, Ur, ps).call(this, "addr(bytes32,uint)", [e]);
    if (r == null || r === "0x")
      return null;
    const i = await t.decodeAddress(e, r);
    if (i != null)
      return i;
    G(!1, "invalid coin data", "UNSUPPORTED_OPERATION", {
      operation: `getAddress(${e})`,
      info: { coinType: e, data: r }
    });
  }
  /**
   *  Resolves to the EIP-634 text record for %%key%%, or ``null``
   *  if unconfigured.
   */
  async getText(e) {
    const t = await z(this, Ur, ps).call(this, "text(bytes32,string)", [e]);
    return t == null || t === "0x" ? null : t;
  }
  /**
   *  Rsolves to the content-hash or ``null`` if unconfigured.
   */
  async getContentHash() {
    const e = await z(this, Ur, ps).call(this, "contenthash(bytes32)");
    if (e == null || e === "0x")
      return null;
    const t = e.match(/^0x(e3010170|e5010172)(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
    if (t) {
      const i = t[1] === "e3010170" ? "ipfs" : "ipns", s = parseInt(t[4], 16);
      if (t[5].length === s * 2)
        return `${i}://${Cm("0x" + t[2])}`;
    }
    const r = e.match(/^0xe40101fa011b20([0-9a-f]*)$/);
    if (r && r[1].length === 64)
      return `bzz://${r[1]}`;
    G(!1, "invalid or unsupported content hash data", "UNSUPPORTED_OPERATION", {
      operation: "getContentHash()",
      info: { data: e }
    });
  }
  /**
   *  Resolves to the avatar url or ``null`` if the avatar is either
   *  unconfigured or incorrectly configured (e.g. references an NFT
   *  not owned by the address).
   *
   *  If diagnosing issues with configurations, the [[_getAvatar]]
   *  method may be useful.
   */
  async getAvatar() {
    return (await this._getAvatar()).url;
  }
  /**
   *  When resolving an avatar, there are many steps involved, such
   *  fetching metadata and possibly validating ownership of an
   *  NFT.
   *
   *  This method can be used to examine each step and the value it
   *  was working from.
   */
  async _getAvatar() {
    const e = [{ type: "name", value: this.name }];
    try {
      const t = await this.getText("avatar");
      if (t == null)
        return e.push({ type: "!avatar", value: "" }), { url: null, linkage: e };
      e.push({ type: "avatar", value: t });
      for (let r = 0; r < uh.length; r++) {
        const i = t.match(uh[r]);
        if (i == null)
          continue;
        const s = i[1].toLowerCase();
        switch (s) {
          case "https":
          case "data":
            return e.push({ type: "url", value: t }), { linkage: e, url: t };
          case "ipfs": {
            const a = Dl(t);
            return e.push({ type: "ipfs", value: t }), e.push({ type: "url", value: a }), { linkage: e, url: a };
          }
          case "erc721":
          case "erc1155": {
            const a = s === "erc721" ? "tokenURI(uint256)" : "uri(uint256)";
            e.push({ type: s, value: t });
            const o = await this.getAddress();
            if (o == null)
              return e.push({ type: "!owner", value: "" }), { url: null, linkage: e };
            const c = (i[2] || "").split("/");
            if (c.length !== 2)
              return e.push({ type: `!${s}caip`, value: i[2] || "" }), { url: null, linkage: e };
            const u = c[1], l = new oo(c[0], [
              // ERC-721
              "function tokenURI(uint) view returns (string)",
              "function ownerOf(uint) view returns (address)",
              // ERC-1155
              "function uri(uint) view returns (string)",
              "function balanceOf(address, uint256) view returns (uint)"
            ], this.provider);
            if (s === "erc721") {
              const h = await l.ownerOf(u);
              if (o !== h)
                return e.push({ type: "!owner", value: h }), { url: null, linkage: e };
              e.push({ type: "owner", value: h });
            } else if (s === "erc1155") {
              const h = await l.balanceOf(o, u);
              if (!h)
                return e.push({ type: "!balance", value: "0" }), { url: null, linkage: e };
              e.push({ type: "balance", value: h.toString() });
            }
            let d = await l[a](u);
            if (d == null || d === "0x")
              return e.push({ type: "!metadata-url", value: "" }), { url: null, linkage: e };
            e.push({ type: "metadata-url-base", value: d }), s === "erc1155" && (d = d.replace("{id}", pr(u, 32).substring(2)), e.push({ type: "metadata-url-expanded", value: d })), d.match(/^ipfs:/i) && (d = Dl(d)), e.push({ type: "metadata-url", value: d });
            let f = {};
            const p = await new hr(d).send();
            p.assertOk();
            try {
              f = p.bodyJson;
            } catch {
              try {
                e.push({ type: "!metadata", value: p.bodyText });
              } catch {
                const x = p.body;
                return x && e.push({ type: "!metadata", value: V(x) }), { url: null, linkage: e };
              }
              return { url: null, linkage: e };
            }
            if (!f)
              return e.push({ type: "!metadata", value: "" }), { url: null, linkage: e };
            e.push({ type: "metadata", value: JSON.stringify(f) });
            let y = f.image;
            if (typeof y != "string")
              return e.push({ type: "!imageUrl", value: "" }), { url: null, linkage: e };
            if (!y.match(/^(https:\/\/|data:)/i)) {
              if (y.match(Bx) == null)
                return e.push({ type: "!imageUrl-ipfs", value: y }), { url: null, linkage: e };
              e.push({ type: "imageUrl-ipfs", value: y }), y = Dl(y);
            }
            return e.push({ type: "url", value: y }), { linkage: e, url: y };
          }
        }
      }
    } catch {
    }
    return { linkage: e, url: null };
  }
  static async getEnsAddress(e) {
    const t = await e.getNetwork(), r = t.getPlugin("org.ethers.plugins.network.Ens");
    return G(r, "network does not support ENS", "UNSUPPORTED_OPERATION", {
      operation: "getEnsAddress",
      info: { network: t }
    }), r.address;
  }
  /**
   *  Resolve to the ENS resolver for %%name%% using %%provider%% or
   *  ``null`` if unconfigured.
   */
  static async fromName(e, t) {
    var i;
    let r = t;
    for (; ; ) {
      if (r === "" || r === "." || t !== "eth" && r === "eth")
        return null;
      const s = await z(i = ws, vu, _x).call(i, e, r);
      if (s != null) {
        const a = new ws(e, s, t);
        return r !== t && !await a.supportsWildcard() ? null : a;
      }
      r = r.split(".").slice(1).join(".");
    }
  }
};
Dr = new WeakMap(), Bi = new WeakMap(), Ur = new WeakSet(), ps = async function(e, t) {
  t = (t || []).slice();
  const r = m(this, Bi).interface;
  t.unshift(Bd(this.name));
  let i = null;
  await this.supportsWildcard() && (i = r.getFunction(e), G(i, "missing fragment", "UNKNOWN_ERROR", {
    info: { funcName: e }
  }), t = [
    SE(this.name, 255),
    r.encodeFunctionData(i, t)
  ], e = "resolve(bytes,bytes)"), t.push({
    enableCcipRead: !0
  });
  try {
    const s = await m(this, Bi)[e](...t);
    return i ? r.decodeFunctionResult(i, s)[0] : s;
  } catch (s) {
    if (!He(s, "CALL_EXCEPTION"))
      throw s;
  }
  return null;
}, vu = new WeakSet(), _x = async function(e, t) {
  const r = await ws.getEnsAddress(e);
  try {
    const s = await new oo(r, [
      "function resolver(bytes32) view returns (address)"
    ], e).resolver(Bd(t), {
      enableCcipRead: !0
    });
    return s === go ? null : s;
  } catch (i) {
    throw i;
  }
  return null;
}, _(ws, vu);
let pu = ws;
const lh = BigInt(0);
function ce(n, e) {
  return function(t) {
    return t == null ? e : n(t);
  };
}
function Co(n, e) {
  return (t) => {
    if (e && t == null)
      return null;
    if (!Array.isArray(t))
      throw new Error("not an array");
    return t.map((r) => n(r));
  };
}
function rc(n, e) {
  return (t) => {
    const r = {};
    for (const i in n) {
      let s = i;
      if (e && i in e && !(s in t)) {
        for (const a of e[i])
          if (a in t) {
            s = a;
            break;
          }
      }
      try {
        const a = n[i](t[s]);
        a !== void 0 && (r[i] = a);
      } catch (a) {
        const o = a instanceof Error ? a.message : "not-an-error";
        G(!1, `invalid value for value.${i} (${o})`, "BAD_DATA", { value: t });
      }
    }
    return r;
  };
}
function mv(n) {
  switch (n) {
    case !0:
    case "true":
      return !0;
    case !1:
    case "false":
      return !1;
  }
  A(!1, `invalid boolean; ${JSON.stringify(n)}`, "value", n);
}
function Ia(n) {
  return A(me(n, !0), "invalid data", "value", n), n;
}
function Ge(n) {
  return A(me(n, 32), "invalid hash", "value", n), n;
}
const bv = rc({
  address: oe,
  blockHash: Ge,
  blockNumber: te,
  data: Ia,
  index: te,
  removed: ce(mv, !1),
  topics: Co(Ge),
  transactionHash: Ge,
  transactionIndex: te
}, {
  index: ["logIndex"]
});
function xv(n) {
  return bv(n);
}
const gv = rc({
  hash: ce(Ge),
  parentHash: Ge,
  parentBeaconBlockRoot: ce(Ge, null),
  number: te,
  timestamp: te,
  nonce: ce(Ia),
  difficulty: q,
  gasLimit: q,
  gasUsed: q,
  stateRoot: ce(Ge, null),
  receiptsRoot: ce(Ge, null),
  blobGasUsed: ce(q, null),
  excessBlobGas: ce(q, null),
  miner: ce(oe),
  prevRandao: ce(Ge, null),
  extraData: Ia,
  baseFeePerGas: ce(q)
}, {
  prevRandao: ["mixHash"]
});
function wv(n) {
  const e = gv(n);
  return e.transactions = n.transactions.map((t) => typeof t == "string" ? t : kx(t)), e;
}
const Av = rc({
  transactionIndex: te,
  blockNumber: te,
  transactionHash: Ge,
  address: oe,
  topics: Co(Ge),
  data: Ia,
  index: te,
  blockHash: Ge
}, {
  index: ["logIndex"]
});
function Ev(n) {
  return Av(n);
}
const vv = rc({
  to: ce(oe, null),
  from: ce(oe, null),
  contractAddress: ce(oe, null),
  // should be allowNull(hash), but broken-EIP-658 support is handled in receipt
  index: te,
  root: ce(V),
  gasUsed: q,
  blobGasUsed: ce(q, null),
  logsBloom: ce(Ia),
  blockHash: Ge,
  hash: Ge,
  logs: Co(Ev),
  blockNumber: te,
  //confirmations: allowNull(getNumber, null),
  cumulativeGasUsed: q,
  effectiveGasPrice: ce(q),
  blobGasPrice: ce(q, null),
  status: ce(te),
  type: ce(te, 0)
}, {
  effectiveGasPrice: ["gasPrice"],
  hash: ["transactionHash"],
  index: ["transactionIndex"]
});
function Tv(n) {
  return vv(n);
}
function kx(n) {
  n.to && q(n.to) === lh && (n.to = "0x0000000000000000000000000000000000000000");
  const e = rc({
    hash: Ge,
    // Some nodes do not return this, usually test nodes (like Ganache)
    index: ce(te, void 0),
    type: (t) => t === "0x" || t == null ? 0 : te(t),
    accessList: ce(ts, null),
    blobVersionedHashes: ce(Co(Ge, !0), null),
    authorizationList: ce(Co((t) => {
      let r;
      if (t.signature)
        r = t.signature;
      else {
        let i = t.yParity;
        i === "0x1b" ? i = 0 : i === "0x1c" && (i = 1), r = Object.assign({}, t, { yParity: i });
      }
      return {
        address: oe(t.address),
        chainId: q(t.chainId),
        nonce: q(t.nonce),
        signature: ft.from(r)
      };
    }, !1), null),
    blockHash: ce(Ge, null),
    blockNumber: ce(te, null),
    transactionIndex: ce(te, null),
    from: oe,
    // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas) must be set
    gasPrice: ce(q),
    maxPriorityFeePerGas: ce(q),
    maxFeePerGas: ce(q),
    maxFeePerBlobGas: ce(q, null),
    gasLimit: q,
    to: ce(oe, null),
    value: q,
    nonce: te,
    data: Ia,
    creates: ce(oe, null),
    chainId: ce(q, null)
  }, {
    data: ["input"],
    gasLimit: ["gas"],
    index: ["transactionIndex"]
  })(n);
  if (e.to == null && e.creates == null && (e.creates = c8(e)), (n.type === 1 || n.type === 2) && n.accessList == null && (e.accessList = []), n.signature ? e.signature = ft.from(n.signature) : e.signature = ft.from(n), e.chainId == null) {
    const t = e.signature.legacyChainId;
    t != null && (e.chainId = t);
  }
  return e.blockHash && q(e.blockHash) === lh && (e.blockHash = null), e;
}
const Pv = "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
class ic {
  /**
   *  Creates a new **NetworkPlugin**.
   */
  constructor(e) {
    /**
     *  The name of the plugin.
     *
     *  It is recommended to use reverse-domain-notation, which permits
     *  unique names with a known authority as well as hierarchal entries.
     */
    T(this, "name");
    Y(this, { name: e });
  }
  /**
   *  Creates a copy of this plugin.
   */
  clone() {
    return new ic(this.name);
  }
}
class rl extends ic {
  /**
   *  Creates a new GasCostPlugin from %%effectiveBlock%% until the
   *  latest block or another GasCostPlugin supercedes that block number,
   *  with the associated %%costs%%.
   */
  constructor(t, r) {
    t == null && (t = 0);
    super(`org.ethers.network.plugins.GasCost#${t || 0}`);
    /**
     *  The block number to treat these values as valid from.
     *
     *  This allows a hardfork to have updated values included as well as
     *  mulutiple hardforks to be supported.
     */
    T(this, "effectiveBlock");
    /**
     *  The transactions base fee.
     */
    T(this, "txBase");
    /**
     *  The fee for creating a new account.
     */
    T(this, "txCreate");
    /**
     *  The fee per zero-byte in the data.
     */
    T(this, "txDataZero");
    /**
     *  The fee per non-zero-byte in the data.
     */
    T(this, "txDataNonzero");
    /**
     *  The fee per storage key in the [[link-eip-2930]] access list.
     */
    T(this, "txAccessListStorageKey");
    /**
     *  The fee per address in the [[link-eip-2930]] access list.
     */
    T(this, "txAccessListAddress");
    const i = { effectiveBlock: t };
    function s(a, o) {
      let c = (r || {})[a];
      c == null && (c = o), A(typeof c == "number", `invalud value for ${a}`, "costs", r), i[a] = c;
    }
    s("txBase", 21e3), s("txCreate", 32e3), s("txDataZero", 4), s("txDataNonzero", 16), s("txAccessListStorageKey", 1900), s("txAccessListAddress", 2400), Y(this, i);
  }
  clone() {
    return new rl(this.effectiveBlock, this);
  }
}
class il extends ic {
  /**
   *  Creates a new **EnsPlugin** connected to %%address%% on the
   *  %%targetNetwork%%. The default ENS address and mainnet is used
   *  if unspecified.
   */
  constructor(t, r) {
    super("org.ethers.plugins.network.Ens");
    /**
     *  The ENS Registrty Contract address.
     */
    T(this, "address");
    /**
     *  The chain ID that the ENS contract lives on.
     */
    T(this, "targetNetwork");
    Y(this, {
      address: t || Pv,
      targetNetwork: r ?? 1
    });
  }
  clone() {
    return new il(this.address, this.targetNetwork);
  }
}
var Fo, Go;
class Sv extends ic {
  /**
   *  Creates a new **FetchUrlFeeDataNetworkPlugin** which will
   *  be used when computing the fee data for the network.
   */
  constructor(t, r) {
    super("org.ethers.plugins.network.FetchUrlFeeDataPlugin");
    _(this, Fo);
    _(this, Go);
    g(this, Fo, t), g(this, Go, r);
  }
  /**
   *  The URL to initialize the FetchRequest with in %%processFunc%%.
   */
  get url() {
    return m(this, Fo);
  }
  /**
   *  The callback to use when computing the FeeData.
   */
  get processFunc() {
    return m(this, Go);
  }
  // We are immutable, so we can serve as our own clone
  clone() {
    return this;
  }
}
Fo = new WeakMap(), Go = new WeakMap();
const Ul = /* @__PURE__ */ new Map();
var Zs, Xs, Fr;
const As = class As {
  /**
   *  Creates a new **Network** for %%name%% and %%chainId%%.
   */
  constructor(e, t) {
    _(this, Zs);
    _(this, Xs);
    _(this, Fr);
    g(this, Zs, e), g(this, Xs, q(t)), g(this, Fr, /* @__PURE__ */ new Map());
  }
  /**
   *  Returns a JSON-compatible representation of a Network.
   */
  toJSON() {
    return { name: this.name, chainId: String(this.chainId) };
  }
  /**
   *  The network common name.
   *
   *  This is the canonical name, as networks migh have multiple
   *  names.
   */
  get name() {
    return m(this, Zs);
  }
  set name(e) {
    g(this, Zs, e);
  }
  /**
   *  The network chain ID.
   */
  get chainId() {
    return m(this, Xs);
  }
  set chainId(e) {
    g(this, Xs, q(e, "chainId"));
  }
  /**
   *  Returns true if %%other%% matches this network. Any chain ID
   *  must match, and if no chain ID is present, the name must match.
   *
   *  This method does not currently check for additional properties,
   *  such as ENS address or plug-in compatibility.
   */
  matches(e) {
    if (e == null)
      return !1;
    if (typeof e == "string") {
      try {
        return this.chainId === q(e);
      } catch {
      }
      return this.name === e;
    }
    if (typeof e == "number" || typeof e == "bigint") {
      try {
        return this.chainId === q(e);
      } catch {
      }
      return !1;
    }
    if (typeof e == "object") {
      if (e.chainId != null) {
        try {
          return this.chainId === q(e.chainId);
        } catch {
        }
        return !1;
      }
      return e.name != null ? this.name === e.name : !1;
    }
    return !1;
  }
  /**
   *  Returns the list of plugins currently attached to this Network.
   */
  get plugins() {
    return Array.from(m(this, Fr).values());
  }
  /**
   *  Attach a new %%plugin%% to this Network. The network name
   *  must be unique, excluding any fragment.
   */
  attachPlugin(e) {
    if (m(this, Fr).get(e.name))
      throw new Error(`cannot replace existing plugin: ${e.name} `);
    return m(this, Fr).set(e.name, e.clone()), this;
  }
  /**
   *  Return the plugin, if any, matching %%name%% exactly. Plugins
   *  with fragments will not be returned unless %%name%% includes
   *  a fragment.
   */
  getPlugin(e) {
    return m(this, Fr).get(e) || null;
  }
  /**
   *  Gets a list of all plugins that match %%name%%, with otr without
   *  a fragment.
   */
  getPlugins(e) {
    return this.plugins.filter((t) => t.name.split("#")[0] === e);
  }
  /**
   *  Create a copy of this Network.
   */
  clone() {
    const e = new As(this.name, this.chainId);
    return this.plugins.forEach((t) => {
      e.attachPlugin(t.clone());
    }), e;
  }
  /**
   *  Compute the intrinsic gas required for a transaction.
   *
   *  A GasCostPlugin can be attached to override the default
   *  values.
   */
  computeIntrinsicGas(e) {
    const t = this.getPlugin("org.ethers.plugins.network.GasCost") || new rl();
    let r = t.txBase;
    if (e.to == null && (r += t.txCreate), e.data)
      for (let i = 2; i < e.data.length; i += 2)
        e.data.substring(i, i + 2) === "00" ? r += t.txDataZero : r += t.txDataNonzero;
    if (e.accessList) {
      const i = ts(e.accessList);
      for (const s in i)
        r += t.txAccessListAddress + t.txAccessListStorageKey * i[s].storageKeys.length;
    }
    return r;
  }
  /**
   *  Returns a new Network for the %%network%% name or chainId.
   */
  static from(e) {
    if (Iv(), e == null)
      return As.from("mainnet");
    if (typeof e == "number" && (e = BigInt(e)), typeof e == "string" || typeof e == "bigint") {
      const t = Ul.get(e);
      if (t)
        return t();
      if (typeof e == "bigint")
        return new As("unknown", e);
      A(!1, "unknown network", "network", e);
    }
    if (typeof e.clone == "function")
      return e.clone();
    if (typeof e == "object") {
      A(typeof e.name == "string" && typeof e.chainId == "number", "invalid network object name or chainId", "network", e);
      const t = new As(e.name, e.chainId);
      return (e.ensAddress || e.ensNetwork != null) && t.attachPlugin(new il(e.ensAddress, e.ensNetwork)), t;
    }
    A(!1, "invalid network", "network", e);
  }
  /**
   *  Register %%nameOrChainId%% with a function which returns
   *  an instance of a Network representing that chain.
   */
  static register(e, t) {
    typeof e == "number" && (e = BigInt(e));
    const r = Ul.get(e);
    r && A(!1, `conflicting network for ${JSON.stringify(r.name)}`, "nameOrChainId", e), Ul.set(e, t);
  }
};
Zs = new WeakMap(), Xs = new WeakMap(), Fr = new WeakMap();
let In = As;
function dh(n, e) {
  const t = String(n);
  if (!t.match(/^[0-9.]+$/))
    throw new Error(`invalid gwei value: ${n}`);
  const r = t.split(".");
  if (r.length === 1 && r.push(""), r.length !== 2)
    throw new Error(`invalid gwei value: ${n}`);
  for (; r[1].length < e; )
    r[1] += "0";
  if (r[1].length > 9) {
    let i = BigInt(r[1].substring(0, 9));
    r[1].substring(9).match(/^0+$/) || i++, r[1] = i.toString();
  }
  return BigInt(r[0] + r[1]);
}
function fh(n) {
  return new Sv(n, async (e, t, r) => {
    r.setHeader("User-Agent", "ethers");
    let i;
    try {
      const [s, a] = await Promise.all([
        r.send(),
        e()
      ]);
      i = s;
      const o = i.bodyJson.standard;
      return {
        gasPrice: a.gasPrice,
        maxFeePerGas: dh(o.maxFee, 9),
        maxPriorityFeePerGas: dh(o.maxPriorityFee, 9)
      };
    } catch (s) {
      G(!1, `error encountered with polygon gas station (${JSON.stringify(r.url)})`, "SERVER_ERROR", { request: r, response: i, error: s });
    }
  });
}
let ph = !1;
function Iv() {
  if (ph)
    return;
  ph = !0;
  function n(e, t, r) {
    const i = function() {
      const s = new In(e, t);
      return r.ensNetwork != null && s.attachPlugin(new il(null, r.ensNetwork)), s.attachPlugin(new rl()), (r.plugins || []).forEach((a) => {
        s.attachPlugin(a);
      }), s;
    };
    In.register(e, i), In.register(t, i), r.altNames && r.altNames.forEach((s) => {
      In.register(s, i);
    });
  }
  n("mainnet", 1, { ensNetwork: 1, altNames: ["homestead"] }), n("ropsten", 3, { ensNetwork: 3 }), n("rinkeby", 4, { ensNetwork: 4 }), n("goerli", 5, { ensNetwork: 5 }), n("kovan", 42, { ensNetwork: 42 }), n("sepolia", 11155111, { ensNetwork: 11155111 }), n("holesky", 17e3, { ensNetwork: 17e3 }), n("classic", 61, {}), n("classicKotti", 6, {}), n("arbitrum", 42161, {
    ensNetwork: 1
  }), n("arbitrum-goerli", 421613, {}), n("arbitrum-sepolia", 421614, {}), n("base", 8453, { ensNetwork: 1 }), n("base-goerli", 84531, {}), n("base-sepolia", 84532, {}), n("bnb", 56, { ensNetwork: 1 }), n("bnbt", 97, {}), n("linea", 59144, { ensNetwork: 1 }), n("linea-goerli", 59140, {}), n("linea-sepolia", 59141, {}), n("matic", 137, {
    ensNetwork: 1,
    plugins: [
      fh("https://gasstation.polygon.technology/v2")
    ]
  }), n("matic-amoy", 80002, {}), n("matic-mumbai", 80001, {
    altNames: ["maticMumbai", "maticmum"],
    plugins: [
      fh("https://gasstation-testnet.polygon.technology/v2")
    ]
  }), n("optimism", 10, {
    ensNetwork: 1,
    plugins: []
  }), n("optimism-goerli", 420, {}), n("optimism-sepolia", 11155420, {}), n("xdai", 100, { ensNetwork: 1 });
}
function Ud(n) {
  return JSON.parse(JSON.stringify(n));
}
var Xn, Mt, Gr, An, ea, $c;
class Cv {
  /**
   *  Create a new **PollingBlockSubscriber** attached to %%provider%%.
   */
  constructor(e) {
    _(this, ea);
    _(this, Xn);
    _(this, Mt);
    _(this, Gr);
    // The most recent block we have scanned for events. The value -2
    // indicates we still need to fetch an initial block number
    _(this, An);
    g(this, Xn, e), g(this, Mt, null), g(this, Gr, 4e3), g(this, An, -2);
  }
  /**
   *  The polling interval.
   */
  get pollingInterval() {
    return m(this, Gr);
  }
  set pollingInterval(e) {
    g(this, Gr, e);
  }
  start() {
    m(this, Mt) || (g(this, Mt, m(this, Xn)._setTimeout(z(this, ea, $c).bind(this), m(this, Gr))), z(this, ea, $c).call(this));
  }
  stop() {
    m(this, Mt) && (m(this, Xn)._clearTimeout(m(this, Mt)), g(this, Mt, null));
  }
  pause(e) {
    this.stop(), e && g(this, An, -2);
  }
  resume() {
    this.start();
  }
}
Xn = new WeakMap(), Mt = new WeakMap(), Gr = new WeakMap(), An = new WeakMap(), ea = new WeakSet(), $c = async function() {
  try {
    const e = await m(this, Xn).getBlockNumber();
    if (m(this, An) === -2) {
      g(this, An, e);
      return;
    }
    if (e !== m(this, An)) {
      for (let t = m(this, An) + 1; t <= e; t++) {
        if (m(this, Mt) == null)
          return;
        await m(this, Xn).emit("block", t);
      }
      g(this, An, e);
    }
  } catch {
  }
  m(this, Mt) != null && g(this, Mt, m(this, Xn)._setTimeout(z(this, ea, $c).bind(this), m(this, Gr)));
};
var _i, ki, Hr;
class Xf {
  /**
   *  Create a new **OnBlockSubscriber** attached to %%provider%%.
   */
  constructor(e) {
    _(this, _i);
    _(this, ki);
    _(this, Hr);
    g(this, _i, e), g(this, Hr, !1), g(this, ki, (t) => {
      this._poll(t, m(this, _i));
    });
  }
  /**
   *  Called on every new block.
   */
  async _poll(e, t) {
    throw new Error("sub-classes must override this");
  }
  start() {
    m(this, Hr) || (g(this, Hr, !0), m(this, ki).call(this, -2), m(this, _i).on("block", m(this, ki)));
  }
  stop() {
    m(this, Hr) && (g(this, Hr, !1), m(this, _i).off("block", m(this, ki)));
  }
  pause(e) {
    this.stop();
  }
  resume() {
    this.start();
  }
}
_i = new WeakMap(), ki = new WeakMap(), Hr = new WeakMap();
var ta, er;
class Ov extends Xf {
  constructor(t, r) {
    super(t);
    _(this, ta);
    _(this, er);
    g(this, ta, r), g(this, er, -2);
  }
  pause(t) {
    t && g(this, er, -2), super.pause(t);
  }
  async _poll(t, r) {
    const i = await r.getBlock(m(this, ta));
    i != null && (m(this, er) === -2 ? g(this, er, i.number) : i.number > m(this, er) && (r.emit(m(this, ta), i.number), g(this, er, i.number)));
  }
}
ta = new WeakMap(), er = new WeakMap();
var Tu;
class Nv extends Xf {
  constructor(t, r) {
    super(t);
    _(this, Tu);
    g(this, Tu, Ud(r));
  }
  async _poll(t, r) {
    throw new Error("@TODO");
  }
}
Tu = new WeakMap();
var na;
class Rv extends Xf {
  /**
   *  Create a new **PollingTransactionSubscriber** attached to
   *  %%provider%%, listening for %%hash%%.
   */
  constructor(t, r) {
    super(t);
    _(this, na);
    g(this, na, r);
  }
  async _poll(t, r) {
    const i = await r.getTransactionReceipt(m(this, na));
    i && r.emit(m(this, na), i);
  }
}
na = new WeakMap();
var tr, ra, ia, $r, Dt, Pu, Lx;
class e0 {
  /**
   *  Create a new **PollingTransactionSubscriber** attached to
   *  %%provider%%, listening for %%filter%%.
   */
  constructor(e, t) {
    _(this, Pu);
    _(this, tr);
    _(this, ra);
    _(this, ia);
    _(this, $r);
    // The most recent block we have scanned for events. The value -2
    // indicates we still need to fetch an initial block number
    _(this, Dt);
    g(this, tr, e), g(this, ra, Ud(t)), g(this, ia, z(this, Pu, Lx).bind(this)), g(this, $r, !1), g(this, Dt, -2);
  }
  start() {
    m(this, $r) || (g(this, $r, !0), m(this, Dt) === -2 && m(this, tr).getBlockNumber().then((e) => {
      g(this, Dt, e);
    }), m(this, tr).on("block", m(this, ia)));
  }
  stop() {
    m(this, $r) && (g(this, $r, !1), m(this, tr).off("block", m(this, ia)));
  }
  pause(e) {
    this.stop(), e && g(this, Dt, -2);
  }
  resume() {
    this.start();
  }
}
tr = new WeakMap(), ra = new WeakMap(), ia = new WeakMap(), $r = new WeakMap(), Dt = new WeakMap(), Pu = new WeakSet(), Lx = async function(e) {
  if (m(this, Dt) === -2)
    return;
  const t = Ud(m(this, ra));
  t.fromBlock = m(this, Dt) + 1, t.toBlock = e;
  const r = await m(this, tr).getLogs(t);
  if (r.length === 0) {
    m(this, Dt) < e - 60 && g(this, Dt, e - 60);
    return;
  }
  for (const i of r)
    m(this, tr).emit(m(this, ra), i), g(this, Dt, i.blockNumber);
};
const Bv = BigInt(2), _v = 10;
function Ic(n) {
  return n && typeof n.then == "function";
}
function Vc(n, e) {
  return n + ":" + JSON.stringify(e, (t, r) => {
    if (r == null)
      return "null";
    if (typeof r == "bigint")
      return `bigint:${r.toString()}`;
    if (typeof r == "string")
      return r.toLowerCase();
    if (typeof r == "object" && !Array.isArray(r)) {
      const i = Object.keys(r);
      return i.sort(), i.reduce((s, a) => (s[a] = r[a], s), {});
    }
    return r;
  });
}
class Mx {
  /**
   *  Create a new UnmanagedSubscriber with %%name%%.
   */
  constructor(e) {
    /**
     *  The name fof the event.
     */
    T(this, "name");
    Y(this, { name: e });
  }
  start() {
  }
  stop() {
  }
  pause(e) {
  }
  resume() {
  }
}
function kv(n) {
  return JSON.parse(JSON.stringify(n));
}
function Fd(n) {
  return n = Array.from(new Set(n).values()), n.sort(), n;
}
async function Fl(n, e) {
  if (n == null)
    throw new Error("invalid event");
  if (Array.isArray(n) && (n = { topics: n }), typeof n == "string")
    switch (n) {
      case "block":
      case "debug":
      case "error":
      case "finalized":
      case "network":
      case "pending":
      case "safe":
        return { type: n, tag: n };
    }
  if (me(n, 32)) {
    const t = n.toLowerCase();
    return { type: "transaction", tag: Vc("tx", { hash: t }), hash: t };
  }
  if (n.orphan) {
    const t = n;
    return { type: "orphan", tag: Vc("orphan", t), filter: kv(t) };
  }
  if (n.address || n.topics) {
    const t = n, r = {
      topics: (t.topics || []).map((i) => i == null ? null : Array.isArray(i) ? Fd(i.map((s) => s.toLowerCase())) : i.toLowerCase())
    };
    if (t.address) {
      const i = [], s = [], a = (o) => {
        me(o) ? i.push(o) : s.push((async () => {
          i.push(await Me(o, e));
        })());
      };
      Array.isArray(t.address) ? t.address.forEach(a) : a(t.address), s.length && await Promise.all(s), r.address = Fd(i.map((o) => o.toLowerCase()));
    }
    return { filter: r, tag: Vc("event", r), type: "event" };
  }
  A(!1, "unknown ProviderEvent", "event", n);
}
function Gl() {
  return (/* @__PURE__ */ new Date()).getTime();
}
const Lv = {
  cacheTimeout: 250,
  pollingInterval: 4e3
};
var je, Vr, We, sa, wt, Li, zr, nr, Ho, Ut, aa, oa, ae, yt, Gd, Hd, Ja, $d, Ya, zc;
class Mv {
  /**
   *  Create a new **AbstractProvider** connected to %%network%%, or
   *  use the various network detection capabilities to discover the
   *  [[Network]] if necessary.
   */
  constructor(e, t) {
    _(this, ae);
    _(this, je);
    _(this, Vr);
    // null=unpaused, true=paused+dropWhilePaused, false=paused
    _(this, We);
    _(this, sa);
    _(this, wt);
    _(this, Li);
    _(this, zr);
    // The most recent block number if running an event or -1 if no "block" event
    _(this, nr);
    _(this, Ho);
    _(this, Ut);
    _(this, aa);
    _(this, oa);
    if (g(this, oa, Object.assign({}, Lv, t || {})), e === "any")
      g(this, Li, !0), g(this, wt, null);
    else if (e) {
      const r = In.from(e);
      g(this, Li, !1), g(this, wt, Promise.resolve(r)), setTimeout(() => {
        this.emit("network", r, null);
      }, 0);
    } else
      g(this, Li, !1), g(this, wt, null);
    g(this, nr, -1), g(this, zr, /* @__PURE__ */ new Map()), g(this, je, /* @__PURE__ */ new Map()), g(this, Vr, /* @__PURE__ */ new Map()), g(this, We, null), g(this, sa, !1), g(this, Ho, 1), g(this, Ut, /* @__PURE__ */ new Map()), g(this, aa, !1);
  }
  get pollingInterval() {
    return m(this, oa).pollingInterval;
  }
  /**
   *  Returns ``this``, to allow an **AbstractProvider** to implement
   *  the [[ContractRunner]] interface.
   */
  get provider() {
    return this;
  }
  /**
   *  Returns all the registered plug-ins.
   */
  get plugins() {
    return Array.from(m(this, Vr).values());
  }
  /**
   *  Attach a new plug-in.
   */
  attachPlugin(e) {
    if (m(this, Vr).get(e.name))
      throw new Error(`cannot replace existing plugin: ${e.name} `);
    return m(this, Vr).set(e.name, e.connect(this)), this;
  }
  /**
   *  Get a plugin by name.
   */
  getPlugin(e) {
    return m(this, Vr).get(e) || null;
  }
  /**
   *  Prevent any CCIP-read operation, regardless of whether requested
   *  in a [[call]] using ``enableCcipRead``.
   */
  get disableCcipRead() {
    return m(this, aa);
  }
  set disableCcipRead(e) {
    g(this, aa, !!e);
  }
  /**
   *  Resolves to the data for executing the CCIP-read operations.
   */
  async ccipReadFetch(e, t, r) {
    if (this.disableCcipRead || r.length === 0 || e.to == null)
      return null;
    const i = e.to.toLowerCase(), s = t.toLowerCase(), a = [];
    for (let o = 0; o < r.length; o++) {
      const c = r[o], u = c.replace("{sender}", i).replace("{data}", s), l = new hr(u);
      c.indexOf("{data}") === -1 && (l.body = { data: s, sender: i }), this.emit("debug", { action: "sendCcipReadFetchRequest", request: l, index: o, urls: r });
      let d = "unknown error", f;
      try {
        f = await l.send();
      } catch (p) {
        a.push(p.message), this.emit("debug", { action: "receiveCcipReadFetchError", request: l, result: { error: p } });
        continue;
      }
      try {
        const p = f.bodyJson;
        if (p.data)
          return this.emit("debug", { action: "receiveCcipReadFetchResult", request: l, result: p }), p.data;
        p.message && (d = p.message), this.emit("debug", { action: "receiveCcipReadFetchError", request: l, result: p });
      } catch {
      }
      G(f.statusCode < 400 || f.statusCode >= 500, `response not found during CCIP fetch: ${d}`, "OFFCHAIN_FAULT", { reason: "404_MISSING_RESOURCE", transaction: e, info: { url: c, errorMessage: d } }), a.push(d);
    }
    G(!1, `error encountered during CCIP fetch: ${a.map((o) => JSON.stringify(o)).join(", ")}`, "OFFCHAIN_FAULT", {
      reason: "500_SERVER_ERROR",
      transaction: e,
      info: { urls: r, errorMessages: a }
    });
  }
  /**
   *  Provides the opportunity for a sub-class to wrap a block before
   *  returning it, to add additional properties or an alternate
   *  sub-class of [[Block]].
   */
  _wrapBlock(e, t) {
    return new tv(wv(e), this);
  }
  /**
   *  Provides the opportunity for a sub-class to wrap a log before
   *  returning it, to add additional properties or an alternate
   *  sub-class of [[Log]].
   */
  _wrapLog(e, t) {
    return new nc(xv(e), this);
  }
  /**
   *  Provides the opportunity for a sub-class to wrap a transaction
   *  receipt before returning it, to add additional properties or an
   *  alternate sub-class of [[TransactionReceipt]].
   */
  _wrapTransactionReceipt(e, t) {
    return new Ax(Tv(e), this);
  }
  /**
   *  Provides the opportunity for a sub-class to wrap a transaction
   *  response before returning it, to add additional properties or an
   *  alternate sub-class of [[TransactionResponse]].
   */
  _wrapTransactionResponse(e, t) {
    return new Io(kx(e), this);
  }
  /**
   *  Resolves to the Network, forcing a network detection using whatever
   *  technique the sub-class requires.
   *
   *  Sub-classes **must** override this.
   */
  _detectNetwork() {
    G(!1, "sub-classes must implement this", "UNSUPPORTED_OPERATION", {
      operation: "_detectNetwork"
    });
  }
  /**
   *  Sub-classes should use this to perform all built-in operations. All
   *  methods sanitizes and normalizes the values passed into this.
   *
   *  Sub-classes **must** override this.
   */
  async _perform(e) {
    G(!1, `unsupported method: ${e.method}`, "UNSUPPORTED_OPERATION", {
      operation: e.method,
      info: e
    });
  }
  // State
  async getBlockNumber() {
    const e = te(await z(this, ae, yt).call(this, { method: "getBlockNumber" }), "%response");
    return m(this, nr) >= 0 && g(this, nr, e), e;
  }
  /**
   *  Returns or resolves to the address for %%address%%, resolving ENS
   *  names and [[Addressable]] objects and returning if already an
   *  address.
   */
  _getAddress(e) {
    return Me(e, this);
  }
  /**
   *  Returns or resolves to a valid block tag for %%blockTag%%, resolving
   *  negative values and returning if already a valid block tag.
   */
  _getBlockTag(e) {
    if (e == null)
      return "latest";
    switch (e) {
      case "earliest":
        return "0x0";
      case "finalized":
      case "latest":
      case "pending":
      case "safe":
        return e;
    }
    if (me(e))
      return me(e, 32) ? e : nn(e);
    if (typeof e == "bigint" && (e = te(e, "blockTag")), typeof e == "number")
      return e >= 0 ? nn(e) : m(this, nr) >= 0 ? nn(m(this, nr) + e) : this.getBlockNumber().then((t) => nn(t + e));
    A(!1, "invalid blockTag", "blockTag", e);
  }
  /**
   *  Returns or resolves to a filter for %%filter%%, resolving any ENS
   *  names or [[Addressable]] object and returning if already a valid
   *  filter.
   */
  _getFilter(e) {
    const t = (e.topics || []).map((c) => c == null ? null : Array.isArray(c) ? Fd(c.map((u) => u.toLowerCase())) : c.toLowerCase()), r = "blockHash" in e ? e.blockHash : void 0, i = (c, u, l) => {
      let d;
      switch (c.length) {
        case 0:
          break;
        case 1:
          d = c[0];
          break;
        default:
          c.sort(), d = c;
      }
      if (r && (u != null || l != null))
        throw new Error("invalid filter");
      const f = {};
      return d && (f.address = d), t.length && (f.topics = t), u && (f.fromBlock = u), l && (f.toBlock = l), r && (f.blockHash = r), f;
    };
    let s = [];
    if (e.address)
      if (Array.isArray(e.address))
        for (const c of e.address)
          s.push(this._getAddress(c));
      else
        s.push(this._getAddress(e.address));
    let a;
    "fromBlock" in e && (a = this._getBlockTag(e.fromBlock));
    let o;
    return "toBlock" in e && (o = this._getBlockTag(e.toBlock)), s.filter((c) => typeof c != "string").length || a != null && typeof a != "string" || o != null && typeof o != "string" ? Promise.all([Promise.all(s), a, o]).then((c) => i(c[0], c[1], c[2])) : i(s, a, o);
  }
  /**
   *  Returns or resolves to a transaction for %%request%%, resolving
   *  any ENS names or [[Addressable]] and returning if already a valid
   *  transaction.
   */
  _getTransactionRequest(e) {
    const t = So(e), r = [];
    if (["to", "from"].forEach((i) => {
      if (t[i] == null)
        return;
      const s = Me(t[i], this);
      Ic(s) ? r.push(async function() {
        t[i] = await s;
      }()) : t[i] = s;
    }), t.blockTag != null) {
      const i = this._getBlockTag(t.blockTag);
      Ic(i) ? r.push(async function() {
        t.blockTag = await i;
      }()) : t.blockTag = i;
    }
    return r.length ? async function() {
      return await Promise.all(r), t;
    }() : t;
  }
  async getNetwork() {
    if (m(this, wt) == null) {
      const i = (async () => {
        try {
          const s = await this._detectNetwork();
          return this.emit("network", s, null), s;
        } catch (s) {
          throw m(this, wt) === i && g(this, wt, null), s;
        }
      })();
      return g(this, wt, i), (await i).clone();
    }
    const e = m(this, wt), [t, r] = await Promise.all([
      e,
      this._detectNetwork()
      // The actual connected network
    ]);
    return t.chainId !== r.chainId && (m(this, Li) ? (this.emit("network", r, t), m(this, wt) === e && g(this, wt, Promise.resolve(r))) : G(!1, `network changed: ${t.chainId} => ${r.chainId} `, "NETWORK_ERROR", {
      event: "changed"
    })), t.clone();
  }
  async getFeeData() {
    const e = await this.getNetwork(), t = async () => {
      const { _block: i, gasPrice: s, priorityFee: a } = await Ke({
        _block: z(this, ae, $d).call(this, "latest", !1),
        gasPrice: (async () => {
          try {
            const l = await z(this, ae, yt).call(this, { method: "getGasPrice" });
            return q(l, "%response");
          } catch {
          }
          return null;
        })(),
        priorityFee: (async () => {
          try {
            const l = await z(this, ae, yt).call(this, { method: "getPriorityFee" });
            return q(l, "%response");
          } catch {
          }
          return null;
        })()
      });
      let o = null, c = null;
      const u = this._wrapBlock(i, e);
      return u && u.baseFeePerGas && (c = a ?? BigInt("1000000000"), o = u.baseFeePerGas * Bv + c), new ah(s, o, c);
    }, r = e.getPlugin("org.ethers.plugins.network.FetchUrlFeeDataPlugin");
    if (r) {
      const i = new hr(r.url), s = await r.processFunc(t, this, i);
      return new ah(s.gasPrice, s.maxFeePerGas, s.maxPriorityFeePerGas);
    }
    return await t();
  }
  async estimateGas(e) {
    let t = this._getTransactionRequest(e);
    return Ic(t) && (t = await t), q(await z(this, ae, yt).call(this, {
      method: "estimateGas",
      transaction: t
    }), "%response");
  }
  async call(e) {
    const { tx: t, blockTag: r } = await Ke({
      tx: this._getTransactionRequest(e),
      blockTag: this._getBlockTag(e.blockTag)
    });
    return await z(this, ae, Hd).call(this, z(this, ae, Gd).call(this, t, r, e.enableCcipRead ? 0 : -1));
  }
  async getBalance(e, t) {
    return q(await z(this, ae, Ja).call(this, { method: "getBalance" }, e, t), "%response");
  }
  async getTransactionCount(e, t) {
    return te(await z(this, ae, Ja).call(this, { method: "getTransactionCount" }, e, t), "%response");
  }
  async getCode(e, t) {
    return V(await z(this, ae, Ja).call(this, { method: "getCode" }, e, t));
  }
  async getStorage(e, t, r) {
    const i = q(t, "position");
    return V(await z(this, ae, Ja).call(this, { method: "getStorage", position: i }, e, r));
  }
  // Write
  async broadcastTransaction(e) {
    const { blockNumber: t, hash: r, network: i } = await Ke({
      blockNumber: this.getBlockNumber(),
      hash: this._perform({
        method: "broadcastTransaction",
        signedTransaction: e
      }),
      network: this.getNetwork()
    }), s = wo.from(e);
    if (s.hash !== r)
      throw new Error("@TODO: the returned hash did not match");
    return this._wrapTransactionResponse(s, i).replaceableTransaction(t);
  }
  // Queries
  async getBlock(e, t) {
    const { network: r, params: i } = await Ke({
      network: this.getNetwork(),
      params: z(this, ae, $d).call(this, e, !!t)
    });
    return i == null ? null : this._wrapBlock(i, r);
  }
  async getTransaction(e) {
    const { network: t, params: r } = await Ke({
      network: this.getNetwork(),
      params: z(this, ae, yt).call(this, { method: "getTransaction", hash: e })
    });
    return r == null ? null : this._wrapTransactionResponse(r, t);
  }
  async getTransactionReceipt(e) {
    const { network: t, params: r } = await Ke({
      network: this.getNetwork(),
      params: z(this, ae, yt).call(this, { method: "getTransactionReceipt", hash: e })
    });
    if (r == null)
      return null;
    if (r.gasPrice == null && r.effectiveGasPrice == null) {
      const i = await z(this, ae, yt).call(this, { method: "getTransaction", hash: e });
      if (i == null)
        throw new Error("report this; could not find tx or effectiveGasPrice");
      r.effectiveGasPrice = i.gasPrice;
    }
    return this._wrapTransactionReceipt(r, t);
  }
  async getTransactionResult(e) {
    const { result: t } = await Ke({
      network: this.getNetwork(),
      result: z(this, ae, yt).call(this, { method: "getTransactionResult", hash: e })
    });
    return t == null ? null : V(t);
  }
  // Bloom-filter Queries
  async getLogs(e) {
    let t = this._getFilter(e);
    Ic(t) && (t = await t);
    const { network: r, params: i } = await Ke({
      network: this.getNetwork(),
      params: z(this, ae, yt).call(this, { method: "getLogs", filter: t })
    });
    return i.map((s) => this._wrapLog(s, r));
  }
  // ENS
  _getProvider(e) {
    G(!1, "provider cannot connect to target network", "UNSUPPORTED_OPERATION", {
      operation: "_getProvider()"
    });
  }
  async getResolver(e) {
    return await pu.fromName(this, e);
  }
  async getAvatar(e) {
    const t = await this.getResolver(e);
    return t ? await t.getAvatar() : null;
  }
  async resolveName(e) {
    const t = await this.getResolver(e);
    return t ? await t.getAddress() : null;
  }
  async lookupAddress(e) {
    e = oe(e);
    const t = Bd(e.substring(2).toLowerCase() + ".addr.reverse");
    try {
      const r = await pu.getEnsAddress(this), s = await new oo(r, [
        "function resolver(bytes32) view returns (address)"
      ], this).resolver(t);
      if (s == null || s === go)
        return null;
      const o = await new oo(s, [
        "function name(bytes32) view returns (string)"
      ], this).name(t);
      return await this.resolveName(o) !== e ? null : o;
    } catch (r) {
      if (He(r, "BAD_DATA") && r.value === "0x" || He(r, "CALL_EXCEPTION"))
        return null;
      throw r;
    }
    return null;
  }
  async waitForTransaction(e, t, r) {
    const i = t ?? 1;
    return i === 0 ? this.getTransactionReceipt(e) : new Promise(async (s, a) => {
      let o = null;
      const c = async (u) => {
        try {
          const l = await this.getTransactionReceipt(e);
          if (l != null && u - l.blockNumber + 1 >= i) {
            s(l), o && (clearTimeout(o), o = null);
            return;
          }
        } catch (l) {
          console.log("EEE", l);
        }
        this.once("block", c);
      };
      r != null && (o = setTimeout(() => {
        o != null && (o = null, this.off("block", c), a(ge("timeout", "TIMEOUT", { reason: "timeout" })));
      }, r)), c(await this.getBlockNumber());
    });
  }
  async waitForBlock(e) {
    G(!1, "not implemented yet", "NOT_IMPLEMENTED", {
      operation: "waitForBlock"
    });
  }
  /**
   *  Clear a timer created using the [[_setTimeout]] method.
   */
  _clearTimeout(e) {
    const t = m(this, Ut).get(e);
    t && (t.timer && clearTimeout(t.timer), m(this, Ut).delete(e));
  }
  /**
   *  Create a timer that will execute %%func%% after at least %%timeout%%
   *  (in ms). If %%timeout%% is unspecified, then %%func%% will execute
   *  in the next event loop.
   *
   *  [Pausing](AbstractProvider-paused) the provider will pause any
   *  associated timers.
   */
  _setTimeout(e, t) {
    t == null && (t = 0);
    const r = Ua(this, Ho)._++, i = () => {
      m(this, Ut).delete(r), e();
    };
    if (this.paused)
      m(this, Ut).set(r, { timer: null, func: i, time: t });
    else {
      const s = setTimeout(i, t);
      m(this, Ut).set(r, { timer: s, func: i, time: Gl() });
    }
    return r;
  }
  /**
   *  Perform %%func%% on each subscriber.
   */
  _forEachSubscriber(e) {
    for (const t of m(this, je).values())
      e(t.subscriber);
  }
  /**
   *  Sub-classes may override this to customize subscription
   *  implementations.
   */
  _getSubscriber(e) {
    switch (e.type) {
      case "debug":
      case "error":
      case "network":
        return new Mx(e.type);
      case "block": {
        const t = new Cv(this);
        return t.pollingInterval = this.pollingInterval, t;
      }
      case "safe":
      case "finalized":
        return new Ov(this, e.type);
      case "event":
        return new e0(this, e.filter);
      case "transaction":
        return new Rv(this, e.hash);
      case "orphan":
        return new Nv(this, e.filter);
    }
    throw new Error(`unsupported event: ${e.type}`);
  }
  /**
   *  If a [[Subscriber]] fails and needs to replace itself, this
   *  method may be used.
   *
   *  For example, this is used for providers when using the
   *  ``eth_getFilterChanges`` method, which can return null if state
   *  filters are not supported by the backend, allowing the Subscriber
   *  to swap in a [[PollingEventSubscriber]].
   */
  _recoverSubscriber(e, t) {
    for (const r of m(this, je).values())
      if (r.subscriber === e) {
        r.started && r.subscriber.stop(), r.subscriber = t, r.started && t.start(), m(this, We) != null && t.pause(m(this, We));
        break;
      }
  }
  async on(e, t) {
    const r = await z(this, ae, zc).call(this, e);
    return r.listeners.push({ listener: t, once: !1 }), r.started || (r.subscriber.start(), r.started = !0, m(this, We) != null && r.subscriber.pause(m(this, We))), this;
  }
  async once(e, t) {
    const r = await z(this, ae, zc).call(this, e);
    return r.listeners.push({ listener: t, once: !0 }), r.started || (r.subscriber.start(), r.started = !0, m(this, We) != null && r.subscriber.pause(m(this, We))), this;
  }
  async emit(e, ...t) {
    const r = await z(this, ae, Ya).call(this, e, t);
    if (!r || r.listeners.length === 0)
      return !1;
    const i = r.listeners.length;
    return r.listeners = r.listeners.filter(({ listener: s, once: a }) => {
      const o = new Om(this, a ? null : s, e);
      try {
        s.call(this, ...t, o);
      } catch {
      }
      return !a;
    }), r.listeners.length === 0 && (r.started && r.subscriber.stop(), m(this, je).delete(r.tag)), i > 0;
  }
  async listenerCount(e) {
    if (e) {
      const r = await z(this, ae, Ya).call(this, e);
      return r ? r.listeners.length : 0;
    }
    let t = 0;
    for (const { listeners: r } of m(this, je).values())
      t += r.length;
    return t;
  }
  async listeners(e) {
    if (e) {
      const r = await z(this, ae, Ya).call(this, e);
      return r ? r.listeners.map(({ listener: i }) => i) : [];
    }
    let t = [];
    for (const { listeners: r } of m(this, je).values())
      t = t.concat(r.map(({ listener: i }) => i));
    return t;
  }
  async off(e, t) {
    const r = await z(this, ae, Ya).call(this, e);
    if (!r)
      return this;
    if (t) {
      const i = r.listeners.map(({ listener: s }) => s).indexOf(t);
      i >= 0 && r.listeners.splice(i, 1);
    }
    return (!t || r.listeners.length === 0) && (r.started && r.subscriber.stop(), m(this, je).delete(r.tag)), this;
  }
  async removeAllListeners(e) {
    if (e) {
      const { tag: t, started: r, subscriber: i } = await z(this, ae, zc).call(this, e);
      r && i.stop(), m(this, je).delete(t);
    } else
      for (const [t, { started: r, subscriber: i }] of m(this, je))
        r && i.stop(), m(this, je).delete(t);
    return this;
  }
  // Alias for "on"
  async addListener(e, t) {
    return await this.on(e, t);
  }
  // Alias for "off"
  async removeListener(e, t) {
    return this.off(e, t);
  }
  /**
   *  If this provider has been destroyed using the [[destroy]] method.
   *
   *  Once destroyed, all resources are reclaimed, internal event loops
   *  and timers are cleaned up and no further requests may be sent to
   *  the provider.
   */
  get destroyed() {
    return m(this, sa);
  }
  /**
   *  Sub-classes may use this to shutdown any sockets or release their
   *  resources and reject any pending requests.
   *
   *  Sub-classes **must** call ``super.destroy()``.
   */
  destroy() {
    this.removeAllListeners();
    for (const e of m(this, Ut).keys())
      this._clearTimeout(e);
    g(this, sa, !0);
  }
  /**
   *  Whether the provider is currently paused.
   *
   *  A paused provider will not emit any events, and generally should
   *  not make any requests to the network, but that is up to sub-classes
   *  to manage.
   *
   *  Setting ``paused = true`` is identical to calling ``.pause(false)``,
   *  which will buffer any events that occur while paused until the
   *  provider is unpaused.
   */
  get paused() {
    return m(this, We) != null;
  }
  set paused(e) {
    !!e !== this.paused && (this.paused ? this.resume() : this.pause(!1));
  }
  /**
   *  Pause the provider. If %%dropWhilePaused%%, any events that occur
   *  while paused are dropped, otherwise all events will be emitted once
   *  the provider is unpaused.
   */
  pause(e) {
    if (g(this, nr, -1), m(this, We) != null) {
      if (m(this, We) == !!e)
        return;
      G(!1, "cannot change pause type; resume first", "UNSUPPORTED_OPERATION", {
        operation: "pause"
      });
    }
    this._forEachSubscriber((t) => t.pause(e)), g(this, We, !!e);
    for (const t of m(this, Ut).values())
      t.timer && clearTimeout(t.timer), t.time = Gl() - t.time;
  }
  /**
   *  Resume the provider.
   */
  resume() {
    if (m(this, We) != null) {
      this._forEachSubscriber((e) => e.resume()), g(this, We, null);
      for (const e of m(this, Ut).values()) {
        let t = e.time;
        t < 0 && (t = 0), e.time = Gl(), setTimeout(e.func, t);
      }
    }
  }
}
je = new WeakMap(), Vr = new WeakMap(), We = new WeakMap(), sa = new WeakMap(), wt = new WeakMap(), Li = new WeakMap(), zr = new WeakMap(), nr = new WeakMap(), Ho = new WeakMap(), Ut = new WeakMap(), aa = new WeakMap(), oa = new WeakMap(), ae = new WeakSet(), yt = async function(e) {
  const t = m(this, oa).cacheTimeout;
  if (t < 0)
    return await this._perform(e);
  const r = Vc(e.method, e);
  let i = m(this, zr).get(r);
  return i || (i = this._perform(e), m(this, zr).set(r, i), setTimeout(() => {
    m(this, zr).get(r) === i && m(this, zr).delete(r);
  }, t)), await i;
}, Gd = async function(e, t, r) {
  G(r < _v, "CCIP read exceeded maximum redirections", "OFFCHAIN_FAULT", {
    reason: "TOO_MANY_REDIRECTS",
    transaction: Object.assign({}, e, { blockTag: t, enableCcipRead: !0 })
  });
  const i = So(e);
  try {
    return V(await this._perform({ method: "call", transaction: i, blockTag: t }));
  } catch (s) {
    if (!this.disableCcipRead && Bf(s) && s.data && r >= 0 && t === "latest" && i.to != null && be(s.data, 0, 4) === "0x556f1830") {
      const a = s.data, o = await Me(i.to, this);
      let c;
      try {
        c = Hv(be(s.data, 4));
      } catch (d) {
        G(!1, d.message, "OFFCHAIN_FAULT", {
          reason: "BAD_DATA",
          transaction: i,
          info: { data: a }
        });
      }
      G(c.sender.toLowerCase() === o.toLowerCase(), "CCIP Read sender mismatch", "CALL_EXCEPTION", {
        action: "call",
        data: a,
        reason: "OffchainLookup",
        transaction: i,
        invocation: null,
        revert: {
          signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
          name: "OffchainLookup",
          args: c.errorArgs
        }
      });
      const u = await this.ccipReadFetch(i, c.calldata, c.urls);
      G(u != null, "CCIP Read failed to fetch data", "OFFCHAIN_FAULT", {
        reason: "FETCH_FAILED",
        transaction: i,
        info: { data: s.data, errorArgs: c.errorArgs }
      });
      const l = {
        to: o,
        data: le([c.selector, Gv([u, c.extraData])])
      };
      this.emit("debug", { action: "sendCcipReadCall", transaction: l });
      try {
        const d = await z(this, ae, Gd).call(this, l, t, r + 1);
        return this.emit("debug", { action: "receiveCcipReadCallResult", transaction: Object.assign({}, l), result: d }), d;
      } catch (d) {
        throw this.emit("debug", { action: "receiveCcipReadCallError", transaction: Object.assign({}, l), error: d }), d;
      }
    }
    throw s;
  }
}, Hd = async function(e) {
  const { value: t } = await Ke({
    network: this.getNetwork(),
    value: e
  });
  return t;
}, Ja = async function(e, t, r) {
  let i = this._getAddress(t), s = this._getBlockTag(r);
  return (typeof i != "string" || typeof s != "string") && ([i, s] = await Promise.all([i, s])), await z(this, ae, Hd).call(this, z(this, ae, yt).call(this, Object.assign(e, { address: i, blockTag: s })));
}, $d = async function(e, t) {
  if (me(e, 32))
    return await z(this, ae, yt).call(this, {
      method: "getBlock",
      blockHash: e,
      includeTransactions: t
    });
  let r = this._getBlockTag(e);
  return typeof r != "string" && (r = await r), await z(this, ae, yt).call(this, {
    method: "getBlock",
    blockTag: r,
    includeTransactions: t
  });
}, Ya = async function(e, t) {
  let r = await Fl(e, this);
  return r.type === "event" && t && t.length > 0 && t[0].removed === !0 && (r = await Fl({ orphan: "drop-log", log: t[0] }, this)), m(this, je).get(r.tag) || null;
}, zc = async function(e) {
  const t = await Fl(e, this), r = t.tag;
  let i = m(this, je).get(r);
  return i || (i = { subscriber: this._getSubscriber(t), tag: r, addressableMap: /* @__PURE__ */ new WeakMap(), nameMap: /* @__PURE__ */ new Map(), started: !1, listeners: [] }, m(this, je).set(r, i)), i;
};
function Dv(n, e) {
  try {
    const t = Vd(n, e);
    if (t)
      return au(t);
  } catch {
  }
  return null;
}
function Vd(n, e) {
  if (n === "0x")
    return null;
  try {
    const t = te(be(n, e, e + 32)), r = te(be(n, t, t + 32));
    return be(n, t + 32, t + 32 + r);
  } catch {
  }
  return null;
}
function hh(n) {
  const e = Ae(n);
  if (e.length > 32)
    throw new Error("internal; should not happen");
  const t = new Uint8Array(32);
  return t.set(e, 32 - e.length), t;
}
function Uv(n) {
  if (n.length % 32 === 0)
    return n;
  const e = new Uint8Array(Math.ceil(n.length / 32) * 32);
  return e.set(n), e;
}
const Fv = new Uint8Array([]);
function Gv(n) {
  const e = [];
  let t = 0;
  for (let r = 0; r < n.length; r++)
    e.push(Fv), t += 32;
  for (let r = 0; r < n.length; r++) {
    const i = K(n[r]);
    e[r] = hh(t), e.push(hh(i.length)), e.push(Uv(i)), t += 32 + Math.ceil(i.length / 32) * 32;
  }
  return le(e);
}
const yh = "0x0000000000000000000000000000000000000000000000000000000000000000";
function Hv(n) {
  const e = {
    sender: "",
    urls: [],
    calldata: "",
    selector: "",
    extraData: "",
    errorArgs: []
  };
  G(or(n) >= 5 * 32, "insufficient OffchainLookup data", "OFFCHAIN_FAULT", {
    reason: "insufficient OffchainLookup data"
  });
  const t = be(n, 0, 32);
  G(be(t, 0, 12) === be(yh, 0, 12), "corrupt OffchainLookup sender", "OFFCHAIN_FAULT", {
    reason: "corrupt OffchainLookup sender"
  }), e.sender = be(t, 12);
  try {
    const r = [], i = te(be(n, 32, 64)), s = te(be(n, i, i + 32)), a = be(n, i + 32);
    for (let o = 0; o < s; o++) {
      const c = Dv(a, o * 32);
      if (c == null)
        throw new Error("abort");
      r.push(c);
    }
    e.urls = r;
  } catch {
    G(!1, "corrupt OffchainLookup urls", "OFFCHAIN_FAULT", {
      reason: "corrupt OffchainLookup urls"
    });
  }
  try {
    const r = Vd(n, 64);
    if (r == null)
      throw new Error("abort");
    e.calldata = r;
  } catch {
    G(!1, "corrupt OffchainLookup calldata", "OFFCHAIN_FAULT", {
      reason: "corrupt OffchainLookup calldata"
    });
  }
  G(be(n, 100, 128) === be(yh, 0, 28), "corrupt OffchainLookup callbaackSelector", "OFFCHAIN_FAULT", {
    reason: "corrupt OffchainLookup callbaackSelector"
  }), e.selector = be(n, 96, 100);
  try {
    const r = Vd(n, 128);
    if (r == null)
      throw new Error("abort");
    e.extraData = r;
  } catch {
    G(!1, "corrupt OffchainLookup extraData", "OFFCHAIN_FAULT", {
      reason: "corrupt OffchainLookup extraData"
    });
  }
  return e.errorArgs = "sender,urls,calldata,selector,extraData".split(/,/).map((r) => e[r]), e;
}
function ri(n, e) {
  if (n.provider)
    return n.provider;
  G(!1, "missing provider", "UNSUPPORTED_OPERATION", { operation: e });
}
async function mh(n, e) {
  let t = So(e);
  if (t.to != null && (t.to = Me(t.to, n)), t.from != null) {
    const r = t.from;
    t.from = Promise.all([
      n.getAddress(),
      Me(r, n)
    ]).then(([i, s]) => (A(i.toLowerCase() === s.toLowerCase(), "transaction from mismatch", "tx.from", s), i));
  } else
    t.from = n.getAddress();
  return await Ke(t);
}
class t0 {
  /**
   *  Creates a new Signer connected to %%provider%%.
   */
  constructor(e) {
    /**
     *  The provider this signer is connected to.
     */
    T(this, "provider");
    Y(this, { provider: e || null });
  }
  async getNonce(e) {
    return ri(this, "getTransactionCount").getTransactionCount(await this.getAddress(), e);
  }
  async populateCall(e) {
    return await mh(this, e);
  }
  async populateTransaction(e) {
    const t = ri(this, "populateTransaction"), r = await mh(this, e);
    r.nonce == null && (r.nonce = await this.getNonce("pending")), r.gasLimit == null && (r.gasLimit = await this.estimateGas(r));
    const i = await this.provider.getNetwork();
    if (r.chainId != null) {
      const a = q(r.chainId);
      A(a === i.chainId, "transaction chainId mismatch", "tx.chainId", e.chainId);
    } else
      r.chainId = i.chainId;
    const s = r.maxFeePerGas != null || r.maxPriorityFeePerGas != null;
    if (r.gasPrice != null && (r.type === 2 || s) ? A(!1, "eip-1559 transaction do not support gasPrice", "tx", e) : (r.type === 0 || r.type === 1) && s && A(!1, "pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "tx", e), (r.type === 2 || r.type == null) && r.maxFeePerGas != null && r.maxPriorityFeePerGas != null)
      r.type = 2;
    else if (r.type === 0 || r.type === 1) {
      const a = await t.getFeeData();
      G(a.gasPrice != null, "network does not support gasPrice", "UNSUPPORTED_OPERATION", {
        operation: "getGasPrice"
      }), r.gasPrice == null && (r.gasPrice = a.gasPrice);
    } else {
      const a = await t.getFeeData();
      if (r.type == null)
        if (a.maxFeePerGas != null && a.maxPriorityFeePerGas != null)
          if (r.authorizationList && r.authorizationList.length ? r.type = 4 : r.type = 2, r.gasPrice != null) {
            const o = r.gasPrice;
            delete r.gasPrice, r.maxFeePerGas = o, r.maxPriorityFeePerGas = o;
          } else
            r.maxFeePerGas == null && (r.maxFeePerGas = a.maxFeePerGas), r.maxPriorityFeePerGas == null && (r.maxPriorityFeePerGas = a.maxPriorityFeePerGas);
        else a.gasPrice != null ? (G(!s, "network does not support EIP-1559", "UNSUPPORTED_OPERATION", {
          operation: "populateTransaction"
        }), r.gasPrice == null && (r.gasPrice = a.gasPrice), r.type = 0) : G(!1, "failed to get consistent fee data", "UNSUPPORTED_OPERATION", {
          operation: "signer.getFeeData"
        });
      else (r.type === 2 || r.type === 3 || r.type === 4) && (r.maxFeePerGas == null && (r.maxFeePerGas = a.maxFeePerGas), r.maxPriorityFeePerGas == null && (r.maxPriorityFeePerGas = a.maxPriorityFeePerGas));
    }
    return await Ke(r);
  }
  async populateAuthorization(e) {
    const t = Object.assign({}, e);
    return t.chainId == null && (t.chainId = (await ri(this, "getNetwork").getNetwork()).chainId), t.nonce == null && (t.nonce = await this.getNonce()), t;
  }
  async estimateGas(e) {
    return ri(this, "estimateGas").estimateGas(await this.populateCall(e));
  }
  async call(e) {
    return ri(this, "call").call(await this.populateCall(e));
  }
  async resolveName(e) {
    return await ri(this, "resolveName").resolveName(e);
  }
  async sendTransaction(e) {
    const t = ri(this, "sendTransaction"), r = await this.populateTransaction(e);
    delete r.from;
    const i = wo.from(r);
    return await t.broadcastTransaction(await this.signTransaction(i));
  }
  // @TODO: in v7 move this to be abstract
  authorize(e) {
    G(!1, "authorization not implemented for this signer", "UNSUPPORTED_OPERATION", { operation: "authorize" });
  }
}
var ca, jc;
const l0 = class l0 extends t0 {
  /**
   *  Creates a new **VoidSigner** with %%address%% attached to
   *  %%provider%%.
   */
  constructor(t, r) {
    super(r);
    _(this, ca);
    /**
     *  The signer address.
     */
    T(this, "address");
    Y(this, { address: t });
  }
  async getAddress() {
    return this.address;
  }
  connect(t) {
    return new l0(this.address, t);
  }
  async signTransaction(t) {
    z(this, ca, jc).call(this, "transactions", "signTransaction");
  }
  async signMessage(t) {
    z(this, ca, jc).call(this, "messages", "signMessage");
  }
  async signTypedData(t, r, i) {
    z(this, ca, jc).call(this, "typed-data", "signTypedData");
  }
};
ca = new WeakSet(), jc = function(t, r) {
  G(!1, `VoidSigner cannot sign ${t}`, "UNSUPPORTED_OPERATION", { operation: r });
};
let zd = l0;
function $v(n) {
  return JSON.parse(JSON.stringify(n));
}
var Ze, En, Mi, jr, Di, ua, Xr, jd, Wd;
class Dx {
  /**
   *  Creates a new **FilterIdSubscriber** which will used [[_subscribe]]
   *  and [[_emitResults]] to setup the subscription and provide the event
   *  to the %%provider%%.
   */
  constructor(e) {
    _(this, Xr);
    _(this, Ze);
    _(this, En);
    _(this, Mi);
    _(this, jr);
    _(this, Di);
    _(this, ua);
    g(this, Ze, e), g(this, En, null), g(this, Mi, z(this, Xr, jd).bind(this)), g(this, jr, !1), g(this, Di, null), g(this, ua, !1);
  }
  /**
   *  Sub-classes **must** override this to begin the subscription.
   */
  _subscribe(e) {
    throw new Error("subclasses must override this");
  }
  /**
   *  Sub-classes **must** override this handle the events.
   */
  _emitResults(e, t) {
    throw new Error("subclasses must override this");
  }
  /**
   *  Sub-classes **must** override this handle recovery on errors.
   */
  _recover(e) {
    throw new Error("subclasses must override this");
  }
  start() {
    m(this, jr) || (g(this, jr, !0), z(this, Xr, jd).call(this, -2));
  }
  stop() {
    m(this, jr) && (g(this, jr, !1), g(this, ua, !0), z(this, Xr, Wd).call(this), m(this, Ze).off("block", m(this, Mi)));
  }
  pause(e) {
    e && z(this, Xr, Wd).call(this), m(this, Ze).off("block", m(this, Mi));
  }
  resume() {
    this.start();
  }
}
Ze = new WeakMap(), En = new WeakMap(), Mi = new WeakMap(), jr = new WeakMap(), Di = new WeakMap(), ua = new WeakMap(), Xr = new WeakSet(), jd = async function(e) {
  try {
    m(this, En) == null && g(this, En, this._subscribe(m(this, Ze)));
    let t = null;
    try {
      t = await m(this, En);
    } catch (s) {
      if (!He(s, "UNSUPPORTED_OPERATION") || s.operation !== "eth_newFilter")
        throw s;
    }
    if (t == null) {
      g(this, En, null), m(this, Ze)._recoverSubscriber(this, this._recover(m(this, Ze)));
      return;
    }
    const r = await m(this, Ze).getNetwork();
    if (m(this, Di) || g(this, Di, r), m(this, Di).chainId !== r.chainId)
      throw new Error("chaid changed");
    if (m(this, ua))
      return;
    const i = await m(this, Ze).send("eth_getFilterChanges", [t]);
    await this._emitResults(m(this, Ze), i);
  } catch (t) {
    console.log("@TODO", t);
  }
  m(this, Ze).once("block", m(this, Mi));
}, Wd = function() {
  const e = m(this, En);
  e && (g(this, En, null), e.then((t) => {
    m(this, Ze).destroyed || m(this, Ze).send("eth_uninstallFilter", [t]);
  }));
};
var Ui;
class Vv extends Dx {
  /**
   *  Creates a new **FilterIdEventSubscriber** attached to %%provider%%
   *  listening for %%filter%%.
   */
  constructor(t, r) {
    super(t);
    _(this, Ui);
    g(this, Ui, $v(r));
  }
  _recover(t) {
    return new e0(t, m(this, Ui));
  }
  async _subscribe(t) {
    return await t.send("eth_newFilter", [m(this, Ui)]);
  }
  async _emitResults(t, r) {
    for (const i of r)
      t.emit(m(this, Ui), t._wrapLog(i, t._network));
  }
}
Ui = new WeakMap();
class zv extends Dx {
  async _subscribe(e) {
    return await e.send("eth_newPendingTransactionFilter", []);
  }
  async _emitResults(e, t) {
    for (const r of t)
      e.emit("pending", r);
  }
}
const jv = "bigint,boolean,function,number,string,symbol".split(/,/g);
function Wc(n) {
  if (n == null || jv.indexOf(typeof n) >= 0 || typeof n.getAddress == "function")
    return n;
  if (Array.isArray(n))
    return n.map(Wc);
  if (typeof n == "object")
    return Object.keys(n).reduce((e, t) => (e[t] = n[t], e), {});
  throw new Error(`should not happen: ${n} (${typeof n})`);
}
function Wv(n) {
  return new Promise((e) => {
    setTimeout(e, n);
  });
}
function as(n) {
  return n && n.toLowerCase();
}
function bh(n) {
  return n && typeof n.pollingInterval == "number";
}
const Ux = {
  polling: !1,
  staticNetwork: null,
  batchStallTime: 10,
  batchMaxSize: 1 << 20,
  batchMaxCount: 100,
  cacheTimeout: 250,
  pollingInterval: 4e3
};
class Hl extends t0 {
  constructor(t, r) {
    super(t);
    T(this, "address");
    r = oe(r), Y(this, { address: r });
  }
  connect(t) {
    G(!1, "cannot reconnect JsonRpcSigner", "UNSUPPORTED_OPERATION", {
      operation: "signer.connect"
    });
  }
  async getAddress() {
    return this.address;
  }
  // JSON-RPC will automatially fill in nonce, etc. so we just check from
  async populateTransaction(t) {
    return await this.populateCall(t);
  }
  // Returns just the hash of the transaction after sent, which is what
  // the bare JSON-RPC API does;
  async sendUncheckedTransaction(t) {
    const r = Wc(t), i = [];
    if (r.from) {
      const a = r.from;
      i.push((async () => {
        const o = await Me(a, this.provider);
        A(o != null && o.toLowerCase() === this.address.toLowerCase(), "from address mismatch", "transaction", t), r.from = o;
      })());
    } else
      r.from = this.address;
    if (r.gasLimit == null && i.push((async () => {
      r.gasLimit = await this.provider.estimateGas({ ...r, from: this.address });
    })()), r.to != null) {
      const a = r.to;
      i.push((async () => {
        r.to = await Me(a, this.provider);
      })());
    }
    i.length && await Promise.all(i);
    const s = this.provider.getRpcTransaction(r);
    return this.provider.send("eth_sendTransaction", [s]);
  }
  async sendTransaction(t) {
    const r = await this.provider.getBlockNumber(), i = await this.sendUncheckedTransaction(t);
    return await new Promise((s, a) => {
      const o = [1e3, 100];
      let c = 0;
      const u = async () => {
        try {
          const l = await this.provider.getTransaction(i);
          if (l != null) {
            s(l.replaceableTransaction(r));
            return;
          }
        } catch (l) {
          if (He(l, "CANCELLED") || He(l, "BAD_DATA") || He(l, "NETWORK_ERROR") || He(l, "UNSUPPORTED_OPERATION")) {
            l.info == null && (l.info = {}), l.info.sendTransactionHash = i, a(l);
            return;
          }
          if (He(l, "INVALID_ARGUMENT") && (c++, l.info == null && (l.info = {}), l.info.sendTransactionHash = i, c > 10)) {
            a(l);
            return;
          }
          this.provider.emit("error", ge("failed to fetch transation after sending (will try again)", "UNKNOWN_ERROR", { error: l }));
        }
        this.provider._setTimeout(() => {
          u();
        }, o.pop() || 4e3);
      };
      u();
    });
  }
  async signTransaction(t) {
    const r = Wc(t);
    if (r.from) {
      const s = await Me(r.from, this.provider);
      A(s != null && s.toLowerCase() === this.address.toLowerCase(), "from address mismatch", "transaction", t), r.from = s;
    } else
      r.from = this.address;
    const i = this.provider.getRpcTransaction(r);
    return await this.provider.send("eth_signTransaction", [i]);
  }
  async signMessage(t) {
    const r = typeof t == "string" ? Qe(t) : t;
    return await this.provider.send("personal_sign", [
      V(r),
      this.address.toLowerCase()
    ]);
  }
  async signTypedData(t, r, i) {
    const s = Wc(i), a = await Zr.resolveNames(t, r, s, async (o) => {
      const c = await Me(o);
      return A(c != null, "TypedData does not support null address", "value", o), c;
    });
    return await this.provider.send("eth_signTypedData_v4", [
      this.address.toLowerCase(),
      JSON.stringify(Zr.getPayload(a.domain, r, a.value))
    ]);
  }
  async unlock(t) {
    return this.provider.send("personal_unlockAccount", [
      this.address.toLowerCase(),
      t,
      null
    ]);
  }
  // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign
  async _legacySignMessage(t) {
    const r = typeof t == "string" ? Qe(t) : t;
    return await this.provider.send("eth_sign", [
      this.address.toLowerCase(),
      V(r)
    ]);
  }
}
var Fi, la, rr, vn, tn, Ft, ot, $o, Kd;
class Kv extends Mv {
  constructor(t, r) {
    super(t, r);
    _(this, $o);
    _(this, Fi);
    // The next ID to use for the JSON-RPC ID field
    _(this, la);
    // Payloads are queued and triggered in batches using the drainTimer
    _(this, rr);
    _(this, vn);
    _(this, tn);
    _(this, Ft);
    _(this, ot);
    g(this, la, 1), g(this, Fi, Object.assign({}, Ux, r || {})), g(this, rr, []), g(this, vn, null), g(this, Ft, null), g(this, ot, null);
    {
      let s = null;
      const a = new Promise((o) => {
        s = o;
      });
      g(this, tn, { promise: a, resolve: s });
    }
    const i = this._getOption("staticNetwork");
    typeof i == "boolean" ? (A(!i || t !== "any", "staticNetwork cannot be used on special network 'any'", "options", r), i && t != null && g(this, Ft, In.from(t))) : i && (A(t == null || i.matches(t), "staticNetwork MUST match network object", "options", r), g(this, Ft, i));
  }
  /**
   *  Returns the value associated with the option %%key%%.
   *
   *  Sub-classes can use this to inquire about configuration options.
   */
  _getOption(t) {
    return m(this, Fi)[t];
  }
  /**
   *  Gets the [[Network]] this provider has committed to. On each call, the network
   *  is detected, and if it has changed, the call will reject.
   */
  get _network() {
    return G(m(this, Ft), "network is not available yet", "NETWORK_ERROR"), m(this, Ft);
  }
  /**
   *  Resolves to the non-normalized value by performing %%req%%.
   *
   *  Sub-classes may override this to modify behavior of actions,
   *  and should generally call ``super._perform`` as a fallback.
   */
  async _perform(t) {
    if (t.method === "call" || t.method === "estimateGas") {
      let i = t.transaction;
      if (i && i.type != null && q(i.type) && i.maxFeePerGas == null && i.maxPriorityFeePerGas == null) {
        const s = await this.getFeeData();
        s.maxFeePerGas == null && s.maxPriorityFeePerGas == null && (t = Object.assign({}, t, {
          transaction: Object.assign({}, i, { type: void 0 })
        }));
      }
    }
    const r = this.getRpcRequest(t);
    return r != null ? await this.send(r.method, r.args) : super._perform(t);
  }
  /**
   *  Sub-classes may override this; it detects the *actual* network that
   *  we are **currently** connected to.
   *
   *  Keep in mind that [[send]] may only be used once [[ready]], otherwise the
   *  _send primitive must be used instead.
   */
  async _detectNetwork() {
    const t = this._getOption("staticNetwork");
    if (t)
      if (t === !0) {
        if (m(this, Ft))
          return m(this, Ft);
      } else
        return t;
    return m(this, ot) ? await m(this, ot) : this.ready ? (g(this, ot, (async () => {
      try {
        const r = In.from(q(await this.send("eth_chainId", [])));
        return g(this, ot, null), r;
      } catch (r) {
        throw g(this, ot, null), r;
      }
    })()), await m(this, ot)) : (g(this, ot, (async () => {
      const r = {
        id: Ua(this, la)._++,
        method: "eth_chainId",
        params: [],
        jsonrpc: "2.0"
      };
      this.emit("debug", { action: "sendRpcPayload", payload: r });
      let i;
      try {
        i = (await this._send(r))[0], g(this, ot, null);
      } catch (s) {
        throw g(this, ot, null), this.emit("debug", { action: "receiveRpcError", error: s }), s;
      }
      if (this.emit("debug", { action: "receiveRpcResult", result: i }), "result" in i)
        return In.from(q(i.result));
      throw this.getRpcError(r, i);
    })()), await m(this, ot));
  }
  /**
   *  Sub-classes **MUST** call this. Until [[_start]] has been called, no calls
   *  will be passed to [[_send]] from [[send]]. If it is overridden, then
   *  ``super._start()`` **MUST** be called.
   *
   *  Calling it multiple times is safe and has no effect.
   */
  _start() {
    m(this, tn) == null || m(this, tn).resolve == null || (m(this, tn).resolve(), g(this, tn, null), (async () => {
      for (; m(this, Ft) == null && !this.destroyed; )
        try {
          g(this, Ft, await this._detectNetwork());
        } catch (t) {
          if (this.destroyed)
            break;
          console.log("JsonRpcProvider failed to detect network and cannot start up; retry in 1s (perhaps the URL is wrong or the node is not started)"), this.emit("error", ge("failed to bootstrap network detection", "NETWORK_ERROR", { event: "initial-network-discovery", info: { error: t } })), await Wv(1e3);
        }
      z(this, $o, Kd).call(this);
    })());
  }
  /**
   *  Resolves once the [[_start]] has been called. This can be used in
   *  sub-classes to defer sending data until the connection has been
   *  established.
   */
  async _waitUntilReady() {
    if (m(this, tn) != null)
      return await m(this, tn).promise;
  }
  /**
   *  Return a Subscriber that will manage the %%sub%%.
   *
   *  Sub-classes may override this to modify the behavior of
   *  subscription management.
   */
  _getSubscriber(t) {
    return t.type === "pending" ? new zv(this) : t.type === "event" ? this._getOption("polling") ? new e0(this, t.filter) : new Vv(this, t.filter) : t.type === "orphan" && t.filter.orphan === "drop-log" ? new Mx("orphan") : super._getSubscriber(t);
  }
  /**
   *  Returns true only if the [[_start]] has been called.
   */
  get ready() {
    return m(this, tn) == null;
  }
  /**
   *  Returns %%tx%% as a normalized JSON-RPC transaction request,
   *  which has all values hexlified and any numeric values converted
   *  to Quantity values.
   */
  getRpcTransaction(t) {
    const r = {};
    return ["chainId", "gasLimit", "gasPrice", "type", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "value"].forEach((i) => {
      if (t[i] == null)
        return;
      let s = i;
      i === "gasLimit" && (s = "gas"), r[s] = nn(q(t[i], `tx.${i}`));
    }), ["from", "to", "data"].forEach((i) => {
      t[i] != null && (r[i] = V(t[i]));
    }), t.accessList && (r.accessList = ts(t.accessList)), t.blobVersionedHashes && (r.blobVersionedHashes = t.blobVersionedHashes.map((i) => i.toLowerCase())), t.authorizationList && (r.authorizationList = t.authorizationList.map((i) => {
      const s = Fb(i);
      return {
        address: s.address,
        nonce: nn(s.nonce),
        chainId: nn(s.chainId),
        yParity: nn(s.signature.yParity),
        r: nn(s.signature.r),
        s: nn(s.signature.s)
      };
    })), r;
  }
  /**
   *  Returns the request method and arguments required to perform
   *  %%req%%.
   */
  getRpcRequest(t) {
    switch (t.method) {
      case "chainId":
        return { method: "eth_chainId", args: [] };
      case "getBlockNumber":
        return { method: "eth_blockNumber", args: [] };
      case "getGasPrice":
        return { method: "eth_gasPrice", args: [] };
      case "getPriorityFee":
        return { method: "eth_maxPriorityFeePerGas", args: [] };
      case "getBalance":
        return {
          method: "eth_getBalance",
          args: [as(t.address), t.blockTag]
        };
      case "getTransactionCount":
        return {
          method: "eth_getTransactionCount",
          args: [as(t.address), t.blockTag]
        };
      case "getCode":
        return {
          method: "eth_getCode",
          args: [as(t.address), t.blockTag]
        };
      case "getStorage":
        return {
          method: "eth_getStorageAt",
          args: [
            as(t.address),
            "0x" + t.position.toString(16),
            t.blockTag
          ]
        };
      case "broadcastTransaction":
        return {
          method: "eth_sendRawTransaction",
          args: [t.signedTransaction]
        };
      case "getBlock":
        if ("blockTag" in t)
          return {
            method: "eth_getBlockByNumber",
            args: [t.blockTag, !!t.includeTransactions]
          };
        if ("blockHash" in t)
          return {
            method: "eth_getBlockByHash",
            args: [t.blockHash, !!t.includeTransactions]
          };
        break;
      case "getTransaction":
        return {
          method: "eth_getTransactionByHash",
          args: [t.hash]
        };
      case "getTransactionReceipt":
        return {
          method: "eth_getTransactionReceipt",
          args: [t.hash]
        };
      case "call":
        return {
          method: "eth_call",
          args: [this.getRpcTransaction(t.transaction), t.blockTag]
        };
      case "estimateGas":
        return {
          method: "eth_estimateGas",
          args: [this.getRpcTransaction(t.transaction)]
        };
      case "getLogs":
        return t.filter && t.filter.address != null && (Array.isArray(t.filter.address) ? t.filter.address = t.filter.address.map(as) : t.filter.address = as(t.filter.address)), { method: "eth_getLogs", args: [t.filter] };
    }
    return null;
  }
  /**
   *  Returns an ethers-style Error for the given JSON-RPC error
   *  %%payload%%, coalescing the various strings and error shapes
   *  that different nodes return, coercing them into a machine-readable
   *  standardized error.
   */
  getRpcError(t, r) {
    const { method: i } = t, { error: s } = r;
    if (i === "eth_estimateGas" && s.message) {
      const c = s.message;
      if (!c.match(/revert/i) && c.match(/insufficient funds/i))
        return ge("insufficient funds", "INSUFFICIENT_FUNDS", {
          transaction: t.params[0],
          info: { payload: t, error: s }
        });
      if (c.match(/nonce/i) && c.match(/too low/i))
        return ge("nonce has already been used", "NONCE_EXPIRED", {
          transaction: t.params[0],
          info: { payload: t, error: s }
        });
    }
    if (i === "eth_call" || i === "eth_estimateGas") {
      const c = Qd(s), u = Xe.getBuiltinCallException(i === "eth_call" ? "call" : "estimateGas", t.params[0], c ? c.data : null);
      return u.info = { error: s, payload: t }, u;
    }
    const a = JSON.stringify(Jv(s));
    if (typeof s.message == "string" && s.message.match(/user denied|ethers-user-denied/i))
      return ge("user rejected action", "ACTION_REJECTED", {
        action: {
          eth_sign: "signMessage",
          personal_sign: "signMessage",
          eth_signTypedData_v4: "signTypedData",
          eth_signTransaction: "signTransaction",
          eth_sendTransaction: "sendTransaction",
          eth_requestAccounts: "requestAccess",
          wallet_requestAccounts: "requestAccess"
        }[i] || "unknown",
        reason: "rejected",
        info: { payload: t, error: s }
      });
    if (i === "eth_sendRawTransaction" || i === "eth_sendTransaction") {
      const c = t.params[0];
      if (a.match(/insufficient funds|base fee exceeds gas limit/i))
        return ge("insufficient funds for intrinsic transaction cost", "INSUFFICIENT_FUNDS", {
          transaction: c,
          info: { error: s }
        });
      if (a.match(/nonce/i) && a.match(/too low/i))
        return ge("nonce has already been used", "NONCE_EXPIRED", { transaction: c, info: { error: s } });
      if (a.match(/replacement transaction/i) && a.match(/underpriced/i))
        return ge("replacement fee too low", "REPLACEMENT_UNDERPRICED", { transaction: c, info: { error: s } });
      if (a.match(/only replay-protected/i))
        return ge("legacy pre-eip-155 transactions not supported", "UNSUPPORTED_OPERATION", {
          operation: i,
          info: { transaction: c, info: { error: s } }
        });
    }
    let o = !!a.match(/the method .* does not exist/i);
    return o || s && s.details && s.details.startsWith("Unauthorized method:") && (o = !0), o ? ge("unsupported operation", "UNSUPPORTED_OPERATION", {
      operation: t.method,
      info: { error: s, payload: t }
    }) : ge("could not coalesce error", "UNKNOWN_ERROR", { error: s, payload: t });
  }
  /**
   *  Requests the %%method%% with %%params%% via the JSON-RPC protocol
   *  over the underlying channel. This can be used to call methods
   *  on the backend that do not have a high-level API within the Provider
   *  API.
   *
   *  This method queues requests according to the batch constraints
   *  in the options, assigns the request a unique ID.
   *
   *  **Do NOT override** this method in sub-classes; instead
   *  override [[_send]] or force the options values in the
   *  call to the constructor to modify this method's behavior.
   */
  send(t, r) {
    if (this.destroyed)
      return Promise.reject(ge("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: t }));
    const i = Ua(this, la)._++, s = new Promise((a, o) => {
      m(this, rr).push({
        resolve: a,
        reject: o,
        payload: { method: t, params: r, id: i, jsonrpc: "2.0" }
      });
    });
    return z(this, $o, Kd).call(this), s;
  }
  /**
   *  Resolves to the [[Signer]] account for  %%address%% managed by
   *  the client.
   *
   *  If the %%address%% is a number, it is used as an index in the
   *  the accounts from [[listAccounts]].
   *
   *  This can only be used on clients which manage accounts (such as
   *  Geth with imported account or MetaMask).
   *
   *  Throws if the account doesn't exist.
   */
  async getSigner(t) {
    t == null && (t = 0);
    const r = this.send("eth_accounts", []);
    if (typeof t == "number") {
      const s = await r;
      if (t >= s.length)
        throw new Error("no such account");
      return new Hl(this, s[t]);
    }
    const { accounts: i } = await Ke({
      network: this.getNetwork(),
      accounts: r
    });
    t = oe(t);
    for (const s of i)
      if (oe(s) === t)
        return new Hl(this, t);
    throw new Error("invalid account");
  }
  async listAccounts() {
    return (await this.send("eth_accounts", [])).map((r) => new Hl(this, r));
  }
  destroy() {
    m(this, vn) && (clearTimeout(m(this, vn)), g(this, vn, null));
    for (const { payload: t, reject: r } of m(this, rr))
      r(ge("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: t.method }));
    g(this, rr, []), super.destroy();
  }
}
Fi = new WeakMap(), la = new WeakMap(), rr = new WeakMap(), vn = new WeakMap(), tn = new WeakMap(), Ft = new WeakMap(), ot = new WeakMap(), $o = new WeakSet(), Kd = function() {
  if (m(this, vn))
    return;
  const t = this._getOption("batchMaxCount") === 1 ? 0 : this._getOption("batchStallTime");
  g(this, vn, setTimeout(() => {
    g(this, vn, null);
    const r = m(this, rr);
    for (g(this, rr, []); r.length; ) {
      const i = [r.shift()];
      for (; r.length && i.length !== m(this, Fi).batchMaxCount; )
        if (i.push(r.shift()), JSON.stringify(i.map((a) => a.payload)).length > m(this, Fi).batchMaxSize) {
          r.unshift(i.pop());
          break;
        }
      (async () => {
        const s = i.length === 1 ? i[0].payload : i.map((a) => a.payload);
        this.emit("debug", { action: "sendRpcPayload", payload: s });
        try {
          const a = await this._send(s);
          this.emit("debug", { action: "receiveRpcResult", result: a });
          for (const { resolve: o, reject: c, payload: u } of i) {
            if (this.destroyed) {
              c(ge("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: u.method }));
              continue;
            }
            const l = a.filter((d) => d.id === u.id)[0];
            if (l == null) {
              const d = ge("missing response for request", "BAD_DATA", {
                value: a,
                info: { payload: u }
              });
              this.emit("error", d), c(d);
              continue;
            }
            if ("error" in l) {
              c(this.getRpcError(u, l));
              continue;
            }
            o(l.result);
          }
        } catch (a) {
          this.emit("debug", { action: "receiveRpcError", error: a });
          for (const { reject: o } of i)
            o(a);
        }
      })();
    }
  }, t));
};
var Wr;
class Qv extends Kv {
  constructor(t, r) {
    super(t, r);
    _(this, Wr);
    let i = this._getOption("pollingInterval");
    i == null && (i = Ux.pollingInterval), g(this, Wr, i);
  }
  _getSubscriber(t) {
    const r = super._getSubscriber(t);
    return bh(r) && (r.pollingInterval = m(this, Wr)), r;
  }
  /**
   *  The polling interval (default: 4000 ms)
   */
  get pollingInterval() {
    return m(this, Wr);
  }
  set pollingInterval(t) {
    if (!Number.isInteger(t) || t < 0)
      throw new Error("invalid interval");
    g(this, Wr, t), this._forEachSubscriber((r) => {
      bh(r) && (r.pollingInterval = m(this, Wr));
    });
  }
}
Wr = new WeakMap();
var da;
class qv extends Qv {
  constructor(t, r, i) {
    t == null && (t = "http://localhost:8545");
    super(r, i);
    _(this, da);
    typeof t == "string" ? g(this, da, new hr(t)) : g(this, da, t.clone());
  }
  _getConnection() {
    return m(this, da).clone();
  }
  async send(t, r) {
    return await this._start(), await super.send(t, r);
  }
  async _send(t) {
    const r = this._getConnection();
    r.body = JSON.stringify(t), r.setHeader("content-type", "application/json");
    const i = await r.send();
    i.assertOk();
    let s = i.bodyJson;
    return Array.isArray(s) || (s = [s]), s;
  }
}
da = new WeakMap();
function Qd(n) {
  if (n == null)
    return null;
  if (typeof n.message == "string" && n.message.match(/revert/i) && me(n.data))
    return { message: n.message, data: n.data };
  if (typeof n == "object") {
    for (const e in n) {
      const t = Qd(n[e]);
      if (t)
        return t;
    }
    return null;
  }
  if (typeof n == "string")
    try {
      return Qd(JSON.parse(n));
    } catch {
    }
  return null;
}
function qd(n, e) {
  if (n != null) {
    if (typeof n.message == "string" && e.push(n.message), typeof n == "object")
      for (const t in n)
        qd(n[t], e);
    if (typeof n == "string")
      try {
        return qd(JSON.parse(n), e);
      } catch {
      }
  }
}
function Jv(n) {
  const e = [];
  return qd(n, e), e;
}
var fa;
const d0 = class d0 extends t0 {
  /**
   *  Creates a new BaseWallet for %%privateKey%%, optionally
   *  connected to %%provider%%.
   *
   *  If %%provider%% is not specified, only offline methods can
   *  be used.
   */
  constructor(t, r) {
    super(r);
    /**
     *  The wallet address.
     */
    T(this, "address");
    _(this, fa);
    A(t && typeof t.sign == "function", "invalid private key", "privateKey", "[ REDACTED ]"), g(this, fa, t);
    const i = tc(this.signingKey.publicKey);
    Y(this, { address: i });
  }
  // Store private values behind getters to reduce visibility
  // in console.log
  /**
   *  The [[SigningKey]] used for signing payloads.
   */
  get signingKey() {
    return m(this, fa);
  }
  /**
   *  The private key for this wallet.
   */
  get privateKey() {
    return this.signingKey.privateKey;
  }
  async getAddress() {
    return this.address;
  }
  connect(t) {
    return new d0(m(this, fa), t);
  }
  async signTransaction(t) {
    t = So(t);
    const { to: r, from: i } = await Ke({
      to: t.to ? Me(t.to, this) : void 0,
      from: t.from ? Me(t.from, this) : void 0
    });
    r != null && (t.to = r), i != null && (t.from = i), t.from != null && (A(oe(t.from) === this.address, "transaction from address mismatch", "tx.from", t.from), delete t.from);
    const s = wo.from(t);
    return s.signature = this.signingKey.sign(s.unsignedHash), s.serialized;
  }
  async signMessage(t) {
    return this.signMessageSync(t);
  }
  // @TODO: Add a secialized signTx and signTyped sync that enforces
  // all parameters are known?
  /**
   *  Returns the signature for %%message%% signed with this wallet.
   */
  signMessageSync(t) {
    return this.signingKey.sign(IE(t)).serialized;
  }
  /**
   *  Returns the Authorization for %%auth%%.
   */
  authorizeSync(t) {
    A(typeof t.address == "string", "invalid address for authorizeSync", "auth.address", t);
    const r = this.signingKey.sign($8(t));
    return Object.assign({}, {
      address: oe(t.address),
      nonce: q(t.nonce || 0),
      chainId: q(t.chainId || 0)
    }, { signature: r });
  }
  /**
   *  Resolves to the Authorization for %%auth%%.
   */
  async authorize(t) {
    return t = Object.assign({}, t, {
      address: await Me(t.address, this)
    }), this.authorizeSync(await this.populateAuthorization(t));
  }
  async signTypedData(t, r, i) {
    const s = await Zr.resolveNames(t, r, i, async (a) => {
      G(this.provider != null, "cannot resolve ENS names without a provider", "UNSUPPORTED_OPERATION", {
        operation: "resolveName",
        info: { name: a }
      });
      const o = await this.provider.resolveName(a);
      return G(o != null, "unconfigured ENS name", "UNCONFIGURED_NAME", {
        value: a
      }), o;
    });
    return this.signingKey.sign(Zr.hash(s.domain, r, s.value)).serialized;
  }
};
fa = new WeakMap();
let hu = d0;
const yu = " !#$%&'()*+,-./<=>?@[]^_`{|}~", Yv = /^[a-z]*$/i;
function xh(n, e) {
  let t = 97;
  return n.reduce((r, i) => (i === e ? t++ : i.match(Yv) ? r.push(String.fromCharCode(t) + i) : (t = 97, r.push(i)), r), []);
}
function Zv(n, e) {
  for (let i = yu.length - 1; i >= 0; i--)
    n = n.split(yu[i]).join(e.substring(2 * i, 2 * i + 2));
  const t = [], r = n.replace(/(:|([0-9])|([A-Z][a-z]*))/g, (i, s, a, o) => {
    if (a)
      for (let c = parseInt(a); c >= 0; c--)
        t.push(";");
    else
      t.push(s.toLowerCase());
    return "";
  });
  if (r)
    throw new Error(`leftovers: ${JSON.stringify(r)}`);
  return xh(xh(t, ";"), ":");
}
function Xv(n) {
  return A(n[0] === "0", "unsupported auwl data", "data", n), Zv(n.substring(1 + 2 * yu.length), n.substring(1, 1 + 2 * yu.length));
}
class e4 {
  /**
   *  Creates a new Wordlist instance.
   *
   *  Sub-classes MUST call this if they provide their own constructor,
   *  passing in the locale string of the language.
   *
   *  Generally there is no need to create instances of a Wordlist,
   *  since each language-specific Wordlist creates an instance and
   *  there is no state kept internally, so they are safe to share.
   */
  constructor(e) {
    T(this, "locale");
    Y(this, { locale: e });
  }
  /**
   *  Sub-classes may override this to provide a language-specific
   *  method for spliting %%phrase%% into individual words.
   *
   *  By default, %%phrase%% is split using any sequences of
   *  white-space as defined by regular expressions (i.e. ``/\s+/``).
   */
  split(e) {
    return e.toLowerCase().split(/\s+/g);
  }
  /**
   *  Sub-classes may override this to provider a language-specific
   *  method for joining %%words%% into a phrase.
   *
   *  By default, %%words%% are joined by a single space.
   */
  join(e) {
    return e.join(" ");
  }
}
var pa, Vo, Gi, zo, Jd;
class t4 extends e4 {
  /**
   *  Creates a new Wordlist for %%locale%% using the OWL %%data%%
   *  and validated against the %%checksum%%.
   */
  constructor(t, r, i) {
    super(t);
    _(this, zo);
    _(this, pa);
    _(this, Vo);
    _(this, Gi);
    g(this, pa, r), g(this, Vo, i), g(this, Gi, null);
  }
  /**
   *  The OWL-encoded data.
   */
  get _data() {
    return m(this, pa);
  }
  /**
   *  Decode all the words for the wordlist.
   */
  _decodeWords() {
    return Xv(m(this, pa));
  }
  getWord(t) {
    const r = z(this, zo, Jd).call(this);
    return A(t >= 0 && t < r.length, `invalid word index: ${t}`, "index", t), r[t];
  }
  getWordIndex(t) {
    return z(this, zo, Jd).call(this).indexOf(t);
  }
}
pa = new WeakMap(), Vo = new WeakMap(), Gi = new WeakMap(), zo = new WeakSet(), Jd = function() {
  if (m(this, Gi) == null) {
    const t = this._decodeWords();
    if (_n(t.join(`
`) + `
`) !== m(this, Vo))
      throw new Error(`BIP39 Wordlist for ${this.locale} FAILED`);
    g(this, Gi, t);
  }
  return m(this, Gi);
};
const n4 = "0erleonalorenseinceregesticitStanvetearctssi#ch2Athck&tneLl0And#Il.yLeOutO=S|S%b/ra@SurdU'0Ce[Cid|CountCu'Hie=IdOu,-Qui*Ro[TT]T%T*[Tu$0AptDD-tD*[Ju,M.UltV<)Vi)0Rob-0FairF%dRaid0A(EEntRee0Ead0MRRp%tS!_rmBumCoholErtI&LLeyLowMo,O}PhaReadySoT Ways0A>urAz(gOngOuntU'd0Aly,Ch%Ci|G G!GryIm$K!Noun)Nu$O` Sw T&naTiqueXietyY1ArtOlogyPe?P!Pro=Ril1ChCt-EaEnaGueMMedM%MyOundR<+Re,Ri=RowTTefa@Ti,Tw%k0KPe@SaultSetSi,SumeThma0H!>OmTa{T&dT.udeTra@0Ct]D.Gu,NtTh%ToTumn0Era+OcadoOid0AkeA*AyEsomeFulKw?d0Is:ByChel%C#D+GL<)Lc#y~MbooN<aNn RRelyRga(R*lSeS-SketTt!3A^AnAutyCau'ComeEfF%eG(Ha=H(dLie=LowLtN^Nef./TrayTt Twe&Y#d3Cyc!DKeNdOlogyRdR`Tt _{AdeAmeAnketA,EakE[IndOodO[omOu'UeUrUsh_rdAtDyIlMbNeNusOkO,Rd R(gRrowSsTtomUn)XY_{etA(AndA[A=EadEezeI{Id+IefIghtIngIskOccoliOk&OnzeOomO` OwnUsh2Bb!DdyD+tFf$oIldLbLkL!tNd!Nk Rd&Rg R,SS(e[SyTt Y Zz:Bba+B(B!CtusGeKe~LmM aMpNN$N)lNdyNn#NoeNvasNy#Pab!P.$Pta(RRb#RdRgoRpetRryRtSeShS(o/!Su$TT$ogT^Teg%yTt!UghtU'Ut]Ve3Il(gL yM|NsusNturyRe$Rta(_irAlkAmp]An+AosApt Ar+A'AtEapE{Ee'EfErryE,I{&IefIldIm}yOi)Oo'R#-U{!UnkUrn0G?Nnam#Rc!Tiz&TyVil_imApArifyAwAyE<ErkEv I{I|IffImbIn-IpO{OgO'O`OudOwnUbUmpU, Ut^_^A,C#utDeFfeeIlInL!@L%LumnMb(eMeMf%tM-Mm#Mp<yNc tNdu@NfirmNg*[N}@Nsid NtrolNv()OkOlPp PyR$ReRnR*@/Tt#U^UntryUp!Ur'Us(V Yo>_{Ad!AftAmA}AshAt AwlAzyEamEd.EekEwI{etImeIspIt-OpO[Ou^OwdUci$UelUi'Umb!Un^UshYY,$2BeLtu*PPbo?dRiousRr|Rta(R=Sh]/omTe3C!:DMa+MpN)Ng R(gShUght WnY3AlBa>BrisCadeCemb CideCl(eC%a>C*a'ErF&'F(eFyG*eLayLiv M<dMi'Ni$Nti,NyP?tP&dPos.P`PutyRi=ScribeS tSignSkSpair/royTailTe@VelopVi)Vo>3AgramAlAm#dAryCeE'lEtFf G.$Gn.yLemmaNn NosaurRe@RtSag*eScov Sea'ShSmi[S%d Splay/<)V tVideV%)Zzy5Ct%Cum|G~Lph(Ma(Na>NkeyN%OrSeUb!Ve_ftAg#AmaA,-AwEamE[IftIllInkIpI=OpUmY2CkMbNeR(g/T^Ty1Arf1Nam-:G G!RlyRnR`Sily/Sy1HoOlogyOnomy0GeItUca>1F%t0G1GhtTh 2BowD E@r-Eg<tEm|Eph<tEvat%I>Se0B?kBodyBra)Er+Ot]PloyPow Pty0Ab!A@DD![D%'EmyErgyF%)Ga+G(eH<)JoyLi,OughR-hRollSu*T Ti*TryVelope1Isode0U$Uip0AA'OdeOs]R%Upt0CapeSayS&)Ta>0Ern$H-s1Id&)IlOkeOl=1A@Amp!Ce[Ch<+C.eCludeCu'Ecu>Erci'Hau,Hib.I!I,ItOt-P<dPe@Pi*Pla(Po'P*[T&dTra0EEbrow:Br-CeCultyDeIntI`~L'MeMilyMousNNcyNtasyRmSh]TT$Th TigueUltV%.e3Atu*Bru?yD $EEdElMa!N)/iv$T^V W3B Ct]EldGu*LeLmLt N$NdNeNg NishReRmR,Sc$ShTT}[X_gAmeAshAtAv%EeIghtIpOatO{O%Ow UidUshY_mCusGIlLd~owOdOtR)Re,R+tRkRtu}RumRw?dSsil/ UndX_gi!AmeEqu|EshI&dIn+OgOntO,OwnOz&U.2ElNNnyRna)RyTu*:D+tInLaxy~ yMePRa+Rba+Rd&Rl-Rm|SSpTeTh U+Ze3N $NiusN*Nt!Nu(e/u*2O,0AntFtGg!Ng RaffeRlVe_dAn)A*A[IdeImp'ObeOomOryO=OwUe_tDde[LdOdO'RillaSpelSsipV nWn_bA)A(AntApeA[Av.yEatE&IdIefItOc yOupOwUnt_rdE[IdeIltIt?N3M:B.IrLfMm M, NdPpyRb%RdRshR=,TVeWkZ?d3AdAl`ArtAvyD+hogIght~oLmetLpNRo3Dd&Gh~NtPRe/%y5BbyCkeyLdLeLiday~owMeNeyOdPeRnRr%R'Sp.$/TelUrV 5BGeM<Mb!M%Nd*dNgryNtRd!RryRtSb<d3Brid:1EOn0EaEntifyLe2N%e4LLeg$L}[0A+Ita>M&'Mu}Pa@Po'Pro=Pul'0ChCludeComeC*a'DexD-a>Do%Du,ryF<tFl-tF%mHa!H .Iti$Je@JuryMa>N Noc|PutQuiryS<eSe@SideSpi*/$lTa@T e,ToVe,V.eVol=3On0L<dOla>Sue0Em1Ory:CketGu?RZz3AlousAns~yWel9BInKeUr}yY5D+I)MpNg!Ni%Nk/:Ng?oo3EnEpT^upY3CkDD}yNdNgdomSsTT^&TeTt&Wi4EeIfeO{Ow:BBelB%Dd DyKeMpNgua+PtopR+T T(UghUndryVaWWnWsu.Y Zy3Ad AfArnA=Ctu*FtGG$G&dIsu*M#NdNg`NsOp?dSs#Tt Vel3ArB tyBr?yC&'FeFtGhtKeMbM.NkOnQuid/Tt!VeZ?d5AdAnB, C$CkG-NelyNgOpTt yUdUn+VeY$5CkyGga+Mb N?N^Xury3R-s:Ch(eDG-G}tIdIlInJ%KeMm$NNa+Nda>NgoNs]Nu$P!Rb!R^Rg(R(eRketRria+SkSs/ T^T i$ThTrixTt XimumZe3AdowAnAsu*AtCh<-D$DiaLodyLtMb M%yNt]NuRcyR+R.RryShSsa+T$Thod3Dd!DnightLk~]M-NdNimumN%Nu>Rac!Rr%S ySs/akeXXedXtu*5Bi!DelDifyMM|N.%NkeyN, N`OnR$ReRn(gSqu.oTh T]T%Unta(U'VeVie5ChFf(LeLtiplySc!SeumShroomS-/Tu$3Self/ yTh:I=MePk(Rrow/yT]Tu*3ArCkEdGati=G!@I` PhewR=/TTw%kUtr$V WsXt3CeGht5B!I'M(eeOd!Rm$R`SeTab!TeTh(gTi)VelW5C!?Mb R'T:K0EyJe@Li+Scu*S =Ta(Vious0CurE<Tob 0Or1FF Fi)T&2L1Ay0DI=Ymp-0It0CeEI#L(eLy1EnEraIn]Po'T]1An+B.Ch?dD D(?yG<I|Ig($Ph<0Tr-h0H 0Tdo%T TputTside0AlEnEr0NN 0Yg&0/ 0O}:CtDd!GeIrLa)LmNdaNelN-N` P RadeR|RkRrotRtySsT^ThTi|TrolTt nU'VeYm|3A)AnutArAs<tL-<NN$tyNcilOp!Pp Rfe@Rm.Rs#T2O}OtoRa'Ys-$0AnoCn-Ctu*E)GGe#~LotNkO} Pe/olT^Zza_)A}tA,-A>AyEa'Ed+U{UgUn+2EmEtIntL?LeLi)NdNyOlPul?Rt]S.]Ssib!/TatoTt yV tyWd W _@i)Ai'Ed-tEf Epa*Es|EttyEv|I)IdeIm?yIntI%.yIs#Iva>IzeOb!mO)[Odu)Of.OgramOje@Omo>OofOp tyOsp O>@OudOvide2Bl-Dd(g~LpL'Mpk(N^PilPpyR^a'R.yRpo'R'ShTZz!3Ramid:99Al.yAntumArt E,]I{ItIzO>:Bb.Cco#CeCkD?DioIlInI'~yMpN^NdomN+PidReTeTh V&WZ%3AdyAlAs#BelBuildC$lCei=CipeC%dCyc!Du)F!@F%mFu'G]G*tGul?Je@LaxLea'LiefLyMa(Memb M(dMo=Nd NewNtOp&PairPeatPla)P%tQui*ScueSemb!Si,Sour)Sp#'SultTi*T*atTurnUn]Ve$ViewW?d2Y`m0BBb#CeChDeD+F!GhtGidNgOtPp!SkTu$V$V 5AdA,BotBu,CketM<)OfOkieOmSeTa>UghUndU>Y$5Bb DeGLeNNwayR$:DDd!D}[FeIlLadLm#L#LtLu>MeMp!NdTisfyToshiU)Usa+VeY1A!AnA*Att E}HemeHoolI&)I[%sOrp]OutRapRe&RiptRub1AAr^As#AtC#dC*tCt]Cur.yEdEkGm|Le@~M(?Ni%N'Nt&)RiesRvi)Ss]Tt!TupV&_dowAftAllowA*EdEllEriffIeldIftI}IpIv O{OeOotOpOrtOuld O=RimpRugUff!Y0Bl(gCkDeE+GhtGnL|Lk~yLv Mil?Mp!N)NgR&/ Tua>XZe1A>Et^IIllInIrtUll0AbAmEepEnd I)IdeIghtImOg<OtOwUsh0AllArtI!OkeOo`0A{AkeApIffOw0ApCc Ci$CkDaFtL?Ldi LidLut]L=Me#eNgOnRryRtUlUndUpUr)U`0A)A*Ati$AwnEakEci$EedEllEndH eI)Id IkeInIr.L.OilOns%O#OrtOtRayReadR(gY0Ua*UeezeUir*l_b!AdiumAffA+AirsAmpAndArtA>AyEakEelEmEpE*oI{IllIngO{Oma^O}OolOryO=Ra>gyReetRikeR#gRugg!Ud|UffUmb!Y!0Bje@Bm.BwayC)[ChDd&Ff G?G+,ItMm NNnyN'tP PplyP*meReRfa)R+Rpri'RroundR=ySpe@/a(1AllowAmpApArmE?EetIftImIngIt^Ord1MbolMptomRup/em:B!Ck!GIlL|LkNkPeR+tSk/eTtooXi3A^Am~NN<tNnisNtRm/Xt_nkAtEmeEnE%yE*EyIngIsOughtReeRi=RowUmbUnd 0CketDeG LtMb MeNyPRedSsueT!5A,BaccoDayDdl EGe` I!tK&MatoM%rowNeNgueNightOlO`PP-Pp!R^RnadoRtoi'SsT$Uri,W?dW WnY_{AdeAff-Ag-A(Ansf ApAshA=lAyEatEeEndI$IbeI{Igg ImIpOphyOub!U{UeUlyUmpetU,U`Y2BeIt]Mb!NaN}lRkeyRnRt!1El=EntyI)InI,O1PeP-$:5Ly5B*lla0Ab!Awa*C!Cov D DoFairFoldHappyIf%mIqueItIv 'KnownLo{TilUsu$Veil1Da>GradeHoldOnP Set1B<Ge0A+EEdEfulE![U$0Il.y:C<tCuumGueLidL!yL=NNishP%Rious/Ult3H-!L=tNd%Ntu*NueRbRifyRs]RyS'lT <3Ab!Br<tCiousCt%yDeoEw~a+Nta+Ol(Rtu$RusSaS.Su$T$Vid5C$I)IdLc<oLumeTeYa+:GeG#ItLk~LnutNtRfa*RmRri%ShSp/eT VeY3Al`Ap#ArA'lA` BDd(gEk&dIrdLcome/T_!AtEatEelEnE*IpIsp 0DeD`FeLd~NNdowNeNgNkNn Nt ReSdomSeShT}[5LfM<Nd OdOlRdRkRldRryR`_pE{E,!I,I>Ong::Rd3Ar~ow9UUngU`:3BraRo9NeO", r4 = "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60";
let $l = null;
class Ji extends t4 {
  /**
   *  Creates a new instance of the English language Wordlist.
   *
   *  This should be unnecessary most of the time as the exported
   *  [[langEn]] should suffice.
   *
   *  @_ignore:
   */
  constructor() {
    super("en", n4, r4);
  }
  /**
   *  Returns a singleton instance of a ``LangEn``, creating it
   *  if this is the first time being called.
   */
  static wordlist() {
    return $l == null && ($l = new Ji()), $l;
  }
}
function Fx(n) {
  return (1 << n) - 1 << 8 - n & 255;
}
function i4(n) {
  return (1 << n) - 1 & 255;
}
function Vl(n, e) {
  Tm("NFKD"), e == null && (e = Ji.wordlist());
  const t = e.split(n);
  A(t.length % 3 === 0 && t.length >= 12 && t.length <= 24, "invalid mnemonic length", "mnemonic", "[ REDACTED ]");
  const r = new Uint8Array(Math.ceil(11 * t.length / 8));
  let i = 0;
  for (let u = 0; u < t.length; u++) {
    let l = e.getWordIndex(t[u].normalize("NFKD"));
    A(l >= 0, `invalid mnemonic word at index ${u}`, "mnemonic", "[ REDACTED ]");
    for (let d = 0; d < 11; d++)
      l & 1 << 10 - d && (r[i >> 3] |= 1 << 7 - i % 8), i++;
  }
  const s = 32 * t.length / 3, a = t.length / 3, o = Fx(a), c = K(zt(r.slice(0, s / 8)))[0] & o;
  return A(c === (r[r.length - 1] & o), "invalid mnemonic checksum", "mnemonic", "[ REDACTED ]"), V(r.slice(0, s / 8));
}
function zl(n, e) {
  A(n.length % 4 === 0 && n.length >= 16 && n.length <= 32, "invalid entropy size", "entropy", "[ REDACTED ]"), e == null && (e = Ji.wordlist());
  const t = [0];
  let r = 11;
  for (let a = 0; a < n.length; a++)
    r > 8 ? (t[t.length - 1] <<= 8, t[t.length - 1] |= n[a], r -= 8) : (t[t.length - 1] <<= r, t[t.length - 1] |= n[a] >> 8 - r, t.push(n[a] & i4(8 - r)), r += 3);
  const i = n.length / 4, s = parseInt(zt(n).substring(2, 4), 16) & Fx(i);
  return t[t.length - 1] <<= i, t[t.length - 1] |= s >> 8 - i, e.join(t.map((a) => e.getWord(a)));
}
const jl = {};
class Ca {
  /**
   *  @private
   */
  constructor(e, t, r, i, s) {
    /**
     *  The mnemonic phrase of 12, 15, 18, 21 or 24 words.
     *
     *  Use the [[wordlist]] ``split`` method to get the individual words.
     */
    T(this, "phrase");
    /**
     *  The password used for this mnemonic. If no password is used this
     *  is the empty string (i.e. ``""``) as per the specification.
     */
    T(this, "password");
    /**
     *  The wordlist for this mnemonic.
     */
    T(this, "wordlist");
    /**
     *  The underlying entropy which the mnemonic encodes.
     */
    T(this, "entropy");
    i == null && (i = ""), s == null && (s = Ji.wordlist()), es(e, jl, "Mnemonic"), Y(this, { phrase: r, password: i, wordlist: s, entropy: t });
  }
  /**
   *  Returns the seed for the mnemonic.
   */
  computeSeed() {
    const e = Qe("mnemonic" + this.password, "NFKD");
    return ti(Qe(this.phrase, "NFKD"), e, 2048, 64, "sha512");
  }
  /**
   *  Creates a new Mnemonic for the %%phrase%%.
   *
   *  The default %%password%% is the empty string and the default
   *  wordlist is the [English wordlists](LangEn).
   */
  static fromPhrase(e, t, r) {
    const i = Vl(e, r);
    return e = zl(K(i), r), new Ca(jl, i, e, t, r);
  }
  /**
   *  Create a new **Mnemonic** from the %%entropy%%.
   *
   *  The default %%password%% is the empty string and the default
   *  wordlist is the [English wordlists](LangEn).
   */
  static fromEntropy(e, t, r) {
    const i = K(e, "entropy"), s = zl(i, r);
    return new Ca(jl, V(i), s, t, r);
  }
  /**
   *  Returns the phrase for %%mnemonic%%.
   */
  static entropyToPhrase(e, t) {
    const r = K(e, "entropy");
    return zl(r, t);
  }
  /**
   *  Returns the entropy for %%phrase%%.
   */
  static phraseToEntropy(e, t) {
    return Vl(e, t);
  }
  /**
   *  Returns true if %%phrase%% is a valid [[link-bip-39]] phrase.
   *
   *  This checks all the provided words belong to the %%wordlist%%,
   *  that the length is valid and the checksum is correct.
   */
  static isValidMnemonic(e, t) {
    try {
      return Vl(e, t), !0;
    } catch {
    }
    return !1;
  }
}
/*! MIT License. Copyright 2015-2022 Richard Moore <me@ricmoo.com>. See LICENSE.txt. */
var De = function(n, e, t, r) {
  if (t === "a" && !r) throw new TypeError("Private accessor was defined without a getter");
  if (typeof e == "function" ? n !== e || !r : !e.has(n)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return t === "m" ? r : t === "a" ? r.call(n) : r ? r.value : e.get(n);
}, Wl = function(n, e, t, r, i) {
  if (r === "m") throw new TypeError("Private method is not writable");
  if (r === "a" && !i) throw new TypeError("Private accessor was defined without a setter");
  if (typeof e == "function" ? n !== e || !i : !e.has(n)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return r === "a" ? i.call(n, t) : i ? i.value = t : e.set(n, t), t;
}, Kc, Nt, fn;
const s4 = { 16: 10, 24: 12, 32: 14 }, a4 = [1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145], St = [99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22], Cc = [82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125], o4 = [3328402341, 4168907908, 4000806809, 4135287693, 4294111757, 3597364157, 3731845041, 2445657428, 1613770832, 33620227, 3462883241, 1445669757, 3892248089, 3050821474, 1303096294, 3967186586, 2412431941, 528646813, 2311702848, 4202528135, 4026202645, 2992200171, 2387036105, 4226871307, 1101901292, 3017069671, 1604494077, 1169141738, 597466303, 1403299063, 3832705686, 2613100635, 1974974402, 3791519004, 1033081774, 1277568618, 1815492186, 2118074177, 4126668546, 2211236943, 1748251740, 1369810420, 3521504564, 4193382664, 3799085459, 2883115123, 1647391059, 706024767, 134480908, 2512897874, 1176707941, 2646852446, 806885416, 932615841, 168101135, 798661301, 235341577, 605164086, 461406363, 3756188221, 3454790438, 1311188841, 2142417613, 3933566367, 302582043, 495158174, 1479289972, 874125870, 907746093, 3698224818, 3025820398, 1537253627, 2756858614, 1983593293, 3084310113, 2108928974, 1378429307, 3722699582, 1580150641, 327451799, 2790478837, 3117535592, 0, 3253595436, 1075847264, 3825007647, 2041688520, 3059440621, 3563743934, 2378943302, 1740553945, 1916352843, 2487896798, 2555137236, 2958579944, 2244988746, 3151024235, 3320835882, 1336584933, 3992714006, 2252555205, 2588757463, 1714631509, 293963156, 2319795663, 3925473552, 67240454, 4269768577, 2689618160, 2017213508, 631218106, 1269344483, 2723238387, 1571005438, 2151694528, 93294474, 1066570413, 563977660, 1882732616, 4059428100, 1673313503, 2008463041, 2950355573, 1109467491, 537923632, 3858759450, 4260623118, 3218264685, 2177748300, 403442708, 638784309, 3287084079, 3193921505, 899127202, 2286175436, 773265209, 2479146071, 1437050866, 4236148354, 2050833735, 3362022572, 3126681063, 840505643, 3866325909, 3227541664, 427917720, 2655997905, 2749160575, 1143087718, 1412049534, 999329963, 193497219, 2353415882, 3354324521, 1807268051, 672404540, 2816401017, 3160301282, 369822493, 2916866934, 3688947771, 1681011286, 1949973070, 336202270, 2454276571, 201721354, 1210328172, 3093060836, 2680341085, 3184776046, 1135389935, 3294782118, 965841320, 831886756, 3554993207, 4068047243, 3588745010, 2345191491, 1849112409, 3664604599, 26054028, 2983581028, 2622377682, 1235855840, 3630984372, 2891339514, 4092916743, 3488279077, 3395642799, 4101667470, 1202630377, 268961816, 1874508501, 4034427016, 1243948399, 1546530418, 941366308, 1470539505, 1941222599, 2546386513, 3421038627, 2715671932, 3899946140, 1042226977, 2521517021, 1639824860, 227249030, 260737669, 3765465232, 2084453954, 1907733956, 3429263018, 2420656344, 100860677, 4160157185, 470683154, 3261161891, 1781871967, 2924959737, 1773779408, 394692241, 2579611992, 974986535, 664706745, 3655459128, 3958962195, 731420851, 571543859, 3530123707, 2849626480, 126783113, 865375399, 765172662, 1008606754, 361203602, 3387549984, 2278477385, 2857719295, 1344809080, 2782912378, 59542671, 1503764984, 160008576, 437062935, 1707065306, 3622233649, 2218934982, 3496503480, 2185314755, 697932208, 1512910199, 504303377, 2075177163, 2824099068, 1841019862, 739644986], c4 = [2781242211, 2230877308, 2582542199, 2381740923, 234877682, 3184946027, 2984144751, 1418839493, 1348481072, 50462977, 2848876391, 2102799147, 434634494, 1656084439, 3863849899, 2599188086, 1167051466, 2636087938, 1082771913, 2281340285, 368048890, 3954334041, 3381544775, 201060592, 3963727277, 1739838676, 4250903202, 3930435503, 3206782108, 4149453988, 2531553906, 1536934080, 3262494647, 484572669, 2923271059, 1783375398, 1517041206, 1098792767, 49674231, 1334037708, 1550332980, 4098991525, 886171109, 150598129, 2481090929, 1940642008, 1398944049, 1059722517, 201851908, 1385547719, 1699095331, 1587397571, 674240536, 2704774806, 252314885, 3039795866, 151914247, 908333586, 2602270848, 1038082786, 651029483, 1766729511, 3447698098, 2682942837, 454166793, 2652734339, 1951935532, 775166490, 758520603, 3000790638, 4004797018, 4217086112, 4137964114, 1299594043, 1639438038, 3464344499, 2068982057, 1054729187, 1901997871, 2534638724, 4121318227, 1757008337, 0, 750906861, 1614815264, 535035132, 3363418545, 3988151131, 3201591914, 1183697867, 3647454910, 1265776953, 3734260298, 3566750796, 3903871064, 1250283471, 1807470800, 717615087, 3847203498, 384695291, 3313910595, 3617213773, 1432761139, 2484176261, 3481945413, 283769337, 100925954, 2180939647, 4037038160, 1148730428, 3123027871, 3813386408, 4087501137, 4267549603, 3229630528, 2315620239, 2906624658, 3156319645, 1215313976, 82966005, 3747855548, 3245848246, 1974459098, 1665278241, 807407632, 451280895, 251524083, 1841287890, 1283575245, 337120268, 891687699, 801369324, 3787349855, 2721421207, 3431482436, 959321879, 1469301956, 4065699751, 2197585534, 1199193405, 2898814052, 3887750493, 724703513, 2514908019, 2696962144, 2551808385, 3516813135, 2141445340, 1715741218, 2119445034, 2872807568, 2198571144, 3398190662, 700968686, 3547052216, 1009259540, 2041044702, 3803995742, 487983883, 1991105499, 1004265696, 1449407026, 1316239930, 504629770, 3683797321, 168560134, 1816667172, 3837287516, 1570751170, 1857934291, 4014189740, 2797888098, 2822345105, 2754712981, 936633572, 2347923833, 852879335, 1133234376, 1500395319, 3084545389, 2348912013, 1689376213, 3533459022, 3762923945, 3034082412, 4205598294, 133428468, 634383082, 2949277029, 2398386810, 3913789102, 403703816, 3580869306, 2297460856, 1867130149, 1918643758, 607656988, 4049053350, 3346248884, 1368901318, 600565992, 2090982877, 2632479860, 557719327, 3717614411, 3697393085, 2249034635, 2232388234, 2430627952, 1115438654, 3295786421, 2865522278, 3633334344, 84280067, 33027830, 303828494, 2747425121, 1600795957, 4188952407, 3496589753, 2434238086, 1486471617, 658119965, 3106381470, 953803233, 334231800, 3005978776, 857870609, 3151128937, 1890179545, 2298973838, 2805175444, 3056442267, 574365214, 2450884487, 550103529, 1233637070, 4289353045, 2018519080, 2057691103, 2399374476, 4166623649, 2148108681, 387583245, 3664101311, 836232934, 3330556482, 3100665960, 3280093505, 2955516313, 2002398509, 287182607, 3413881008, 4238890068, 3597515707, 975967766], u4 = [1671808611, 2089089148, 2006576759, 2072901243, 4061003762, 1807603307, 1873927791, 3310653893, 810573872, 16974337, 1739181671, 729634347, 4263110654, 3613570519, 2883997099, 1989864566, 3393556426, 2191335298, 3376449993, 2106063485, 4195741690, 1508618841, 1204391495, 4027317232, 2917941677, 3563566036, 2734514082, 2951366063, 2629772188, 2767672228, 1922491506, 3227229120, 3082974647, 4246528509, 2477669779, 644500518, 911895606, 1061256767, 4144166391, 3427763148, 878471220, 2784252325, 3845444069, 4043897329, 1905517169, 3631459288, 827548209, 356461077, 67897348, 3344078279, 593839651, 3277757891, 405286936, 2527147926, 84871685, 2595565466, 118033927, 305538066, 2157648768, 3795705826, 3945188843, 661212711, 2999812018, 1973414517, 152769033, 2208177539, 745822252, 439235610, 455947803, 1857215598, 1525593178, 2700827552, 1391895634, 994932283, 3596728278, 3016654259, 695947817, 3812548067, 795958831, 2224493444, 1408607827, 3513301457, 0, 3979133421, 543178784, 4229948412, 2982705585, 1542305371, 1790891114, 3410398667, 3201918910, 961245753, 1256100938, 1289001036, 1491644504, 3477767631, 3496721360, 4012557807, 2867154858, 4212583931, 1137018435, 1305975373, 861234739, 2241073541, 1171229253, 4178635257, 33948674, 2139225727, 1357946960, 1011120188, 2679776671, 2833468328, 1374921297, 2751356323, 1086357568, 2408187279, 2460827538, 2646352285, 944271416, 4110742005, 3168756668, 3066132406, 3665145818, 560153121, 271589392, 4279952895, 4077846003, 3530407890, 3444343245, 202643468, 322250259, 3962553324, 1608629855, 2543990167, 1154254916, 389623319, 3294073796, 2817676711, 2122513534, 1028094525, 1689045092, 1575467613, 422261273, 1939203699, 1621147744, 2174228865, 1339137615, 3699352540, 577127458, 712922154, 2427141008, 2290289544, 1187679302, 3995715566, 3100863416, 339486740, 3732514782, 1591917662, 186455563, 3681988059, 3762019296, 844522546, 978220090, 169743370, 1239126601, 101321734, 611076132, 1558493276, 3260915650, 3547250131, 2901361580, 1655096418, 2443721105, 2510565781, 3828863972, 2039214713, 3878868455, 3359869896, 928607799, 1840765549, 2374762893, 3580146133, 1322425422, 2850048425, 1823791212, 1459268694, 4094161908, 3928346602, 1706019429, 2056189050, 2934523822, 135794696, 3134549946, 2022240376, 628050469, 779246638, 472135708, 2800834470, 3032970164, 3327236038, 3894660072, 3715932637, 1956440180, 522272287, 1272813131, 3185336765, 2340818315, 2323976074, 1888542832, 1044544574, 3049550261, 1722469478, 1222152264, 50660867, 4127324150, 236067854, 1638122081, 895445557, 1475980887, 3117443513, 2257655686, 3243809217, 489110045, 2662934430, 3778599393, 4162055160, 2561878936, 288563729, 1773916777, 3648039385, 2391345038, 2493985684, 2612407707, 505560094, 2274497927, 3911240169, 3460925390, 1442818645, 678973480, 3749357023, 2358182796, 2717407649, 2306869641, 219617805, 3218761151, 3862026214, 1120306242, 1756942440, 1103331905, 2578459033, 762796589, 252780047, 2966125488, 1425844308, 3151392187, 372911126], l4 = [1667474886, 2088535288, 2004326894, 2071694838, 4075949567, 1802223062, 1869591006, 3318043793, 808472672, 16843522, 1734846926, 724270422, 4278065639, 3621216949, 2880169549, 1987484396, 3402253711, 2189597983, 3385409673, 2105378810, 4210693615, 1499065266, 1195886990, 4042263547, 2913856577, 3570689971, 2728590687, 2947541573, 2627518243, 2762274643, 1920112356, 3233831835, 3082273397, 4261223649, 2475929149, 640051788, 909531756, 1061110142, 4160160501, 3435941763, 875846760, 2779116625, 3857003729, 4059105529, 1903268834, 3638064043, 825316194, 353713962, 67374088, 3351728789, 589522246, 3284360861, 404236336, 2526454071, 84217610, 2593830191, 117901582, 303183396, 2155911963, 3806477791, 3958056653, 656894286, 2998062463, 1970642922, 151591698, 2206440989, 741110872, 437923380, 454765878, 1852748508, 1515908788, 2694904667, 1381168804, 993742198, 3604373943, 3014905469, 690584402, 3823320797, 791638366, 2223281939, 1398011302, 3520161977, 0, 3991743681, 538992704, 4244381667, 2981218425, 1532751286, 1785380564, 3419096717, 3200178535, 960056178, 1246420628, 1280103576, 1482221744, 3486468741, 3503319995, 4025428677, 2863326543, 4227536621, 1128514950, 1296947098, 859002214, 2240123921, 1162203018, 4193849577, 33687044, 2139062782, 1347481760, 1010582648, 2678045221, 2829640523, 1364325282, 2745433693, 1077985408, 2408548869, 2459086143, 2644360225, 943212656, 4126475505, 3166494563, 3065430391, 3671750063, 555836226, 269496352, 4294908645, 4092792573, 3537006015, 3452783745, 202118168, 320025894, 3974901699, 1600119230, 2543297077, 1145359496, 387397934, 3301201811, 2812801621, 2122220284, 1027426170, 1684319432, 1566435258, 421079858, 1936954854, 1616945344, 2172753945, 1330631070, 3705438115, 572679748, 707427924, 2425400123, 2290647819, 1179044492, 4008585671, 3099120491, 336870440, 3739122087, 1583276732, 185277718, 3688593069, 3772791771, 842159716, 976899700, 168435220, 1229577106, 101059084, 606366792, 1549591736, 3267517855, 3553849021, 2897014595, 1650632388, 2442242105, 2509612081, 3840161747, 2038008818, 3890688725, 3368567691, 926374254, 1835907034, 2374863873, 3587531953, 1313788572, 2846482505, 1819063512, 1448540844, 4109633523, 3941213647, 1701162954, 2054852340, 2930698567, 134748176, 3132806511, 2021165296, 623210314, 774795868, 471606328, 2795958615, 3031746419, 3334885783, 3907527627, 3722280097, 1953799400, 522133822, 1263263126, 3183336545, 2341176845, 2324333839, 1886425312, 1044267644, 3048588401, 1718004428, 1212733584, 50529542, 4143317495, 235803164, 1633788866, 892690282, 1465383342, 3115962473, 2256965911, 3250673817, 488449850, 2661202215, 3789633753, 4177007595, 2560144171, 286339874, 1768537042, 3654906025, 2391705863, 2492770099, 2610673197, 505291324, 2273808917, 3924369609, 3469625735, 1431699370, 673740880, 3755965093, 2358021891, 2711746649, 2307489801, 218961690, 3217021541, 3873845719, 1111672452, 1751693520, 1094828930, 2576986153, 757954394, 252645662, 2964376443, 1414855848, 3149649517, 370555436], d4 = [1374988112, 2118214995, 437757123, 975658646, 1001089995, 530400753, 2902087851, 1273168787, 540080725, 2910219766, 2295101073, 4110568485, 1340463100, 3307916247, 641025152, 3043140495, 3736164937, 632953703, 1172967064, 1576976609, 3274667266, 2169303058, 2370213795, 1809054150, 59727847, 361929877, 3211623147, 2505202138, 3569255213, 1484005843, 1239443753, 2395588676, 1975683434, 4102977912, 2572697195, 666464733, 3202437046, 4035489047, 3374361702, 2110667444, 1675577880, 3843699074, 2538681184, 1649639237, 2976151520, 3144396420, 4269907996, 4178062228, 1883793496, 2403728665, 2497604743, 1383856311, 2876494627, 1917518562, 3810496343, 1716890410, 3001755655, 800440835, 2261089178, 3543599269, 807962610, 599762354, 33778362, 3977675356, 2328828971, 2809771154, 4077384432, 1315562145, 1708848333, 101039829, 3509871135, 3299278474, 875451293, 2733856160, 92987698, 2767645557, 193195065, 1080094634, 1584504582, 3178106961, 1042385657, 2531067453, 3711829422, 1306967366, 2438237621, 1908694277, 67556463, 1615861247, 429456164, 3602770327, 2302690252, 1742315127, 2968011453, 126454664, 3877198648, 2043211483, 2709260871, 2084704233, 4169408201, 0, 159417987, 841739592, 504459436, 1817866830, 4245618683, 260388950, 1034867998, 908933415, 168810852, 1750902305, 2606453969, 607530554, 202008497, 2472011535, 3035535058, 463180190, 2160117071, 1641816226, 1517767529, 470948374, 3801332234, 3231722213, 1008918595, 303765277, 235474187, 4069246893, 766945465, 337553864, 1475418501, 2943682380, 4003061179, 2743034109, 4144047775, 1551037884, 1147550661, 1543208500, 2336434550, 3408119516, 3069049960, 3102011747, 3610369226, 1113818384, 328671808, 2227573024, 2236228733, 3535486456, 2935566865, 3341394285, 496906059, 3702665459, 226906860, 2009195472, 733156972, 2842737049, 294930682, 1206477858, 2835123396, 2700099354, 1451044056, 573804783, 2269728455, 3644379585, 2362090238, 2564033334, 2801107407, 2776292904, 3669462566, 1068351396, 742039012, 1350078989, 1784663195, 1417561698, 4136440770, 2430122216, 775550814, 2193862645, 2673705150, 1775276924, 1876241833, 3475313331, 3366754619, 270040487, 3902563182, 3678124923, 3441850377, 1851332852, 3969562369, 2203032232, 3868552805, 2868897406, 566021896, 4011190502, 3135740889, 1248802510, 3936291284, 699432150, 832877231, 708780849, 3332740144, 899835584, 1951317047, 4236429990, 3767586992, 866637845, 4043610186, 1106041591, 2144161806, 395441711, 1984812685, 1139781709, 3433712980, 3835036895, 2664543715, 1282050075, 3240894392, 1181045119, 2640243204, 25965917, 4203181171, 4211818798, 3009879386, 2463879762, 3910161971, 1842759443, 2597806476, 933301370, 1509430414, 3943906441, 3467192302, 3076639029, 3776767469, 2051518780, 2631065433, 1441952575, 404016761, 1942435775, 1408749034, 1610459739, 3745345300, 2017778566, 3400528769, 3110650942, 941896748, 3265478751, 371049330, 3168937228, 675039627, 4279080257, 967311729, 135050206, 3635733660, 1683407248, 2076935265, 3576870512, 1215061108, 3501741890], f4 = [1347548327, 1400783205, 3273267108, 2520393566, 3409685355, 4045380933, 2880240216, 2471224067, 1428173050, 4138563181, 2441661558, 636813900, 4233094615, 3620022987, 2149987652, 2411029155, 1239331162, 1730525723, 2554718734, 3781033664, 46346101, 310463728, 2743944855, 3328955385, 3875770207, 2501218972, 3955191162, 3667219033, 768917123, 3545789473, 692707433, 1150208456, 1786102409, 2029293177, 1805211710, 3710368113, 3065962831, 401639597, 1724457132, 3028143674, 409198410, 2196052529, 1620529459, 1164071807, 3769721975, 2226875310, 486441376, 2499348523, 1483753576, 428819965, 2274680428, 3075636216, 598438867, 3799141122, 1474502543, 711349675, 129166120, 53458370, 2592523643, 2782082824, 4063242375, 2988687269, 3120694122, 1559041666, 730517276, 2460449204, 4042459122, 2706270690, 3446004468, 3573941694, 533804130, 2328143614, 2637442643, 2695033685, 839224033, 1973745387, 957055980, 2856345839, 106852767, 1371368976, 4181598602, 1033297158, 2933734917, 1179510461, 3046200461, 91341917, 1862534868, 4284502037, 605657339, 2547432937, 3431546947, 2003294622, 3182487618, 2282195339, 954669403, 3682191598, 1201765386, 3917234703, 3388507166, 0, 2198438022, 1211247597, 2887651696, 1315723890, 4227665663, 1443857720, 507358933, 657861945, 1678381017, 560487590, 3516619604, 975451694, 2970356327, 261314535, 3535072918, 2652609425, 1333838021, 2724322336, 1767536459, 370938394, 182621114, 3854606378, 1128014560, 487725847, 185469197, 2918353863, 3106780840, 3356761769, 2237133081, 1286567175, 3152976349, 4255350624, 2683765030, 3160175349, 3309594171, 878443390, 1988838185, 3704300486, 1756818940, 1673061617, 3403100636, 272786309, 1075025698, 545572369, 2105887268, 4174560061, 296679730, 1841768865, 1260232239, 4091327024, 3960309330, 3497509347, 1814803222, 2578018489, 4195456072, 575138148, 3299409036, 446754879, 3629546796, 4011996048, 3347532110, 3252238545, 4270639778, 915985419, 3483825537, 681933534, 651868046, 2755636671, 3828103837, 223377554, 2607439820, 1649704518, 3270937875, 3901806776, 1580087799, 4118987695, 3198115200, 2087309459, 2842678573, 3016697106, 1003007129, 2802849917, 1860738147, 2077965243, 164439672, 4100872472, 32283319, 2827177882, 1709610350, 2125135846, 136428751, 3874428392, 3652904859, 3460984630, 3572145929, 3593056380, 2939266226, 824852259, 818324884, 3224740454, 930369212, 2801566410, 2967507152, 355706840, 1257309336, 4148292826, 243256656, 790073846, 2373340630, 1296297904, 1422699085, 3756299780, 3818836405, 457992840, 3099667487, 2135319889, 77422314, 1560382517, 1945798516, 788204353, 1521706781, 1385356242, 870912086, 325965383, 2358957921, 2050466060, 2388260884, 2313884476, 4006521127, 901210569, 3990953189, 1014646705, 1503449823, 1062597235, 2031621326, 3212035895, 3931371469, 1533017514, 350174575, 2256028891, 2177544179, 1052338372, 741876788, 1606591296, 1914052035, 213705253, 2334669897, 1107234197, 1899603969, 3725069491, 2631447780, 2422494913, 1635502980, 1893020342, 1950903388, 1120974935], p4 = [2807058932, 1699970625, 2764249623, 1586903591, 1808481195, 1173430173, 1487645946, 59984867, 4199882800, 1844882806, 1989249228, 1277555970, 3623636965, 3419915562, 1149249077, 2744104290, 1514790577, 459744698, 244860394, 3235995134, 1963115311, 4027744588, 2544078150, 4190530515, 1608975247, 2627016082, 2062270317, 1507497298, 2200818878, 567498868, 1764313568, 3359936201, 2305455554, 2037970062, 1047239e3, 1910319033, 1337376481, 2904027272, 2892417312, 984907214, 1243112415, 830661914, 861968209, 2135253587, 2011214180, 2927934315, 2686254721, 731183368, 1750626376, 4246310725, 1820824798, 4172763771, 3542330227, 48394827, 2404901663, 2871682645, 671593195, 3254988725, 2073724613, 145085239, 2280796200, 2779915199, 1790575107, 2187128086, 472615631, 3029510009, 4075877127, 3802222185, 4107101658, 3201631749, 1646252340, 4270507174, 1402811438, 1436590835, 3778151818, 3950355702, 3963161475, 4020912224, 2667994737, 273792366, 2331590177, 104699613, 95345982, 3175501286, 2377486676, 1560637892, 3564045318, 369057872, 4213447064, 3919042237, 1137477952, 2658625497, 1119727848, 2340947849, 1530455833, 4007360968, 172466556, 266959938, 516552836, 0, 2256734592, 3980931627, 1890328081, 1917742170, 4294704398, 945164165, 3575528878, 958871085, 3647212047, 2787207260, 1423022939, 775562294, 1739656202, 3876557655, 2530391278, 2443058075, 3310321856, 547512796, 1265195639, 437656594, 3121275539, 719700128, 3762502690, 387781147, 218828297, 3350065803, 2830708150, 2848461854, 428169201, 122466165, 3720081049, 1627235199, 648017665, 4122762354, 1002783846, 2117360635, 695634755, 3336358691, 4234721005, 4049844452, 3704280881, 2232435299, 574624663, 287343814, 612205898, 1039717051, 840019705, 2708326185, 793451934, 821288114, 1391201670, 3822090177, 376187827, 3113855344, 1224348052, 1679968233, 2361698556, 1058709744, 752375421, 2431590963, 1321699145, 3519142200, 2734591178, 188127444, 2177869557, 3727205754, 2384911031, 3215212461, 2648976442, 2450346104, 3432737375, 1180849278, 331544205, 3102249176, 4150144569, 2952102595, 2159976285, 2474404304, 766078933, 313773861, 2570832044, 2108100632, 1668212892, 3145456443, 2013908262, 418672217, 3070356634, 2594734927, 1852171925, 3867060991, 3473416636, 3907448597, 2614737639, 919489135, 164948639, 2094410160, 2997825956, 590424639, 2486224549, 1723872674, 3157750862, 3399941250, 3501252752, 3625268135, 2555048196, 3673637356, 1343127501, 4130281361, 3599595085, 2957853679, 1297403050, 81781910, 3051593425, 2283490410, 532201772, 1367295589, 3926170974, 895287692, 1953757831, 1093597963, 492483431, 3528626907, 1446242576, 1192455638, 1636604631, 209336225, 344873464, 1015671571, 669961897, 3375740769, 3857572124, 2973530695, 3747192018, 1933530610, 3464042516, 935293895, 3454686199, 2858115069, 1863638845, 3683022916, 4085369519, 3292445032, 875313188, 1080017571, 3279033885, 621591778, 1233856572, 2504130317, 24197544, 3017672716, 3835484340, 3247465558, 2220981195, 3060847922, 1551124588, 1463996600], h4 = [4104605777, 1097159550, 396673818, 660510266, 2875968315, 2638606623, 4200115116, 3808662347, 821712160, 1986918061, 3430322568, 38544885, 3856137295, 718002117, 893681702, 1654886325, 2975484382, 3122358053, 3926825029, 4274053469, 796197571, 1290801793, 1184342925, 3556361835, 2405426947, 2459735317, 1836772287, 1381620373, 3196267988, 1948373848, 3764988233, 3385345166, 3263785589, 2390325492, 1480485785, 3111247143, 3780097726, 2293045232, 548169417, 3459953789, 3746175075, 439452389, 1362321559, 1400849762, 1685577905, 1806599355, 2174754046, 137073913, 1214797936, 1174215055, 3731654548, 2079897426, 1943217067, 1258480242, 529487843, 1437280870, 3945269170, 3049390895, 3313212038, 923313619, 679998e3, 3215307299, 57326082, 377642221, 3474729866, 2041877159, 133361907, 1776460110, 3673476453, 96392454, 878845905, 2801699524, 777231668, 4082475170, 2330014213, 4142626212, 2213296395, 1626319424, 1906247262, 1846563261, 562755902, 3708173718, 1040559837, 3871163981, 1418573201, 3294430577, 114585348, 1343618912, 2566595609, 3186202582, 1078185097, 3651041127, 3896688048, 2307622919, 425408743, 3371096953, 2081048481, 1108339068, 2216610296, 0, 2156299017, 736970802, 292596766, 1517440620, 251657213, 2235061775, 2933202493, 758720310, 265905162, 1554391400, 1532285339, 908999204, 174567692, 1474760595, 4002861748, 2610011675, 3234156416, 3693126241, 2001430874, 303699484, 2478443234, 2687165888, 585122620, 454499602, 151849742, 2345119218, 3064510765, 514443284, 4044981591, 1963412655, 2581445614, 2137062819, 19308535, 1928707164, 1715193156, 4219352155, 1126790795, 600235211, 3992742070, 3841024952, 836553431, 1669664834, 2535604243, 3323011204, 1243905413, 3141400786, 4180808110, 698445255, 2653899549, 2989552604, 2253581325, 3252932727, 3004591147, 1891211689, 2487810577, 3915653703, 4237083816, 4030667424, 2100090966, 865136418, 1229899655, 953270745, 3399679628, 3557504664, 4118925222, 2061379749, 3079546586, 2915017791, 983426092, 2022837584, 1607244650, 2118541908, 2366882550, 3635996816, 972512814, 3283088770, 1568718495, 3499326569, 3576539503, 621982671, 2895723464, 410887952, 2623762152, 1002142683, 645401037, 1494807662, 2595684844, 1335535747, 2507040230, 4293295786, 3167684641, 367585007, 3885750714, 1865862730, 2668221674, 2960971305, 2763173681, 1059270954, 2777952454, 2724642869, 1320957812, 2194319100, 2429595872, 2815956275, 77089521, 3973773121, 3444575871, 2448830231, 1305906550, 4021308739, 2857194700, 2516901860, 3518358430, 1787304780, 740276417, 1699839814, 1592394909, 2352307457, 2272556026, 188821243, 1729977011, 3687994002, 274084841, 3594982253, 3613494426, 2701949495, 4162096729, 322734571, 2837966542, 1640576439, 484830689, 1202797690, 3537852828, 4067639125, 349075736, 3342319475, 4157467219, 4255800159, 1030690015, 1155237496, 2951971274, 1757691577, 607398968, 2738905026, 499347990, 3794078908, 1011452712, 227885567, 2818666809, 213114376, 3034881240, 1455525988, 3414450555, 850817237, 1817998408, 3092726480], y4 = [0, 235474187, 470948374, 303765277, 941896748, 908933415, 607530554, 708780849, 1883793496, 2118214995, 1817866830, 1649639237, 1215061108, 1181045119, 1417561698, 1517767529, 3767586992, 4003061179, 4236429990, 4069246893, 3635733660, 3602770327, 3299278474, 3400528769, 2430122216, 2664543715, 2362090238, 2193862645, 2835123396, 2801107407, 3035535058, 3135740889, 3678124923, 3576870512, 3341394285, 3374361702, 3810496343, 3977675356, 4279080257, 4043610186, 2876494627, 2776292904, 3076639029, 3110650942, 2472011535, 2640243204, 2403728665, 2169303058, 1001089995, 899835584, 666464733, 699432150, 59727847, 226906860, 530400753, 294930682, 1273168787, 1172967064, 1475418501, 1509430414, 1942435775, 2110667444, 1876241833, 1641816226, 2910219766, 2743034109, 2976151520, 3211623147, 2505202138, 2606453969, 2302690252, 2269728455, 3711829422, 3543599269, 3240894392, 3475313331, 3843699074, 3943906441, 4178062228, 4144047775, 1306967366, 1139781709, 1374988112, 1610459739, 1975683434, 2076935265, 1775276924, 1742315127, 1034867998, 866637845, 566021896, 800440835, 92987698, 193195065, 429456164, 395441711, 1984812685, 2017778566, 1784663195, 1683407248, 1315562145, 1080094634, 1383856311, 1551037884, 101039829, 135050206, 437757123, 337553864, 1042385657, 807962610, 573804783, 742039012, 2531067453, 2564033334, 2328828971, 2227573024, 2935566865, 2700099354, 3001755655, 3168937228, 3868552805, 3902563182, 4203181171, 4102977912, 3736164937, 3501741890, 3265478751, 3433712980, 1106041591, 1340463100, 1576976609, 1408749034, 2043211483, 2009195472, 1708848333, 1809054150, 832877231, 1068351396, 766945465, 599762354, 159417987, 126454664, 361929877, 463180190, 2709260871, 2943682380, 3178106961, 3009879386, 2572697195, 2538681184, 2236228733, 2336434550, 3509871135, 3745345300, 3441850377, 3274667266, 3910161971, 3877198648, 4110568485, 4211818798, 2597806476, 2497604743, 2261089178, 2295101073, 2733856160, 2902087851, 3202437046, 2968011453, 3936291284, 3835036895, 4136440770, 4169408201, 3535486456, 3702665459, 3467192302, 3231722213, 2051518780, 1951317047, 1716890410, 1750902305, 1113818384, 1282050075, 1584504582, 1350078989, 168810852, 67556463, 371049330, 404016761, 841739592, 1008918595, 775550814, 540080725, 3969562369, 3801332234, 4035489047, 4269907996, 3569255213, 3669462566, 3366754619, 3332740144, 2631065433, 2463879762, 2160117071, 2395588676, 2767645557, 2868897406, 3102011747, 3069049960, 202008497, 33778362, 270040487, 504459436, 875451293, 975658646, 675039627, 641025152, 2084704233, 1917518562, 1615861247, 1851332852, 1147550661, 1248802510, 1484005843, 1451044056, 933301370, 967311729, 733156972, 632953703, 260388950, 25965917, 328671808, 496906059, 1206477858, 1239443753, 1543208500, 1441952575, 2144161806, 1908694277, 1675577880, 1842759443, 3610369226, 3644379585, 3408119516, 3307916247, 4011190502, 3776767469, 4077384432, 4245618683, 2809771154, 2842737049, 3144396420, 3043140495, 2673705150, 2438237621, 2203032232, 2370213795], m4 = [0, 185469197, 370938394, 487725847, 741876788, 657861945, 975451694, 824852259, 1483753576, 1400783205, 1315723890, 1164071807, 1950903388, 2135319889, 1649704518, 1767536459, 2967507152, 3152976349, 2801566410, 2918353863, 2631447780, 2547432937, 2328143614, 2177544179, 3901806776, 3818836405, 4270639778, 4118987695, 3299409036, 3483825537, 3535072918, 3652904859, 2077965243, 1893020342, 1841768865, 1724457132, 1474502543, 1559041666, 1107234197, 1257309336, 598438867, 681933534, 901210569, 1052338372, 261314535, 77422314, 428819965, 310463728, 3409685355, 3224740454, 3710368113, 3593056380, 3875770207, 3960309330, 4045380933, 4195456072, 2471224067, 2554718734, 2237133081, 2388260884, 3212035895, 3028143674, 2842678573, 2724322336, 4138563181, 4255350624, 3769721975, 3955191162, 3667219033, 3516619604, 3431546947, 3347532110, 2933734917, 2782082824, 3099667487, 3016697106, 2196052529, 2313884476, 2499348523, 2683765030, 1179510461, 1296297904, 1347548327, 1533017514, 1786102409, 1635502980, 2087309459, 2003294622, 507358933, 355706840, 136428751, 53458370, 839224033, 957055980, 605657339, 790073846, 2373340630, 2256028891, 2607439820, 2422494913, 2706270690, 2856345839, 3075636216, 3160175349, 3573941694, 3725069491, 3273267108, 3356761769, 4181598602, 4063242375, 4011996048, 3828103837, 1033297158, 915985419, 730517276, 545572369, 296679730, 446754879, 129166120, 213705253, 1709610350, 1860738147, 1945798516, 2029293177, 1239331162, 1120974935, 1606591296, 1422699085, 4148292826, 4233094615, 3781033664, 3931371469, 3682191598, 3497509347, 3446004468, 3328955385, 2939266226, 2755636671, 3106780840, 2988687269, 2198438022, 2282195339, 2501218972, 2652609425, 1201765386, 1286567175, 1371368976, 1521706781, 1805211710, 1620529459, 2105887268, 1988838185, 533804130, 350174575, 164439672, 46346101, 870912086, 954669403, 636813900, 788204353, 2358957921, 2274680428, 2592523643, 2441661558, 2695033685, 2880240216, 3065962831, 3182487618, 3572145929, 3756299780, 3270937875, 3388507166, 4174560061, 4091327024, 4006521127, 3854606378, 1014646705, 930369212, 711349675, 560487590, 272786309, 457992840, 106852767, 223377554, 1678381017, 1862534868, 1914052035, 2031621326, 1211247597, 1128014560, 1580087799, 1428173050, 32283319, 182621114, 401639597, 486441376, 768917123, 651868046, 1003007129, 818324884, 1503449823, 1385356242, 1333838021, 1150208456, 1973745387, 2125135846, 1673061617, 1756818940, 2970356327, 3120694122, 2802849917, 2887651696, 2637442643, 2520393566, 2334669897, 2149987652, 3917234703, 3799141122, 4284502037, 4100872472, 3309594171, 3460984630, 3545789473, 3629546796, 2050466060, 1899603969, 1814803222, 1730525723, 1443857720, 1560382517, 1075025698, 1260232239, 575138148, 692707433, 878443390, 1062597235, 243256656, 91341917, 409198410, 325965383, 3403100636, 3252238545, 3704300486, 3620022987, 3874428392, 3990953189, 4042459122, 4227665663, 2460449204, 2578018489, 2226875310, 2411029155, 3198115200, 3046200461, 2827177882, 2743944855], b4 = [0, 218828297, 437656594, 387781147, 875313188, 958871085, 775562294, 590424639, 1750626376, 1699970625, 1917742170, 2135253587, 1551124588, 1367295589, 1180849278, 1265195639, 3501252752, 3720081049, 3399941250, 3350065803, 3835484340, 3919042237, 4270507174, 4085369519, 3102249176, 3051593425, 2734591178, 2952102595, 2361698556, 2177869557, 2530391278, 2614737639, 3145456443, 3060847922, 2708326185, 2892417312, 2404901663, 2187128086, 2504130317, 2555048196, 3542330227, 3727205754, 3375740769, 3292445032, 3876557655, 3926170974, 4246310725, 4027744588, 1808481195, 1723872674, 1910319033, 2094410160, 1608975247, 1391201670, 1173430173, 1224348052, 59984867, 244860394, 428169201, 344873464, 935293895, 984907214, 766078933, 547512796, 1844882806, 1627235199, 2011214180, 2062270317, 1507497298, 1423022939, 1137477952, 1321699145, 95345982, 145085239, 532201772, 313773861, 830661914, 1015671571, 731183368, 648017665, 3175501286, 2957853679, 2807058932, 2858115069, 2305455554, 2220981195, 2474404304, 2658625497, 3575528878, 3625268135, 3473416636, 3254988725, 3778151818, 3963161475, 4213447064, 4130281361, 3599595085, 3683022916, 3432737375, 3247465558, 3802222185, 4020912224, 4172763771, 4122762354, 3201631749, 3017672716, 2764249623, 2848461854, 2331590177, 2280796200, 2431590963, 2648976442, 104699613, 188127444, 472615631, 287343814, 840019705, 1058709744, 671593195, 621591778, 1852171925, 1668212892, 1953757831, 2037970062, 1514790577, 1463996600, 1080017571, 1297403050, 3673637356, 3623636965, 3235995134, 3454686199, 4007360968, 3822090177, 4107101658, 4190530515, 2997825956, 3215212461, 2830708150, 2779915199, 2256734592, 2340947849, 2627016082, 2443058075, 172466556, 122466165, 273792366, 492483431, 1047239e3, 861968209, 612205898, 695634755, 1646252340, 1863638845, 2013908262, 1963115311, 1446242576, 1530455833, 1277555970, 1093597963, 1636604631, 1820824798, 2073724613, 1989249228, 1436590835, 1487645946, 1337376481, 1119727848, 164948639, 81781910, 331544205, 516552836, 1039717051, 821288114, 669961897, 719700128, 2973530695, 3157750862, 2871682645, 2787207260, 2232435299, 2283490410, 2667994737, 2450346104, 3647212047, 3564045318, 3279033885, 3464042516, 3980931627, 3762502690, 4150144569, 4199882800, 3070356634, 3121275539, 2904027272, 2686254721, 2200818878, 2384911031, 2570832044, 2486224549, 3747192018, 3528626907, 3310321856, 3359936201, 3950355702, 3867060991, 4049844452, 4234721005, 1739656202, 1790575107, 2108100632, 1890328081, 1402811438, 1586903591, 1233856572, 1149249077, 266959938, 48394827, 369057872, 418672217, 1002783846, 919489135, 567498868, 752375421, 209336225, 24197544, 376187827, 459744698, 945164165, 895287692, 574624663, 793451934, 1679968233, 1764313568, 2117360635, 1933530610, 1343127501, 1560637892, 1243112415, 1192455638, 3704280881, 3519142200, 3336358691, 3419915562, 3907448597, 3857572124, 4075877127, 4294704398, 3029510009, 3113855344, 2927934315, 2744104290, 2159976285, 2377486676, 2594734927, 2544078150], x4 = [0, 151849742, 303699484, 454499602, 607398968, 758720310, 908999204, 1059270954, 1214797936, 1097159550, 1517440620, 1400849762, 1817998408, 1699839814, 2118541908, 2001430874, 2429595872, 2581445614, 2194319100, 2345119218, 3034881240, 3186202582, 2801699524, 2951971274, 3635996816, 3518358430, 3399679628, 3283088770, 4237083816, 4118925222, 4002861748, 3885750714, 1002142683, 850817237, 698445255, 548169417, 529487843, 377642221, 227885567, 77089521, 1943217067, 2061379749, 1640576439, 1757691577, 1474760595, 1592394909, 1174215055, 1290801793, 2875968315, 2724642869, 3111247143, 2960971305, 2405426947, 2253581325, 2638606623, 2487810577, 3808662347, 3926825029, 4044981591, 4162096729, 3342319475, 3459953789, 3576539503, 3693126241, 1986918061, 2137062819, 1685577905, 1836772287, 1381620373, 1532285339, 1078185097, 1229899655, 1040559837, 923313619, 740276417, 621982671, 439452389, 322734571, 137073913, 19308535, 3871163981, 4021308739, 4104605777, 4255800159, 3263785589, 3414450555, 3499326569, 3651041127, 2933202493, 2815956275, 3167684641, 3049390895, 2330014213, 2213296395, 2566595609, 2448830231, 1305906550, 1155237496, 1607244650, 1455525988, 1776460110, 1626319424, 2079897426, 1928707164, 96392454, 213114376, 396673818, 514443284, 562755902, 679998e3, 865136418, 983426092, 3708173718, 3557504664, 3474729866, 3323011204, 4180808110, 4030667424, 3945269170, 3794078908, 2507040230, 2623762152, 2272556026, 2390325492, 2975484382, 3092726480, 2738905026, 2857194700, 3973773121, 3856137295, 4274053469, 4157467219, 3371096953, 3252932727, 3673476453, 3556361835, 2763173681, 2915017791, 3064510765, 3215307299, 2156299017, 2307622919, 2459735317, 2610011675, 2081048481, 1963412655, 1846563261, 1729977011, 1480485785, 1362321559, 1243905413, 1126790795, 878845905, 1030690015, 645401037, 796197571, 274084841, 425408743, 38544885, 188821243, 3613494426, 3731654548, 3313212038, 3430322568, 4082475170, 4200115116, 3780097726, 3896688048, 2668221674, 2516901860, 2366882550, 2216610296, 3141400786, 2989552604, 2837966542, 2687165888, 1202797690, 1320957812, 1437280870, 1554391400, 1669664834, 1787304780, 1906247262, 2022837584, 265905162, 114585348, 499347990, 349075736, 736970802, 585122620, 972512814, 821712160, 2595684844, 2478443234, 2293045232, 2174754046, 3196267988, 3079546586, 2895723464, 2777952454, 3537852828, 3687994002, 3234156416, 3385345166, 4142626212, 4293295786, 3841024952, 3992742070, 174567692, 57326082, 410887952, 292596766, 777231668, 660510266, 1011452712, 893681702, 1108339068, 1258480242, 1343618912, 1494807662, 1715193156, 1865862730, 1948373848, 2100090966, 2701949495, 2818666809, 3004591147, 3122358053, 2235061775, 2352307457, 2535604243, 2653899549, 3915653703, 3764988233, 4219352155, 4067639125, 3444575871, 3294430577, 3746175075, 3594982253, 836553431, 953270745, 600235211, 718002117, 367585007, 484830689, 133361907, 251657213, 2041877159, 1891211689, 1806599355, 1654886325, 1568718495, 1418573201, 1335535747, 1184342925];
function Kl(n) {
  const e = [];
  for (let t = 0; t < n.length; t += 4)
    e.push(n[t] << 24 | n[t + 1] << 16 | n[t + 2] << 8 | n[t + 3]);
  return e;
}
class n0 {
  get key() {
    return De(this, Kc, "f").slice();
  }
  constructor(e) {
    if (Kc.set(this, void 0), Nt.set(this, void 0), fn.set(this, void 0), !(this instanceof n0))
      throw Error("AES must be instanitated with `new`");
    Wl(this, Kc, new Uint8Array(e), "f");
    const t = s4[this.key.length];
    if (t == null)
      throw new TypeError("invalid key size (must be 16, 24 or 32 bytes)");
    Wl(this, fn, [], "f"), Wl(this, Nt, [], "f");
    for (let l = 0; l <= t; l++)
      De(this, fn, "f").push([0, 0, 0, 0]), De(this, Nt, "f").push([0, 0, 0, 0]);
    const r = (t + 1) * 4, i = this.key.length / 4, s = Kl(this.key);
    let a;
    for (let l = 0; l < i; l++)
      a = l >> 2, De(this, fn, "f")[a][l % 4] = s[l], De(this, Nt, "f")[t - a][l % 4] = s[l];
    let o = 0, c = i, u;
    for (; c < r; ) {
      if (u = s[i - 1], s[0] ^= St[u >> 16 & 255] << 24 ^ St[u >> 8 & 255] << 16 ^ St[u & 255] << 8 ^ St[u >> 24 & 255] ^ a4[o] << 24, o += 1, i != 8)
        for (let p = 1; p < i; p++)
          s[p] ^= s[p - 1];
      else {
        for (let p = 1; p < i / 2; p++)
          s[p] ^= s[p - 1];
        u = s[i / 2 - 1], s[i / 2] ^= St[u & 255] ^ St[u >> 8 & 255] << 8 ^ St[u >> 16 & 255] << 16 ^ St[u >> 24 & 255] << 24;
        for (let p = i / 2 + 1; p < i; p++)
          s[p] ^= s[p - 1];
      }
      let l = 0, d, f;
      for (; l < i && c < r; )
        d = c >> 2, f = c % 4, De(this, fn, "f")[d][f] = s[l], De(this, Nt, "f")[t - d][f] = s[l++], c++;
    }
    for (let l = 1; l < t; l++)
      for (let d = 0; d < 4; d++)
        u = De(this, Nt, "f")[l][d], De(this, Nt, "f")[l][d] = y4[u >> 24 & 255] ^ m4[u >> 16 & 255] ^ b4[u >> 8 & 255] ^ x4[u & 255];
  }
  encrypt(e) {
    if (e.length != 16)
      throw new TypeError("invalid plaintext size (must be 16 bytes)");
    const t = De(this, fn, "f").length - 1, r = [0, 0, 0, 0];
    let i = Kl(e);
    for (let o = 0; o < 4; o++)
      i[o] ^= De(this, fn, "f")[0][o];
    for (let o = 1; o < t; o++) {
      for (let c = 0; c < 4; c++)
        r[c] = o4[i[c] >> 24 & 255] ^ c4[i[(c + 1) % 4] >> 16 & 255] ^ u4[i[(c + 2) % 4] >> 8 & 255] ^ l4[i[(c + 3) % 4] & 255] ^ De(this, fn, "f")[o][c];
      i = r.slice();
    }
    const s = new Uint8Array(16);
    let a = 0;
    for (let o = 0; o < 4; o++)
      a = De(this, fn, "f")[t][o], s[4 * o] = (St[i[o] >> 24 & 255] ^ a >> 24) & 255, s[4 * o + 1] = (St[i[(o + 1) % 4] >> 16 & 255] ^ a >> 16) & 255, s[4 * o + 2] = (St[i[(o + 2) % 4] >> 8 & 255] ^ a >> 8) & 255, s[4 * o + 3] = (St[i[(o + 3) % 4] & 255] ^ a) & 255;
    return s;
  }
  decrypt(e) {
    if (e.length != 16)
      throw new TypeError("invalid ciphertext size (must be 16 bytes)");
    const t = De(this, Nt, "f").length - 1, r = [0, 0, 0, 0];
    let i = Kl(e);
    for (let o = 0; o < 4; o++)
      i[o] ^= De(this, Nt, "f")[0][o];
    for (let o = 1; o < t; o++) {
      for (let c = 0; c < 4; c++)
        r[c] = d4[i[c] >> 24 & 255] ^ f4[i[(c + 3) % 4] >> 16 & 255] ^ p4[i[(c + 2) % 4] >> 8 & 255] ^ h4[i[(c + 1) % 4] & 255] ^ De(this, Nt, "f")[o][c];
      i = r.slice();
    }
    const s = new Uint8Array(16);
    let a = 0;
    for (let o = 0; o < 4; o++)
      a = De(this, Nt, "f")[t][o], s[4 * o] = (Cc[i[o] >> 24 & 255] ^ a >> 24) & 255, s[4 * o + 1] = (Cc[i[(o + 3) % 4] >> 16 & 255] ^ a >> 16) & 255, s[4 * o + 2] = (Cc[i[(o + 2) % 4] >> 8 & 255] ^ a >> 8) & 255, s[4 * o + 3] = (Cc[i[(o + 1) % 4] & 255] ^ a) & 255;
    return s;
  }
}
Kc = /* @__PURE__ */ new WeakMap(), Nt = /* @__PURE__ */ new WeakMap(), fn = /* @__PURE__ */ new WeakMap();
class Gx {
  constructor(e, t, r) {
    if (r && !(this instanceof r))
      throw new Error(`${e} must be instantiated with "new"`);
    Object.defineProperties(this, {
      aes: { enumerable: !0, value: new n0(t) },
      name: { enumerable: !0, value: e }
    });
  }
}
var Oc = function(n, e, t, r, i) {
  if (r === "m") throw new TypeError("Private method is not writable");
  if (r === "a" && !i) throw new TypeError("Private accessor was defined without a setter");
  if (typeof e == "function" ? n !== e || !i : !e.has(n)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return r === "a" ? i.call(n, t) : i ? i.value = t : e.set(n, t), t;
}, os = function(n, e, t, r) {
  if (t === "a" && !r) throw new TypeError("Private accessor was defined without a getter");
  if (typeof e == "function" ? n !== e || !r : !e.has(n)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return t === "m" ? r : t === "a" ? r.call(n) : r ? r.value : e.get(n);
}, Za, Un;
class r0 extends Gx {
  constructor(e, t) {
    if (super("ECC", e, r0), Za.set(this, void 0), Un.set(this, void 0), t) {
      if (t.length % 16)
        throw new TypeError("invalid iv size (must be 16 bytes)");
      Oc(this, Za, new Uint8Array(t), "f");
    } else
      Oc(this, Za, new Uint8Array(16), "f");
    Oc(this, Un, this.iv, "f");
  }
  get iv() {
    return new Uint8Array(os(this, Za, "f"));
  }
  encrypt(e) {
    if (e.length % 16)
      throw new TypeError("invalid plaintext size (must be multiple of 16 bytes)");
    const t = new Uint8Array(e.length);
    for (let r = 0; r < e.length; r += 16) {
      for (let i = 0; i < 16; i++)
        os(this, Un, "f")[i] ^= e[r + i];
      Oc(this, Un, this.aes.encrypt(os(this, Un, "f")), "f"), t.set(os(this, Un, "f"), r);
    }
    return t;
  }
  decrypt(e) {
    if (e.length % 16)
      throw new TypeError("invalid ciphertext size (must be multiple of 16 bytes)");
    const t = new Uint8Array(e.length);
    for (let r = 0; r < e.length; r += 16) {
      const i = this.aes.decrypt(e.subarray(r, r + 16));
      for (let s = 0; s < 16; s++)
        t[r + s] = i[s] ^ os(this, Un, "f")[s], os(this, Un, "f")[s] = e[r + s];
    }
    return t;
  }
}
Za = /* @__PURE__ */ new WeakMap(), Un = /* @__PURE__ */ new WeakMap();
var cs = function(n, e, t, r, i) {
  if (r === "m") throw new TypeError("Private method is not writable");
  if (r === "a" && !i) throw new TypeError("Private accessor was defined without a setter");
  if (typeof e == "function" ? n !== e || !i : !e.has(n)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return r === "a" ? i.call(n, t) : i ? i.value = t : e.set(n, t), t;
}, It = function(n, e, t, r) {
  if (t === "a" && !r) throw new TypeError("Private accessor was defined without a getter");
  if (typeof e == "function" ? n !== e || !r : !e.has(n)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return t === "m" ? r : t === "a" ? r.call(n) : r ? r.value : e.get(n);
}, Xa, oi, Rt;
class Oa extends Gx {
  constructor(e, t) {
    super("CTR", e, Oa), Xa.set(this, void 0), oi.set(this, void 0), Rt.set(this, void 0), cs(this, Rt, new Uint8Array(16), "f"), It(this, Rt, "f").fill(0), cs(this, Xa, It(this, Rt, "f"), "f"), cs(this, oi, 16, "f"), t == null && (t = 1), typeof t == "number" ? this.setCounterValue(t) : this.setCounterBytes(t);
  }
  get counter() {
    return new Uint8Array(It(this, Rt, "f"));
  }
  setCounterValue(e) {
    if (!Number.isInteger(e) || e < 0 || e > Number.MAX_SAFE_INTEGER)
      throw new TypeError("invalid counter initial integer value");
    for (let t = 15; t >= 0; --t)
      It(this, Rt, "f")[t] = e % 256, e = Math.floor(e / 256);
  }
  setCounterBytes(e) {
    if (e.length !== 16)
      throw new TypeError("invalid counter initial Uint8Array value length");
    It(this, Rt, "f").set(e);
  }
  increment() {
    for (let e = 15; e >= 0; e--)
      if (It(this, Rt, "f")[e] === 255)
        It(this, Rt, "f")[e] = 0;
      else {
        It(this, Rt, "f")[e]++;
        break;
      }
  }
  encrypt(e) {
    var t, r;
    const i = new Uint8Array(e);
    for (let s = 0; s < i.length; s++)
      It(this, oi, "f") === 16 && (cs(this, Xa, this.aes.encrypt(It(this, Rt, "f")), "f"), cs(this, oi, 0, "f"), this.increment()), i[s] ^= It(this, Xa, "f")[cs(this, oi, (r = It(this, oi, "f"), t = r++, r), "f"), t];
    return i;
  }
  decrypt(e) {
    return this.encrypt(e);
  }
}
Xa = /* @__PURE__ */ new WeakMap(), oi = /* @__PURE__ */ new WeakMap(), Rt = /* @__PURE__ */ new WeakMap();
function g4(n) {
  if (n.length < 16)
    throw new TypeError("PKCS#7 invalid length");
  const e = n[n.length - 1];
  if (e > 16)
    throw new TypeError("PKCS#7 padding byte out of range");
  const t = n.length - e;
  for (let r = 0; r < e; r++)
    if (n[t + r] !== e)
      throw new TypeError("PKCS#7 invalid padding byte");
  return new Uint8Array(n.subarray(0, t));
}
function Hx(n) {
  return typeof n == "string" && !n.startsWith("0x") && (n = "0x" + n), $e(n);
}
function ja(n, e) {
  for (n = String(n); n.length < e; )
    n = "0" + n;
  return n;
}
function sc(n) {
  return typeof n == "string" ? Qe(n, "NFKC") : $e(n);
}
function ve(n, e) {
  const t = e.match(/^([a-z0-9$_.-]*)(:([a-z]+))?(!)?$/i);
  A(t != null, "invalid path", "path", e);
  const r = t[1], i = t[3], s = t[4] === "!";
  let a = n;
  for (const o of r.toLowerCase().split(".")) {
    if (Array.isArray(a)) {
      if (!o.match(/^[0-9]+$/))
        break;
      a = a[parseInt(o)];
    } else if (typeof a == "object") {
      let c = null;
      for (const u in a)
        if (u.toLowerCase() === o) {
          c = a[u];
          break;
        }
      a = c;
    } else
      a = null;
    if (a == null)
      break;
  }
  if (A(!s || a != null, "missing required value", "path", r), i && a != null) {
    if (i === "int") {
      if (typeof a == "string" && a.match(/^-?[0-9]+$/))
        return parseInt(a);
      if (Number.isSafeInteger(a))
        return a;
    }
    if (i === "number" && typeof a == "string" && a.match(/^-?[0-9.]*$/))
      return parseFloat(a);
    if (i === "data" && typeof a == "string")
      return Hx(a);
    if (i === "array" && Array.isArray(a) || i === typeof a)
      return a;
    A(!1, `wrong type found for ${i} `, "path", r);
  }
  return a;
}
const $x = "m/44'/60'/0'/0/0";
function gh(n) {
  try {
    const e = JSON.parse(n);
    if ((e.version != null ? parseInt(e.version) : 0) === 3)
      return !0;
  } catch {
  }
  return !1;
}
function w4(n, e, t) {
  if (ve(n, "crypto.cipher:string") === "aes-128-ctr") {
    const i = ve(n, "crypto.cipherparams.iv:data!"), s = new Oa(e, i);
    return V(s.decrypt(t));
  }
  G(!1, "unsupported cipher", "UNSUPPORTED_OPERATION", {
    operation: "decrypt"
  });
}
function mu(n, e) {
  const t = K(e), r = ve(n, "crypto.ciphertext:data!"), i = V(pe(le([t.slice(16, 32), r]))).substring(2);
  A(i === ve(n, "crypto.mac:string!").toLowerCase(), "incorrect password", "password", "[ REDACTED ]");
  const s = w4(n, t.slice(0, 16), r), a = tc(s);
  if (n.address) {
    let u = n.address.toLowerCase();
    u.startsWith("0x") || (u = "0x" + u), A(oe(u) === a, "keystore address/privateKey mismatch", "address", n.address);
  }
  const o = { address: a, privateKey: s };
  if (ve(n, "x-ethers.version:string") === "0.1") {
    const u = t.slice(32, 64), l = ve(n, "x-ethers.mnemonicCiphertext:data!"), d = ve(n, "x-ethers.mnemonicCounter:data!"), f = new Oa(u, d);
    o.mnemonic = {
      path: ve(n, "x-ethers.path:string") || $x,
      locale: ve(n, "x-ethers.locale:string") || "en",
      entropy: V(K(f.decrypt(l)))
    };
  }
  return o;
}
function Vx(n) {
  const e = ve(n, "crypto.kdf:string");
  if (e && typeof e == "string") {
    if (e.toLowerCase() === "scrypt") {
      const t = ve(n, "crypto.kdfparams.salt:data!"), r = ve(n, "crypto.kdfparams.n:int!"), i = ve(n, "crypto.kdfparams.r:int!"), s = ve(n, "crypto.kdfparams.p:int!");
      A(r > 0 && (r & r - 1) === 0, "invalid kdf.N", "kdf.N", r), A(i > 0 && s > 0, "invalid kdf", "kdf", e);
      const a = ve(n, "crypto.kdfparams.dklen:int!");
      return A(a === 32, "invalid kdf.dklen", "kdf.dflen", a), { name: "scrypt", salt: t, N: r, r: i, p: s, dkLen: 64 };
    } else if (e.toLowerCase() === "pbkdf2") {
      const t = ve(n, "crypto.kdfparams.salt:data!"), r = ve(n, "crypto.kdfparams.prf:string!"), i = r.split("-").pop();
      A(i === "sha256" || i === "sha512", "invalid kdf.pdf", "kdf.pdf", r);
      const s = ve(n, "crypto.kdfparams.c:int!"), a = ve(n, "crypto.kdfparams.dklen:int!");
      return A(a === 32, "invalid kdf.dklen", "kdf.dklen", a), { name: "pbkdf2", salt: t, count: s, dkLen: a, algorithm: i };
    }
  }
  A(!1, "unsupported key-derivation function", "kdf", e);
}
function A4(n, e) {
  const t = JSON.parse(n), r = sc(e), i = Vx(t);
  if (i.name === "pbkdf2") {
    const { salt: d, count: f, dkLen: p, algorithm: y } = i, h = ti(r, d, f, p, y);
    return mu(t, h);
  }
  G(i.name === "scrypt", "cannot be reached", "UNKNOWN_ERROR", { params: i });
  const { salt: s, N: a, r: o, p: c, dkLen: u } = i, l = Ma(r, s, a, o, c, u);
  return mu(t, l);
}
function wh(n) {
  return new Promise((e) => {
    setTimeout(() => {
      e();
    }, n);
  });
}
async function E4(n, e, t) {
  const r = JSON.parse(n), i = sc(e), s = Vx(r);
  if (s.name === "pbkdf2") {
    t && (t(0), await wh(0));
    const { salt: f, count: p, dkLen: y, algorithm: h } = s, b = ti(i, f, p, y, h);
    return t && (t(1), await wh(0)), mu(r, b);
  }
  G(s.name === "scrypt", "cannot be reached", "UNKNOWN_ERROR", { params: s });
  const { salt: a, N: o, r: c, p: u, dkLen: l } = s, d = await La(i, a, o, c, u, l, t);
  return mu(r, d);
}
function zx(n) {
  const e = n.salt != null ? K(n.salt, "options.salt") : cr(32);
  let t = 1 << 17, r = 8, i = 1;
  return n.scrypt && (n.scrypt.N && (t = n.scrypt.N), n.scrypt.r && (r = n.scrypt.r), n.scrypt.p && (i = n.scrypt.p)), A(typeof t == "number" && t > 0 && Number.isSafeInteger(t) && (BigInt(t) & BigInt(t - 1)) === BigInt(0), "invalid scrypt N parameter", "options.N", t), A(typeof r == "number" && r > 0 && Number.isSafeInteger(r), "invalid scrypt r parameter", "options.r", r), A(typeof i == "number" && i > 0 && Number.isSafeInteger(i), "invalid scrypt p parameter", "options.p", i), { name: "scrypt", dkLen: 32, salt: e, N: t, r, p: i };
}
function jx(n, e, t, r) {
  const i = K(t.privateKey, "privateKey"), s = r.iv != null ? K(r.iv, "options.iv") : cr(16);
  A(s.length === 16, "invalid options.iv length", "options.iv", r.iv);
  const a = r.uuid != null ? K(r.uuid, "options.uuid") : cr(16);
  A(a.length === 16, "invalid options.uuid length", "options.uuid", r.iv);
  const o = n.slice(0, 16), c = n.slice(16, 32), u = new Oa(o, s), l = K(u.encrypt(i)), d = pe(le([c, l])), f = {
    address: t.address.substring(2).toLowerCase(),
    id: g5(a),
    version: 3,
    Crypto: {
      cipher: "aes-128-ctr",
      cipherparams: {
        iv: V(s).substring(2)
      },
      ciphertext: V(l).substring(2),
      kdf: "scrypt",
      kdfparams: {
        salt: V(e.salt).substring(2),
        n: e.N,
        dklen: 32,
        p: e.p,
        r: e.r
      },
      mac: d.substring(2)
    }
  };
  if (t.mnemonic) {
    const p = r.client != null ? r.client : `ethers/${Em}`, y = t.mnemonic.path || $x, h = t.mnemonic.locale || "en", b = n.slice(32, 64), x = K(t.mnemonic.entropy, "account.mnemonic.entropy"), w = cr(16), E = new Oa(b, w), N = K(E.encrypt(x)), I = /* @__PURE__ */ new Date(), U = "UTC--" + (I.getUTCFullYear() + "-" + ja(I.getUTCMonth() + 1, 2) + "-" + ja(I.getUTCDate(), 2) + "T" + ja(I.getUTCHours(), 2) + "-" + ja(I.getUTCMinutes(), 2) + "-" + ja(I.getUTCSeconds(), 2) + ".0Z") + "--" + f.address;
    f["x-ethers"] = {
      client: p,
      gethFilename: U,
      path: y,
      locale: h,
      mnemonicCounter: V(w).substring(2),
      mnemonicCiphertext: V(N).substring(2),
      version: "0.1"
    };
  }
  return JSON.stringify(f);
}
function Wx(n, e, t) {
  t == null && (t = {});
  const r = sc(e), i = zx(t), s = Ma(r, i.salt, i.N, i.r, i.p, 64);
  return jx(K(s), i, n, t);
}
async function Kx(n, e, t) {
  t == null && (t = {});
  const r = sc(e), i = zx(t), s = await La(r, i.salt, i.N, i.r, i.p, 64, t.progressCallback);
  return jx(K(s), i, n, t);
}
const Ql = "m/44'/60'/0'/0/0", v4 = new Uint8Array([66, 105, 116, 99, 111, 105, 110, 32, 115, 101, 101, 100]), qr = 2147483648, T4 = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"), P4 = "0123456789abcdef";
function bu(n, e) {
  let t = "";
  for (; n; )
    t = P4[n % 16] + t, n = Math.trunc(n / 16);
  for (; t.length < e * 2; )
    t = "0" + t;
  return "0x" + t;
}
function Yd(n) {
  const e = K(n), t = be(zt(zt(e)), 0, 4), r = le([e, t]);
  return Cm(r);
}
const hn = {};
function Qx(n, e, t, r) {
  const i = new Uint8Array(37);
  n & qr ? (G(r != null, "cannot derive child of neutered node", "UNSUPPORTED_OPERATION", {
    operation: "deriveChild"
  }), i.set(K(r), 1)) : i.set(K(t));
  for (let a = 24; a >= 0; a -= 8)
    i[33 + (a >> 3)] = n >> 24 - a & 255;
  const s = K(_a("sha512", e, i));
  return { IL: s.slice(0, 32), IR: s.slice(32) };
}
function qx(n, e) {
  const t = e.split("/");
  A(t.length > 0, "invalid path", "path", e), t[0] === "m" && (A(n.depth === 0, `cannot derive root path (i.e. path starting with "m/") for a node at non-zero depth ${n.depth}`, "path", e), t.shift());
  let r = n;
  for (let i = 0; i < t.length; i++) {
    const s = t[i];
    if (s.match(/^[0-9]+'$/)) {
      const a = parseInt(s.substring(0, s.length - 1));
      A(a < qr, "invalid path index", `path[${i}]`, s), r = r.deriveChild(qr + a);
    } else if (s.match(/^[0-9]+$/)) {
      const a = parseInt(s);
      A(a < qr, "invalid path index", `path[${i}]`, s), r = r.deriveChild(a);
    } else
      A(!1, "invalid path component", `path[${i}]`, s);
  }
  return r;
}
var jo, Zd, Hi, eo;
const qt = class qt extends hu {
  /**
   *  @private
   */
  constructor(t, r, i, s, a, o, c, u, l) {
    super(r, l);
    _(this, jo);
    /**
     *  The compressed public key.
     */
    T(this, "publicKey");
    /**
     *  The fingerprint.
     *
     *  A fingerprint allows quick qay to detect parent and child nodes,
     *  but developers should be prepared to deal with collisions as it
     *  is only 4 bytes.
     */
    T(this, "fingerprint");
    /**
     *  The parent fingerprint.
     */
    T(this, "parentFingerprint");
    /**
     *  The mnemonic used to create this HD Node, if available.
     *
     *  Sources such as extended keys do not encode the mnemonic, in
     *  which case this will be ``null``.
     */
    T(this, "mnemonic");
    /**
     *  The chaincode, which is effectively a public key used
     *  to derive children.
     */
    T(this, "chainCode");
    /**
     *  The derivation path of this wallet.
     *
     *  Since extended keys do not provide full path details, this
     *  may be ``null``, if instantiated from a source that does not
     *  encode it.
     */
    T(this, "path");
    /**
     *  The child index of this wallet. Values over ``2 *\* 31`` indicate
     *  the node is hardened.
     */
    T(this, "index");
    /**
     *  The depth of this wallet, which is the number of components
     *  in its path.
     */
    T(this, "depth");
    es(t, hn, "HDNodeWallet"), Y(this, { publicKey: r.compressedPublicKey });
    const d = be(ka(zt(this.publicKey)), 0, 4);
    Y(this, {
      parentFingerprint: i,
      fingerprint: d,
      chainCode: s,
      path: a,
      index: o,
      depth: c
    }), Y(this, { mnemonic: u });
  }
  connect(t) {
    return new qt(hn, this.signingKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.mnemonic, t);
  }
  /**
   *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with
   *  %%password%%.
   *
   *  If %%progressCallback%% is specified, it will receive periodic
   *  updates as the encryption process progreses.
   */
  async encrypt(t, r) {
    return await Kx(z(this, jo, Zd).call(this), t, { progressCallback: r });
  }
  /**
   *  Returns a [JSON Keystore Wallet](json-wallets) encryped with
   *  %%password%%.
   *
   *  It is preferred to use the [async version](encrypt) instead,
   *  which allows a [[ProgressCallback]] to keep the user informed.
   *
   *  This method will block the event loop (freezing all UI) until
   *  it is complete, which may be a non-trivial duration.
   */
  encryptSync(t) {
    return Wx(z(this, jo, Zd).call(this), t);
  }
  /**
   *  The extended key.
   *
   *  This key will begin with the prefix ``xpriv`` and can be used to
   *  reconstruct this HD Node to derive its children.
   */
  get extendedKey() {
    return G(this.depth < 256, "Depth too deep", "UNSUPPORTED_OPERATION", { operation: "extendedKey" }), Yd(le([
      "0x0488ADE4",
      bu(this.depth, 1),
      this.parentFingerprint,
      bu(this.index, 4),
      this.chainCode,
      le(["0x00", this.privateKey])
    ]));
  }
  /**
   *  Returns true if this wallet has a path, providing a Type Guard
   *  that the path is non-null.
   */
  hasPath() {
    return this.path != null;
  }
  /**
   *  Returns a neutered HD Node, which removes the private details
   *  of an HD Node.
   *
   *  A neutered node has no private key, but can be used to derive
   *  child addresses and other public data about the HD Node.
   */
  neuter() {
    return new Oo(hn, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.provider);
  }
  /**
   *  Return the child for %%index%%.
   */
  deriveChild(t) {
    const r = te(t, "index");
    A(r <= 4294967295, "invalid index", "index", r);
    let i = this.path;
    i && (i += "/" + (r & ~qr), r & qr && (i += "'"));
    const { IR: s, IL: a } = Qx(r, this.chainCode, this.publicKey, this.privateKey), o = new On(pr((ju(a) + BigInt(this.privateKey)) % T4, 32));
    return new qt(hn, o, this.fingerprint, V(s), i, r, this.depth + 1, this.mnemonic, this.provider);
  }
  /**
   *  Return the HDNode for %%path%% from this node.
   */
  derivePath(t) {
    return qx(this, t);
  }
  /**
   *  Creates a new HD Node from %%extendedKey%%.
   *
   *  If the %%extendedKey%% will either have a prefix or ``xpub`` or
   *  ``xpriv``, returning a neutered HD Node ([[HDNodeVoidWallet]])
   *  or full HD Node ([[HDNodeWallet) respectively.
   */
  static fromExtendedKey(t) {
    const r = Ae(r5(t));
    A(r.length === 82 || Yd(r.slice(0, 78)) === t, "invalid extended key", "extendedKey", "[ REDACTED ]");
    const i = r[4], s = V(r.slice(5, 9)), a = parseInt(V(r.slice(9, 13)).substring(2), 16), o = V(r.slice(13, 45)), c = r.slice(45, 78);
    switch (V(r.slice(0, 4))) {
      case "0x0488b21e":
      case "0x043587cf": {
        const u = V(c);
        return new Oo(hn, tc(u), u, s, o, null, a, i, null);
      }
      case "0x0488ade4":
      case "0x04358394 ":
        if (c[0] !== 0)
          break;
        return new qt(hn, new On(c.slice(1)), s, o, null, a, i, null, null);
    }
    A(!1, "invalid extended key prefix", "extendedKey", "[ REDACTED ]");
  }
  /**
   *  Creates a new random HDNode.
   */
  static createRandom(t, r, i) {
    var a;
    t == null && (t = ""), r == null && (r = Ql), i == null && (i = Ji.wordlist());
    const s = Ca.fromEntropy(cr(16), t, i);
    return z(a = qt, Hi, eo).call(a, s.computeSeed(), s).derivePath(r);
  }
  /**
   *  Create an HD Node from %%mnemonic%%.
   */
  static fromMnemonic(t, r) {
    var i;
    return r || (r = Ql), z(i = qt, Hi, eo).call(i, t.computeSeed(), t).derivePath(r);
  }
  /**
   *  Creates an HD Node from a mnemonic %%phrase%%.
   */
  static fromPhrase(t, r, i, s) {
    var o;
    r == null && (r = ""), i == null && (i = Ql), s == null && (s = Ji.wordlist());
    const a = Ca.fromPhrase(t, r, s);
    return z(o = qt, Hi, eo).call(o, a.computeSeed(), a).derivePath(i);
  }
  /**
   *  Creates an HD Node from a %%seed%%.
   */
  static fromSeed(t) {
    var r;
    return z(r = qt, Hi, eo).call(r, t, null);
  }
};
jo = new WeakSet(), Zd = function() {
  const t = { address: this.address, privateKey: this.privateKey }, r = this.mnemonic;
  return this.path && r && r.wordlist.locale === "en" && r.password === "" && (t.mnemonic = {
    path: this.path,
    locale: "en",
    entropy: r.entropy
  }), t;
}, Hi = new WeakSet(), eo = function(t, r) {
  A($u(t), "invalid seed", "seed", "[REDACTED]");
  const i = K(t, "seed");
  A(i.length >= 16 && i.length <= 64, "invalid seed", "seed", "[REDACTED]");
  const s = K(_a("sha512", v4, i)), a = new On(V(s.slice(0, 32)));
  return new qt(hn, a, "0x00000000", V(s.slice(32)), "m", 0, 0, r, null);
}, _(qt, Hi);
let co = qt;
class Oo extends zd {
  /**
   *  @private
   */
  constructor(t, r, i, s, a, o, c, u, l) {
    super(r, l);
    /**
     *  The compressed public key.
     */
    T(this, "publicKey");
    /**
     *  The fingerprint.
     *
     *  A fingerprint allows quick qay to detect parent and child nodes,
     *  but developers should be prepared to deal with collisions as it
     *  is only 4 bytes.
     */
    T(this, "fingerprint");
    /**
     *  The parent node fingerprint.
     */
    T(this, "parentFingerprint");
    /**
     *  The chaincode, which is effectively a public key used
     *  to derive children.
     */
    T(this, "chainCode");
    /**
     *  The derivation path of this wallet.
     *
     *  Since extended keys do not provider full path details, this
     *  may be ``null``, if instantiated from a source that does not
     *  enocde it.
     */
    T(this, "path");
    /**
     *  The child index of this wallet. Values over ``2 *\* 31`` indicate
     *  the node is hardened.
     */
    T(this, "index");
    /**
     *  The depth of this wallet, which is the number of components
     *  in its path.
     */
    T(this, "depth");
    es(t, hn, "HDNodeVoidWallet"), Y(this, { publicKey: i });
    const d = be(ka(zt(i)), 0, 4);
    Y(this, {
      publicKey: i,
      fingerprint: d,
      parentFingerprint: s,
      chainCode: a,
      path: o,
      index: c,
      depth: u
    });
  }
  connect(t) {
    return new Oo(hn, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, t);
  }
  /**
   *  The extended key.
   *
   *  This key will begin with the prefix ``xpub`` and can be used to
   *  reconstruct this neutered key to derive its children addresses.
   */
  get extendedKey() {
    return G(this.depth < 256, "Depth too deep", "UNSUPPORTED_OPERATION", { operation: "extendedKey" }), Yd(le([
      "0x0488B21E",
      bu(this.depth, 1),
      this.parentFingerprint,
      bu(this.index, 4),
      this.chainCode,
      this.publicKey
    ]));
  }
  /**
   *  Returns true if this wallet has a path, providing a Type Guard
   *  that the path is non-null.
   */
  hasPath() {
    return this.path != null;
  }
  /**
   *  Return the child for %%index%%.
   */
  deriveChild(t) {
    const r = te(t, "index");
    A(r <= 4294967295, "invalid index", "index", r);
    let i = this.path;
    i && (i += "/" + (r & ~qr), r & qr && (i += "'"));
    const { IR: s, IL: a } = Qx(r, this.chainCode, this.publicKey, null), o = On.addPoints(a, this.publicKey, !0), c = tc(o);
    return new Oo(hn, c, o, this.fingerprint, V(s), i, r, this.depth + 1, this.provider);
  }
  /**
   *  Return the signer for %%path%% from this node.
   */
  derivePath(t) {
    return qx(this, t);
  }
}
function Ah(n) {
  try {
    if (JSON.parse(n).encseed)
      return !0;
  } catch {
  }
  return !1;
}
function Eh(n, e) {
  const t = JSON.parse(n), r = sc(e), i = oe(ve(t, "ethaddr:string!")), s = Hx(ve(t, "encseed:string!"));
  A(s && s.length % 16 === 0, "invalid encseed", "json", n);
  const a = K(ti(r, r, 2e3, 32, "sha256")).slice(0, 16), o = s.slice(0, 16), c = s.slice(16), u = new r0(a, o), l = g4(K(u.decrypt(c)));
  let d = "";
  for (let f = 0; f < l.length; f++)
    d += String.fromCharCode(l[f]);
  return { address: i, privateKey: _n(d) };
}
function vh(n) {
  return new Promise((e) => {
    setTimeout(() => {
      e();
    }, n);
  });
}
var Wo, ef;
const pi = class pi extends hu {
  /**
   *  Create a new wallet for the private %%key%%, optionally connected
   *  to %%provider%%.
   */
  constructor(e, t) {
    typeof e == "string" && !e.startsWith("0x") && (e = "0x" + e);
    let r = typeof e == "string" ? new On(e) : e;
    super(r, t);
  }
  connect(e) {
    return new pi(this.signingKey, e);
  }
  /**
   *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with
   *  %%password%%.
   *
   *  If %%progressCallback%% is specified, it will receive periodic
   *  updates as the encryption process progreses.
   */
  async encrypt(e, t) {
    const r = { address: this.address, privateKey: this.privateKey };
    return await Kx(r, e, { progressCallback: t });
  }
  /**
   *  Returns a [JSON Keystore Wallet](json-wallets) encryped with
   *  %%password%%.
   *
   *  It is preferred to use the [async version](encrypt) instead,
   *  which allows a [[ProgressCallback]] to keep the user informed.
   *
   *  This method will block the event loop (freezing all UI) until
   *  it is complete, which may be a non-trivial duration.
   */
  encryptSync(e) {
    const t = { address: this.address, privateKey: this.privateKey };
    return Wx(t, e);
  }
  /**
   *  Creates (asynchronously) a **Wallet** by decrypting the %%json%%
   *  with %%password%%.
   *
   *  If %%progress%% is provided, it is called periodically during
   *  decryption so that any UI can be updated.
   */
  static async fromEncryptedJson(e, t, r) {
    var s;
    let i = null;
    return gh(e) ? i = await E4(e, t, r) : Ah(e) && (r && (r(0), await vh(0)), i = Eh(e, t), r && (r(1), await vh(0))), z(s = pi, Wo, ef).call(s, i);
  }
  /**
   *  Creates a **Wallet** by decrypting the %%json%% with %%password%%.
   *
   *  The [[fromEncryptedJson]] method is preferred, as this method
   *  will lock up and freeze the UI during decryption, which may take
   *  some time.
   */
  static fromEncryptedJsonSync(e, t) {
    var i;
    let r = null;
    return gh(e) ? r = A4(e, t) : Ah(e) ? r = Eh(e, t) : A(!1, "invalid JSON wallet", "json", "[ REDACTED ]"), z(i = pi, Wo, ef).call(i, r);
  }
  /**
   *  Creates a new random [[HDNodeWallet]] using the available
   *  [cryptographic random source](randomBytes).
   *
   *  If there is no crytographic random source, this will throw.
   */
  static createRandom(e) {
    const t = co.createRandom();
    return e ? t.connect(e) : t;
  }
  /**
   *  Creates a [[HDNodeWallet]] for %%phrase%%.
   */
  static fromPhrase(e, t) {
    const r = co.fromPhrase(e);
    return t ? r.connect(t) : r;
  }
};
Wo = new WeakSet(), ef = function(e) {
  if (A(e, "invalid JSON wallet", "json", "[ REDACTED ]"), "mnemonic" in e && e.mnemonic && e.mnemonic.locale === "en") {
    const r = Ca.fromEntropy(e.mnemonic.entropy), i = co.fromMnemonic(r, e.mnemonic.path);
    if (i.address === e.address && i.privateKey === e.privateKey)
      return i;
    console.log("WARNING: JSON mismatch address/privateKey != mnemonic; fallback onto private key");
  }
  const t = new pi(e.privateKey);
  return A(t.address === e.address, "address/privateKey mismatch", "json", "[ REDACTED ]"), t;
}, _(pi, Wo);
let Xd = pi;
var hs = function(n) {
  this.accountAddress = void 0, this.accountAddress = n;
};
function Th(n, e) {
  (e == null || e > n.length) && (e = n.length);
  for (var t = 0, r = Array(e); t < e; t++) r[t] = n[t];
  return r;
}
function to(n, e) {
  var t = typeof Symbol < "u" && n[Symbol.iterator] || n["@@iterator"];
  if (t) return (t = t.call(n)).next.bind(t);
  if (Array.isArray(n) || (t = function(i, s) {
    if (i) {
      if (typeof i == "string") return Th(i, s);
      var a = {}.toString.call(i).slice(8, -1);
      return a === "Object" && i.constructor && (a = i.constructor.name), a === "Map" || a === "Set" ? Array.from(i) : a === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a) ? Th(i, s) : void 0;
    }
  }(n)) || e) {
    t && (n = t);
    var r = 0;
    return function() {
      return r >= n.length ? { done: !0 } : { done: !1, value: n[r++] };
    };
  }
  throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function Nn() {
  return Nn = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, Nn.apply(null, arguments);
}
function tf(n) {
  return tf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(e) {
    return e.__proto__ || Object.getPrototypeOf(e);
  }, tf(n);
}
function ac(n, e) {
  n.prototype = Object.create(e.prototype), n.prototype.constructor = n, No(n, e);
}
function Jx() {
  try {
    var n = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch {
  }
  return (Jx = function() {
    return !!n;
  })();
}
function No(n, e) {
  return No = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, r) {
    return t.__proto__ = r, t;
  }, No(n, e);
}
function nf(n) {
  var e = typeof Map == "function" ? /* @__PURE__ */ new Map() : void 0;
  return nf = function(t) {
    if (t === null || !function(i) {
      try {
        return Function.toString.call(i).indexOf("[native code]") !== -1;
      } catch {
        return typeof i == "function";
      }
    }(t)) return t;
    if (typeof t != "function") throw new TypeError("Super expression must either be null or a function");
    if (e !== void 0) {
      if (e.has(t)) return e.get(t);
      e.set(t, r);
    }
    function r() {
      return function(i, s, a) {
        if (Jx()) return Reflect.construct.apply(null, arguments);
        var o = [null];
        o.push.apply(o, s);
        var c = new (i.bind.apply(i, o))();
        return a && No(c, a.prototype), c;
      }(t, arguments, tf(this).constructor);
    }
    return r.prototype = Object.create(t.prototype, { constructor: { value: r, enumerable: !1, writable: !0, configurable: !0 } }), No(r, t);
  }, nf(n);
}
hs.proxyByteCode = void 0, hs.initializerFunctionSelector = void 0, hs.initializerFunctionInputAbi = void 0, hs.executorFunctionSelector = void 0, hs.executorFunctionInputAbi = void 0;
var jn, zi, Ph, ci = "0x0000000000000000000000000000000000000000", Kt = "0x4337084D9E255Ff0702461CF8895CE9E3b5Ff108", Ue = "0x0000000071727De22E5E9d8BAf0edAc6f37da032", Bt = "0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789", us = { sender: ci, nonce: 0n, callData: "0x", callGasLimit: 0n, verificationGasLimit: 0n, preVerificationGas: 0n, maxFeePerGas: 0n, maxPriorityFeePerGas: 0n, signature: "0x" }, S4 = { SafeOp: [{ type: "address", name: "safe" }, { type: "uint256", name: "nonce" }, { type: "bytes", name: "initCode" }, { type: "bytes", name: "callData" }, { type: "uint256", name: "callGasLimit" }, { type: "uint256", name: "verificationGasLimit" }, { type: "uint256", name: "preVerificationGas" }, { type: "uint256", name: "maxFeePerGas" }, { type: "uint256", name: "maxPriorityFeePerGas" }, { type: "bytes", name: "paymasterAndData" }, { type: "uint48", name: "validAfter" }, { type: "uint48", name: "validUntil" }, { type: "address", name: "entryPoint" }] }, I4 = { SafeOp: [{ type: "address", name: "safe" }, { type: "uint256", name: "nonce" }, { type: "bytes", name: "initCode" }, { type: "bytes", name: "callData" }, { type: "uint128", name: "verificationGasLimit" }, { type: "uint128", name: "callGasLimit" }, { type: "uint256", name: "preVerificationGas" }, { type: "uint128", name: "maxPriorityFeePerGas" }, { type: "uint128", name: "maxFeePerGas" }, { type: "bytes", name: "paymasterAndData" }, { type: "uint48", name: "validAfter" }, { type: "uint48", name: "validUntil" }, { type: "address", name: "entryPoint" }] };
(function(n) {
  n[n.Call = 0] = "Call", n[n.Delegate = 1] = "Delegate";
})(jn || (jn = {})), function(n) {
  n[n.Slow = 1] = "Slow", n[n.Medium = 1.2] = "Medium", n[n.Fast = 1.5] = "Fast";
}(zi || (zi = {})), function(n) {
  n.Mainnet = "v2", n.ZkMainnet = "zkevm", n.Amoy = "amoy", n.Cardona = "cardona";
}(Ph || (Ph = {}));
var Sh = { "-32602": "INVALID_FIELDS", "-32500": "SIMULATE_VALIDATION", "-32501": "SIMULATE_PAYMASTER_VALIDATION", "-32502": "OPCODE_VALIDATION", "-32503": "EXPIRE_SHORTLY", "-32504": "REPUTATION", "-32505": "INSUFFICIENT_STAKE", "-32506": "UNSUPPORTED_SIGNATURE_AGGREGATOR", "-32507": "INVALID_SIGNATURE", "-32601": "INVALID_USEROPERATION_HASH", "-32521": "EXECUTION_REVERTED" }, ne = /* @__PURE__ */ function(n) {
  function e(t, r, i) {
    var s;
    i === void 0 && (i = {});
    var a = i.errno, o = i.context;
    return (s = n.call(this, r, { cause: i.cause }) || this).code = void 0, s.context = void 0, s.errno = void 0, s.name = s.constructor.name, s.code = t, s.errno = a, s.context = o, s;
  }
  return ac(e, n), e.prototype.stringify = function() {
    return JSON.stringify(this, ["name", "code", "message", "cause", "errno", "context"]);
  }, e;
}(/* @__PURE__ */ nf(Error));
function xe(n) {
  if (n instanceof Error) return n;
  var e = "[Unable to stringify the thrown value]";
  try {
    e = JSON.stringify(n);
  } catch {
  }
  return new Error("This value was thrown as is, not through an Error: " + e);
}
function oc(n, e) {
  try {
    var t = n();
  } catch (r) {
    return e(r);
  }
  return t && t.then ? t.then(void 0, e) : t;
}
var C4 = function(n, e, t) {
  try {
    var r, i, s = function(o) {
      return [r, i];
    };
    t === void 0 && (t = zi.Medium);
    var a = e != null ? Promise.resolve(O4(e, t)).then(function(o) {
      r = o[0], i = o[1];
    }) : function() {
      if (n != null) return Promise.resolve(N4(n, t)).then(function(o) {
        r = o[0], i = o[1];
      });
      throw new ne("BAD_DATA", "providerRpc cant't be null if maxFeePerGas and maxPriorityFeePerGas are not overriden");
    }();
    return Promise.resolve(a && a.then ? a.then(s) : s());
  } catch (o) {
    return Promise.reject(o);
  }
}, Ih = function(n, e, t) {
  try {
    var r = [e, t];
    return Promise.resolve(oc(function() {
      return Promise.resolve(Te(n, "eth_getCode", r)).then(function(i) {
        if (typeof i != "string") throw new ne("BAD_DATA", "eth_getCode returned ill formed data", { context: JSON.stringify(i) });
        try {
          return i;
        } catch (a) {
          var s = xe(a);
          throw new ne("BAD_DATA", "eth_getCode returned ill formed data", { cause: s });
        }
      });
    }, function(i) {
      var s = xe(i);
      throw new ne("BAD_DATA", "eth_getCode failed", { cause: s });
    }));
  } catch (i) {
    return Promise.reject(i);
  }
}, Nc = function(n, e, t, r) {
  try {
    var i;
    return i = r == null ? [e, t] : [e, t, r], Promise.resolve(oc(function() {
      return Promise.resolve(Te(n, "eth_call", i)).then(function(s) {
        if (typeof s != "string") throw new ne("BAD_DATA", "eth_call returned ill formed data", { context: JSON.stringify(s) });
        try {
          return s;
        } catch (o) {
          var a = xe(o);
          throw new ne("BAD_DATA", "eth_call returned ill formed data", { cause: a });
        }
      });
    }, function(s) {
      var a = xe(s);
      throw new ne("BAD_DATA", "eth_call failed", { cause: a });
    }));
  } catch (s) {
    return Promise.reject(s);
  }
}, O4 = function(n, e) {
  try {
    e === void 0 && (e = zi.Medium);
    var t = "https://gasstation.polygon.technology/" + n;
    return Promise.resolve(oc(function() {
      return Promise.resolve(fetch(t)).then(function(r) {
        return Promise.resolve(r.json()).then(function(i) {
          var s;
          s = e == zi.Slow ? i.safeLow : e == zi.Medium ? i.standard : i.fast;
          var a = BigInt(Math.ceil(1e9 * Number(s.maxFee))), o = BigInt(Math.ceil(1e9 * Number(s.maxPriorityFee)));
          return a == 0n && (a = 1n), o == 0n && (o = 1n), [a, o];
        });
      });
    }, function(r) {
      var i = xe(r);
      throw new ne("BAD_DATA", "fetching gas prices from " + t + " failed.", { cause: i });
    }));
  } catch (r) {
    return Promise.reject(r);
  }
}, N4 = function(n, e) {
  try {
    return e === void 0 && (e = zi.Medium), Promise.resolve(oc(function() {
      var t = new qv(n);
      return Promise.resolve(t.getFeeData()).then(function(r) {
        var i, s;
        return r.maxFeePerGas != null && r.maxPriorityFeePerGas != null ? (i = BigInt(Math.ceil(Number(r.maxFeePerGas) * e)), s = BigInt(Math.ceil(Number(r.maxPriorityFeePerGas) * e))) : s = i = r.gasPrice != null ? BigInt(Math.ceil(Number(r.gasPrice) * e)) : BigInt(Math.ceil(1e9 * e)), i == 0n && (i = 1n), s == 0n && (s = 1n), [i, s];
      });
    }, function(t) {
      var r = xe(t);
      throw new ne("BAD_DATA", "fetching gas prices from node failed.", { cause: r });
    }));
  } catch (t) {
    return Promise.reject(t);
  }
}, Ch = function(n, e, t, r) {
  r === void 0 && (r = 0);
  try {
    var i = [{ from: "0x0000000000000000000000000000000000000000", to: e, data: Ee(Qc("getNonce(address,uint192)"), ["address", "uint192"], [t, r]) }, "latest"];
    return Promise.resolve(oc(function() {
      return Promise.resolve(Te(n, "eth_call", i)).then(function(s) {
        if (typeof s != "string") throw new ne("BAD_DATA", "getNonce returned ill formed data", { context: JSON.stringify(s) });
        try {
          return BigInt(s);
        } catch (o) {
          var a = xe(o);
          throw new ne("BAD_DATA", "getNonce returned ill formed data", { cause: a });
        }
      });
    }, function(s) {
      var a = xe(s);
      throw new ne("BAD_DATA", "getNonce failed", { cause: a });
    }));
  } catch (s) {
    return Promise.reject(s);
  }
}, Te = function(n, e, t, r, i) {
  r === void 0 && (r = { "Content-Type": "application/json" }), i === void 0 && (i = "params");
  try {
    var s, a = Rf || Am, o = { method: "POST", headers: r, body: JSON.stringify(((s = { method: e })[i] = t, s.id = (/* @__PURE__ */ new Date()).getTime(), s.jsonrpc = "2.0", s), function(c, u) {
      return typeof u == "bigint" ? "0x" + u.toString(16) : u;
    }), redirect: "follow" };
    return Promise.resolve(a(n, o)).then(function(c) {
      return Promise.resolve(c.json()).then(function(u) {
        if ("result" in u) return u.result;
        if ("simulation_results" in u) return u.simulation_results;
        var l = u.error, d = String(l.code);
        throw new ne(d in Sh ? Sh[d] : "UNKNOWN_ERROR", l.message, { errno: l.code, context: { url: n, requestOptions: JSON.stringify(o) } });
      });
    });
  } catch (c) {
    return Promise.reject(c);
  }
};
function Ee(n, e, t) {
  return n + Xe.defaultAbiCoder().encode(e, t).slice(2);
}
function Qc(n) {
  return _n(n).slice(0, 10);
}
function sl(n) {
  var e, t;
  return "initCode" in n ? (n.callGasLimit + n.verificationGasLimit * (n.paymasterAndData == "0x" || n.paymasterAndData == null ? 3n : 0n) + n.preVerificationGas) * n.maxFeePerGas : (n.verificationGasLimit + n.callGasLimit + ((e = n.paymasterVerificationGasLimit) != null ? e : 0n) + ((t = n.paymasterPostOpGasLimit) != null ? t : 0n) + n.preVerificationGas) * n.maxFeePerGas;
}
function ls(n, e) {
  try {
    var t = n();
  } catch (r) {
    return e(r);
  }
  return t && t.then ? t.then(void 0, e) : t;
}
var rf = /* @__PURE__ */ function() {
  function n(t) {
    this.rpcUrl = void 0, this.rpcUrl = t;
  }
  var e = n.prototype;
  return e.chainId = function() {
    try {
      var t = this;
      return Promise.resolve(ls(function() {
        return Promise.resolve(Te(t.rpcUrl, "eth_chainId", [])).then(function(r) {
          if (typeof r == "string") return r;
          throw new ne("BAD_DATA", "bundler eth_chainId rpc call failed");
        });
      }, function(r) {
        var i = xe(r);
        throw new ne("BUNDLER_ERROR", "bundler eth_chainId rpc call failed", { cause: i });
      }));
    } catch (r) {
      return Promise.reject(r);
    }
  }, e.supportedEntryPoints = function() {
    try {
      var t = this;
      return Promise.resolve(ls(function() {
        return Promise.resolve(Te(t.rpcUrl, "eth_supportedEntryPoints", []));
      }, function(r) {
        var i = xe(r);
        throw new ne("BUNDLER_ERROR", "bundler eth_supportedEntryPoints rpc call failed", { cause: i });
      }));
    } catch (r) {
      return Promise.reject(r);
    }
  }, e.estimateUserOperationGas = function(t, r, i) {
    try {
      var s = this;
      return Promise.resolve(ls(function() {
        function a() {
          var u = o;
          return { callGasLimit: BigInt(u.callGasLimit), preVerificationGas: BigInt(u.preVerificationGas), verificationGasLimit: BigInt(u.verificationGasLimit) };
        }
        var o = {}, c = i === void 0 ? Promise.resolve(Te(s.rpcUrl, "eth_estimateUserOperationGas", [t, r])).then(function(u) {
          o = u;
        }) : Promise.resolve(Te(s.rpcUrl, "eth_estimateUserOperationGas", [t, r, i])).then(function(u) {
          o = u;
        });
        return c && c.then ? c.then(a) : a();
      }, function(a) {
        var o = xe(a);
        throw new ne("BUNDLER_ERROR", "bundler eth_estimateUserOperationGas rpc call failed", { cause: o });
      }));
    } catch (a) {
      return Promise.reject(a);
    }
  }, e.sendUserOperation = function(t, r) {
    try {
      var i = this;
      return Promise.resolve(ls(function() {
        return Promise.resolve(Te(i.rpcUrl, "eth_sendUserOperation", [t, r]));
      }, function(s) {
        var a = xe(s);
        throw new ne("BUNDLER_ERROR", "bundler eth_sendUserOperation rpc call failed", { cause: a });
      }));
    } catch (s) {
      return Promise.reject(s);
    }
  }, e.getUserOperationReceipt = function(t) {
    try {
      var r = this;
      return Promise.resolve(ls(function() {
        return Promise.resolve(Te(r.rpcUrl, "eth_getUserOperationReceipt", [t])).then(function(i) {
          var s = i;
          if (s != null) {
            var a = Nn({}, s.receipt, { blockNumber: BigInt(s.receipt.blockNumber), cumulativeGasUsed: BigInt(s.receipt.cumulativeGasUsed), gasUsed: BigInt(s.receipt.gasUsed), transactionIndex: BigInt(s.receipt.transactionIndex), effectiveGasPrice: s.receipt.effectiveGasPrice == null ? void 0 : BigInt(s.receipt.effectiveGasPrice), logs: JSON.stringify(s.receipt.logs) });
            return Nn({}, s, { nonce: BigInt(s.nonce), actualGasCost: BigInt(s.actualGasCost), actualGasUsed: BigInt(s.actualGasUsed), logs: JSON.stringify(s.logs), receipt: a });
          }
          return null;
        });
      }, function(i) {
        var s = xe(i);
        throw new ne("BUNDLER_ERROR", "bundler eth_getUserOperationReceipt rpc call failed", { cause: s, context: { useroperationhash: t } });
      }));
    } catch (i) {
      return Promise.reject(i);
    }
  }, e.getUserOperationByHash = function(t) {
    try {
      var r = this;
      return Promise.resolve(ls(function() {
        return Promise.resolve(Te(r.rpcUrl, "eth_getUserOperationByHash", [t])).then(function(i) {
          return i != null ? Nn({}, i, { blockNumber: i.blockNumber == null ? null : BigInt(i.blockNumber) }) : null;
        });
      }, function(i) {
        var s = xe(i);
        throw new ne("BUNDLER_ERROR", "bundler eth_getUserOperationByHash rpc call failed", { cause: s, context: { useroperationhash: t } });
      }));
    } catch (i) {
      return Promise.reject(i);
    }
  }, n;
}();
function Et(n, e, t) {
  if (!n.s) {
    if (t instanceof i0) {
      if (!t.s) return void (t.o = Et.bind(null, n, e));
      1 & e && (e = t.s), t = t.v;
    }
    if (t && t.then) return void t.then(Et.bind(null, n, e), Et.bind(null, n, 2));
    n.s = e, n.v = t;
    const r = n.o;
    r && r(n);
  }
}
var i0 = /* @__PURE__ */ function() {
  function n() {
  }
  return n.prototype.then = function(e, t) {
    var r = new n(), i = this.s;
    if (i) {
      var s = 1 & i ? e : t;
      if (s) {
        try {
          Et(r, 1, s(this.v));
        } catch (a) {
          Et(r, 2, a);
        }
        return r;
      }
      return this;
    }
    return this.o = function(a) {
      try {
        var o = a.v;
        1 & a.s ? Et(r, 1, e ? e(o) : o) : t ? Et(r, 1, t(o)) : Et(r, 2, o);
      } catch (c) {
        Et(r, 2, c);
      }
    }, r;
  }, n;
}();
function Rc(n) {
  return n instanceof i0 && 1 & n.s;
}
var R4 = /* @__PURE__ */ function() {
  function n(t, r, i) {
    this.userOperationHash = void 0, this.bundler = void 0, this.entrypointAddress = void 0, this.bundler = r, this.userOperationHash = t, this.entrypointAddress = i;
  }
  var e = n.prototype;
  return e.delay = function(t) {
    return new Promise(function(r) {
      return setTimeout(r, t);
    });
  }, e.included = function(t, r) {
    t === void 0 && (t = 180), r === void 0 && (r = 2);
    try {
      var i, s = function(u) {
        if (i) return u;
        throw new ne("TIMEOUT", "can't find useroperation", { context: a.userOperationHash });
      }, a = this;
      if (t <= 0 || r <= 0) throw RangeError("timeoutInSeconds and requestIntervalInSeconds should be bigger than zero");
      if (t < r) throw RangeError("timeoutInSeconds can't be less than requestIntervalInSeconds");
      var o = 0, c = function(u, l, d) {
        for (var f; ; ) {
          var p = u();
          if (Rc(p) && (p = p.v), !p) return y;
          if (p.then) {
            f = 0;
            break;
          }
          var y = d();
          if (y && y.then) {
            if (!Rc(y)) {
              f = 1;
              break;
            }
            y = y.s;
          }
        }
        var h = new i0(), b = Et.bind(null, h, 2);
        return (f === 0 ? p.then(w) : f === 1 ? y.then(x) : (void 0).then(function() {
          (p = u()) ? p.then ? p.then(w).then(void 0, b) : w(p) : Et(h, 1, y);
        })).then(void 0, b), h;
        function x(E) {
          y = E;
          do {
            if (!(p = u()) || Rc(p) && !p.v) return void Et(h, 1, y);
            if (p.then) return void p.then(w).then(void 0, b);
            Rc(y = d()) && (y = y.v);
          } while (!y || !y.then);
          y.then(x).then(void 0, b);
        }
        function w(E) {
          E ? (y = d()) && y.then ? y.then(x).then(void 0, b) : x(y) : Et(h, 1, y);
        }
      }(function() {
        return !i && o <= t;
      }, 0, function() {
        return Promise.resolve(a.delay(1e3 * r)).then(function() {
          return Promise.resolve(a.bundler.getUserOperationReceipt(a.userOperationHash)).then(function(u) {
            if (u != null) return i = 1, u;
            o++;
          });
        });
      });
      return Promise.resolve(c && c.then ? c.then(s) : s(c));
    } catch (u) {
      return Promise.reject(u);
    }
  }, n;
}(), Wn, B4 = function(n, e, t, r) {
  try {
    var i = "https://api.tenderly.co/api/v1/account/" + n + "/project/" + e + "/simulate-bundle", s = r.map(function(a) {
      var o, c, u, l = { network_id: a.chainId.toString(), save: (o = a.save) == null || o, save_if_fails: (c = a.saveIfFails) == null || c, from: a.from, to: a.to, input: a.data, simulation_type: (u = a.simulationType) != null ? u : "quick" };
      return a.blockNumber != null && (l.block_number = a.blockNumber), a.gas != null && (l.gas = a.gas), a.gasPrice != null && (l.gas_price = a.gasPrice), a.value != null && (l.value = a.value), a.stateOverride != null && (l.state_objects = a.stateOverride), a.transactionIndex != null && (l.transaction_index = a.transactionIndex), a.estimateGas != null && (l.estimate_gas = a.estimateGas), a.generateAccessList != null && (l.generate_access_list = a.generateAccessList), a.accessList != null && (l.access_list = a.accessList), l;
    });
    return Promise.resolve(Te(i, "tenderly_simulateBundle", s, { Accept: "application/json", "Content-Type": "application/json", "X-Access-Key": t }, "simulations"));
  } catch (a) {
    return Promise.reject(a);
  }
}, Yx = function(n, e, t, r, i, s, a, o, c, u) {
  o === void 0 && (o = null), c === void 0 && (c = null), u === void 0 && (u = null);
  try {
    var l, d = [], f = i.toLowerCase();
    if (f == "0x5ff137d4b0fdcd49dca30c7cf57e578a026d2789") l = "0x7fc98430eaedbb6070b35b39d798725049088348";
    else if (f == "0x0000000071727de22e5e9d8baf0edac6f37da032") l = "0xefc2c1444ebcc4db75e7613d20c6a62ff67a167c";
    else {
      if (f != "0x4337084d9e255ff0702461cf8895ce9e3b5ff108") throw RangeError("Invalid entrypoint: " + i);
      l = "0x449ed7c3e6fee6a97311d4b55475df59c44add33";
    }
    if (o == null && c != null || o != null && c == null) throw RangeError("Invalid factory and factoryData");
    return o != null && c != null && d.push({ chainId: r, blockNumber: u, from: l, to: o, data: c }), d.push({ chainId: r, blockNumber: u, from: i, to: s, data: a }), Promise.resolve(B4(n, e, t, d));
  } catch (p) {
    return Promise.reject(p);
  }
}, _4 = function(n, e, t, r, i, s, a, o, c, u) {
  return o === void 0 && (o = null), c === void 0 && (c = null), u === void 0 && (u = null), Promise.resolve(Yx(n, e, t, r, i, s, a, o, c, u)).then(function(l) {
    var d = l.map(function(p) {
      return p.simulation.id;
    });
    d.map(function(p) {
      return k4(n, e, t, p);
    });
    var f = d.map(function(p) {
      return "https://dashboard.tenderly.co/shared/simulation/" + p;
    });
    if (f.length == 1) return { simulation: l, callDataSimulationShareLink: f[0] };
    if (f.length == 2) return { simulation: l, accountDeploymentSimulationShareLink: f[0], callDataSimulationShareLink: f[1] };
    throw new ne("BAD_DATA", "invalid number of simulations retuned", { context: JSON.stringify(l, function(p, y) {
      return typeof y == "bigint" ? "0x" + y.toString(16) : y;
    }) });
  });
}, k4 = function(n, e, t, r) {
  try {
    return Promise.resolve((Rf || Am)("https://api.tenderly.co/api/v1/account/" + n + "/project/" + e + "/simulations/" + r + "/share", { method: "POST", headers: { Accept: "application/json", "Content-Type": "application/json", "X-Access-Key": t }, redirect: "follow" })).then(function(i) {
      var s = i.status;
      if (s != 204) throw new ne("BAD_DATA", "tenderly share simulation failed.", { context: { tenderlyAccountSlug: n, tenderlyProjectSlug: e, tenderlyAccessKey: t, tenderlySimulationId: r, status: s } });
    });
  } catch (i) {
    return Promise.reject(i);
  }
};
(function(n) {
  n.executeUserOpWithErrorString = "0x541d63c8", n.executeUserOp = "0x7bb37428";
})(Wn || (Wn = {}));
var ql = { signer: "0xfD90FAd33ee8b58f32c00aceEad1358e4AFC23f9", signature: "0x47003599ffa7e9198f321afa774e34a12a959844efd6363b88896e9c24ed33cf4e1be876ef123a3c4467e7d451511434039539699f2baa2f44955fa3d1c1c6d81c", isContractSignature: !1 }, L4 = { signer: "0xfD90FAd33ee8b58f32c00aceEad1358e4AFC23f9", signature: "0x000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e06c92f0ac5c4ef9e74721c23d80a9fc12f259ca84afb160f0890483539b9e6080d824c0e6c795157ad5d1ee5eff1ceeb3031009a595f9360919b83dd411c5a78d0000000000000000000000000000000000000000000000000000000000000025a24f744b28d73f066bf3203d145765a7bc735e6328168c8b03e476da3ad0d8fe0400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e226f726967696e223a2268747470733a2f2f736166652e676c6f62616c220000", isContractSignature: !0 };
function Bc(n) {
  return "0x" + n.map(function(e) {
    return i = (r = (t = e).operation) != null ? r : jn.Call, s = K(t.data), Gn(["uint8", "address", "uint256", "uint256", "bytes"], [i, t.to, t.value, s.length, s]).slice(2);
    var t, r, i, s;
  }).join("");
}
var M4 = /* @__PURE__ */ function() {
  function n(e, t, r) {
    this.address = void 0, this.generatorFunctionSelector = void 0, this.generatorFunctionInputAbi = void 0, this.address = e, this.generatorFunctionSelector = t, this.generatorFunctionInputAbi = r;
  }
  return n.prototype.getFactoryGeneratorFunctionCallData = function(e) {
    return Ee(this.generatorFunctionSelector, this.generatorFunctionInputAbi, e);
  }, n;
}(), ys = /* @__PURE__ */ function(n) {
  function e(t) {
    return t === void 0 && (t = e.DEFAULT_FACTORY_ADDRESS), n.call(this, t, "0x1688f0b9", ["address", "bytes", "uint256"]) || this;
  }
  return ac(e, n), e;
}(M4);
function Oh(n, e) {
  try {
    var t = n();
  } catch (r) {
    return e(r);
  }
  return t && t.then ? t.then(void 0, e) : t;
}
ys.DEFAULT_FACTORY_ADDRESS = "0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67";
var _e = /* @__PURE__ */ function(n) {
  function e(r, i, s, a) {
    var o;
    if (a === void 0 && (a = {}), (o = n.call(this, r) || this).isInitWebAuthn = void 0, o.x = null, o.y = null, o.entrypointAddress = void 0, o.safe4337ModuleAddress = void 0, o.factoryAddress = void 0, o.factoryData = void 0, o.onChainIdentifier = void 0, o.entrypointAddress = s, o.safe4337ModuleAddress = i, o.factoryAddress = null, o.factoryData = null, o.isInitWebAuthn = !1, a.onChainIdentifierParams != null && a.onChainIdentifier != null) throw RangeError("can't override both onChainIdentifier and onChainIdentifierParams");
    if (a.onChainIdentifierParams != null) o.onChainIdentifier = function(u, l, d, f) {
      l === void 0 && (l = "Web"), d === void 0 && (d = "abstractionkit"), f === void 0 && (f = "0.2.21");
      var p = pe("0x" + Buffer.from(u, "utf8").toString("hex")).slice(-20), y = pe("0x" + Buffer.from(l, "utf8").toString("hex")).slice(-3), h = pe("0x" + Buffer.from(d, "utf8").toString("hex")).slice(-3), b = pe("0x" + Buffer.from(f, "utf8").toString("hex")).slice(-3);
      return "5afe00" + Buffer.from(p, "utf8").toString("hex") + Buffer.from(y, "utf8").toString("hex") + Buffer.from(h, "utf8").toString("hex") + Buffer.from(b, "utf8").toString("hex");
    }(a.onChainIdentifierParams.project, a.onChainIdentifierParams.platform, a.onChainIdentifierParams.tool, a.onChainIdentifierParams.toolVersion);
    else if (a.onChainIdentifier != null) {
      var c = a.onChainIdentifier;
      if (c.startsWith("0x") && (c = c.slice(2)), c.length != 64) throw RangeError("onChainIdentifier length must be 64.");
      o.onChainIdentifier = c;
    } else o.onChainIdentifier = null;
    return o;
  }
  ac(e, n), e.createProxyAddress = function(r, i) {
    var s, a, o;
    i === void 0 && (i = {});
    var c = (s = i.c2Nonce) != null ? s : 0n;
    if (c < 0n) throw RangeError("c2Nonce can't be negative");
    var u = (a = i.safeFactoryAddress) != null ? a : ys.DEFAULT_FACTORY_ADDRESS, l = (o = i.singletonInitHash) != null ? o : e.DEFAULT_SAFE_SINGLETON.singletonInitHash, d = pe(Gn(["bytes32", "uint256"], [pe(r), c])), f = Vp(["bytes1", "address", "bytes32", "bytes32"], ["0xff", u, d, l]).slice(-40);
    return oe("0x" + f);
  }, e.createAccountCallDataSingleTransaction = function(r, i) {
    var s, a, o, c;
    i === void 0 && (i = {});
    var u = (s = r.value) != null ? s : 0, l = (a = r.data) != null ? a : "0x", d = (o = r.operation) != null ? o : jn.Call, f = (c = i.safeModuleExecutorFunctionSelector) != null ? c : e.DEFAULT_EXECUTOR_FUCNTION_SELECTOR;
    return e.createAccountCallData(r.to, u, l, d, { safeModuleExecutorFunctionSelector: f });
  }, e.createAccountCallDataBatchTransactions = function(r, i) {
    var s, a;
    if (i === void 0 && (i = {}), r.length < 1) throw RangeError("There should be at least one metaTransaction");
    var o = (s = i.safeModuleExecutorFunctionSelector) != null ? s : e.DEFAULT_EXECUTOR_FUCNTION_SELECTOR, c = (a = i.multisendContractAddress) != null ? a : e.DEFAULT_MULTISEND_CONTRACT_ADDRESS, u = Ee("0x8d80ff0a", ["bytes"], [Bc(r)]);
    return e.createAccountCallData(c, 0n, u, jn.Delegate, { safeModuleExecutorFunctionSelector: o });
  }, e.createAccountCallData = function(r, i, s, a, o) {
    var c;
    return o === void 0 && (o = {}), Ee((c = o.safeModuleExecutorFunctionSelector) != null ? c : e.DEFAULT_EXECUTOR_FUCNTION_SELECTOR, e.executorFunctionInputAbi, [r, i, s, a]);
  }, e.decodeAccountCallData = function(r) {
    var i = null;
    if (r.startsWith(Wn.executeUserOpWithErrorString) ? i = Wn.executeUserOpWithErrorString : r.startsWith(Wn.executeUserOp) && (i = Wn.executeUserOp), i != null) {
      var s, a = Xe.defaultAbiCoder(), o = "0x" + r.slice(10), c = a.decode(["address", "uint256", "bytes", "uint8"], o);
      return s = typeof c[2] != "string" ? new TextDecoder().decode(c[2]) : c[2], [{ to: c[0], value: BigInt(c[1]), data: s, operation: Number(c[3]) }, i];
    }
    throw new ne("BAD_DATA", "Invalid calldata, should start with " + Wn.executeUserOpWithErrorString + " or " + Wn.executeUserOp, { context: { callData: r } });
  }, e.prependTokenPaymasterApproveToCallDataStatic = function(r, i, s, a, o) {
    var c;
    o === void 0 && (o = {});
    var u = (c = o.multisendContractAddress) != null ? c : e.DEFAULT_MULTISEND_CONTRACT_ADDRESS, l = e.decodeAccountCallData(r), d = l[0], f = l[1], p = Bc([{ to: i, value: 0n, data: Ee(Qc("approve(address,uint256)"), ["address", "uint256"], [s, a]), operation: jn.Call }]), y = "", h = "0x8d80ff0a";
    if (d.data.startsWith(h)) {
      var b = function(w) {
        return Xe.defaultAbiCoder().decode(["bytes"], "0x" + w.slice(10))[0];
      }(d.data);
      y = b + p.slice(2);
    } else y = Bc([d]) + p.slice(2);
    var x = Ee(h, ["bytes"], [y]);
    return e.createAccountCallData(u, 0n, x, jn.Delegate, { safeModuleExecutorFunctionSelector: f });
  }, e.formatEip712SignaturesToUseroperationSignature = function(r, i, s) {
    var a, o;
    if (s === void 0 && (s = {}), r.length != i.length) throw RangeError("signersAddresses and signatures arrays should be the same length");
    var c = (a = s.validAfter) != null ? a : 0n, u = (o = s.validUntil) != null ? o : 0n, l = /* @__PURE__ */ new Map();
    r.forEach(function(p, y) {
      l.set(p.toLocaleLowerCase(), i[y]);
    });
    var d = new Map(Array.from(l).sort()), f = "0x" + Array.from(d.values()).reduce(function(p, y) {
      return p + y.slice(2);
    }, "");
    return e.formatEip712SingleSignatureToUseroperationSignature(f, { validAfter: c, validUntil: u });
  }, e.getUserOperationEip712Hash = function(r, i, s) {
    return s === void 0 && (s = {}), "initCode" in r ? e.getUserOperationEip712Hash_V6(r, i, s) : e.getUserOperationEip712Hash_V7(r, i, s);
  }, e.getUserOperationEip712Data = function(r, i, s) {
    if ("initCode" in r) {
      var a = e.getUserOperationEip712Data_V6(r, i, s);
      return { domain: a.domain, types: a.types, messageValue: a.messageValue };
    }
    var o = e.getUserOperationEip712Data_V7(r, i, s);
    return { domain: o.domain, types: o.types, messageValue: o.messageValue };
  }, e.getUserOperationEip712Data_V6 = function(r, i, s) {
    var a, o, c, u;
    s === void 0 && (s = {});
    var l = (a = s.validAfter) != null ? a : 0n, d = (o = s.validUntil) != null ? o : 0n, f = (c = s.entrypointAddress) != null ? c : Bt, p = (u = s.safe4337ModuleAddress) != null ? u : "0xa581c4A4DB7175302464fF3C06380BC3270b4037", y = { safe: r.sender, nonce: r.nonce, initCode: r.initCode, callData: r.callData, callGasLimit: r.callGasLimit, verificationGasLimit: r.verificationGasLimit, preVerificationGas: r.preVerificationGas, maxFeePerGas: r.maxFeePerGas, maxPriorityFeePerGas: r.maxPriorityFeePerGas, paymasterAndData: r.paymasterAndData, validAfter: l, validUntil: d, entryPoint: f };
    return { domain: { chainId: Number(i), verifyingContract: p }, types: S4, messageValue: y };
  }, e.getUserOperationEip712Hash_V6 = function(r, i, s) {
    s === void 0 && (s = {});
    var a = e.getUserOperationEip712Data_V6(r, i, s);
    return Zr.hash(a.domain, a.types, a.messageValue);
  }, e.getUserOperationEip712Data_V7 = function(r, i, s) {
    var a, o, c, u;
    s === void 0 && (s = {});
    var l = (a = s.validAfter) != null ? a : 0n, d = (o = s.validUntil) != null ? o : 0n, f = (c = s.entrypointAddress) != null ? c : Ue, p = (u = s.safe4337ModuleAddress) != null ? u : "0x75cf11467937ce3F2f357CE24ffc3DBF8fD5c226", y = Xe.defaultAbiCoder(), h = "0x";
    r.factory != null && (h = r.factory, r.factoryData != null && (h += r.factoryData.slice(2)));
    var b = "0x";
    r.paymaster != null && (b = r.paymaster, r.paymasterVerificationGasLimit != null && (b += y.encode(["uint128"], [r.paymasterVerificationGasLimit]).slice(34)), r.paymasterPostOpGasLimit != null && (b += y.encode(["uint128"], [r.paymasterPostOpGasLimit]).slice(34)), r.paymasterData != null && (b += r.paymasterData.slice(2)));
    var x = { safe: r.sender, nonce: r.nonce, initCode: h, callData: r.callData, verificationGasLimit: r.verificationGasLimit, callGasLimit: r.callGasLimit, preVerificationGas: r.preVerificationGas, maxPriorityFeePerGas: r.maxPriorityFeePerGas, maxFeePerGas: r.maxFeePerGas, paymasterAndData: b, validAfter: l, validUntil: d, entryPoint: f };
    return { domain: { chainId: Number(i), verifyingContract: p }, types: I4, messageValue: x };
  }, e.getUserOperationEip712Hash_V7 = function(r, i, s) {
    s === void 0 && (s = {});
    var a = e.getUserOperationEip712Data_V7(r, i, s);
    return Zr.hash(a.domain, a.types, a.messageValue);
  }, e.formatEip712SingleSignatureToUseroperationSignature = function(r, i) {
    var s, a;
    i === void 0 && (i = {});
    var o = (s = i.validAfter) != null ? s : 0n, c = (a = i.validUntil) != null ? a : 0n;
    if (o < 0n) throw RangeError("validAfter can't be negative");
    if (c < 0n) throw RangeError("validUntil can't be negative");
    return Gn(["uint48", "uint48", "bytes"], [o, c, r]);
  };
  var t = e.prototype;
  return t.sendUserOperation = function(r, i) {
    try {
      var s = this, a = new rf(i);
      return Promise.resolve(a.sendUserOperation(r, s.entrypointAddress)).then(function(o) {
        return new R4(o, a, s.entrypointAddress);
      });
    } catch (o) {
      return Promise.reject(o);
    }
  }, e.createAccountAddressAndFactoryAddressAndData = function(r, i, s, a) {
    var o, c, u, l, d, f, p, y;
    if (r.length < 1) throw RangeError("There should be at least one owner");
    var h, b = e.createBaseInitializerCallData(r, (o = i.threshold) != null ? o : 1, s, a, (c = i.multisendContractAddress) != null ? c : e.DEFAULT_MULTISEND_CONTRACT_ADDRESS, (u = i.webAuthnSharedSigner) != null ? u : e.DEFAULT_WEB_AUTHN_SHARED_SIGNER, (l = i.eip7212WebAuthnPrecompileVerifierForSharedSigner) != null ? l : e.DEFAULT_WEB_AUTHN_PRECOMPILE, (d = i.eip7212WebAuthnContractVerifierForSharedSigner) != null ? d : e.DEFAULT_WEB_AUTHN_FCLP256_VERIFIER);
    h = i.safeAccountFactoryAddress != null ? new ys(i.safeAccountFactoryAddress) : new ys();
    var x = (f = i.safeAccountSingleton) != null ? f : e.DEFAULT_SAFE_SINGLETON, w = this.createProxyAddress(b, { c2Nonce: (p = i.c2Nonce) != null ? p : 0n, safeFactoryAddress: h.address, singletonInitHash: x.singletonInitHash }), E = [x.singletonAddress, b, (y = i.c2Nonce) != null ? y : 0n], N = h.getFactoryGeneratorFunctionCallData(E);
    return [w, h.address, N];
  }, e.createBaseInitializerCallData = function(r, i, s, a, o, c, u, l) {
    if (o === void 0 && (o = e.DEFAULT_MULTISEND_CONTRACT_ADDRESS), c === void 0 && (c = e.DEFAULT_WEB_AUTHN_SHARED_SIGNER), u === void 0 && (u = e.DEFAULT_WEB_AUTHN_PRECOMPILE), l === void 0 && (l = e.DEFAULT_WEB_AUTHN_FCLP256_VERIFIER), r.length < 1) throw RangeError("There should be at least one owner");
    if (i < 1) throw RangeError("threshold should be at least one");
    if (i > r.length) throw RangeError("threshold can't be larger than number of owners");
    for (var d, f, p = Ee("0x8d0dc49f", ["address[]"], [[s]]), y = !1, h = [], b = to(r); !(f = b()).done; ) {
      var x = f.value;
      typeof x != "string" ? y = !0 : h.push(x);
    }
    if (y) {
      var w = [];
      w.push({ to: a, value: 0n, data: p, operation: jn.Delegate });
      for (var E, N = [], I = 0, B = to(r); !(E = B()).done; ) {
        var U = E.value;
        if (typeof U != "string") {
          if (I > 0) throw RangeError("Only one WebAuthn owner can be set during initialization");
          var C = Ee("0x0dd9692f", ["uint256", "uint256", "uint176"], [U.x, U.y, "0x" + u.slice(-4) + l.slice(2)]);
          w.push({ to: c, value: 0n, data: C, operation: jn.Delegate }), N.push(c), I++;
        } else N.push(U);
      }
      d = [N, i, o, Ee("0x8d80ff0a", ["bytes"], [Bc(w)]), s, ci, 0, ci];
    } else d = [h, i, a, p, s, ci, 0, ci];
    return Ee(e.initializerFunctionSelector, e.initializerFunctionInputAbi, d);
  }, e.createFactoryAddressAndData = function(r, i, s, a) {
    var o, c, u, l, d, f, p, y;
    if (i === void 0 && (i = {}), r.length < 1) throw RangeError("There should be at least one owner");
    var h = (o = i.threshold) != null ? o : 1, b = (c = i.c2Nonce) != null ? c : 0;
    if (h < 1) throw RangeError("threshold should be at least one");
    if (h > r.length) throw RangeError("threshold can't be larger than number of owners");
    if (b < 0n) throw RangeError("c2Nonce can't be negative");
    var x, w = e.createBaseInitializerCallData(r, (u = i.threshold) != null ? u : 1, s, a, (l = i.multisendContractAddress) != null ? l : e.DEFAULT_MULTISEND_CONTRACT_ADDRESS, (d = i.webAuthnSharedSigner) != null ? d : e.DEFAULT_WEB_AUTHN_SHARED_SIGNER, (f = i.eip7212WebAuthnPrecompileVerifierForSharedSigner) != null ? f : e.DEFAULT_WEB_AUTHN_PRECOMPILE, (p = i.eip7212WebAuthnContractVerifierForSharedSigner) != null ? p : e.DEFAULT_WEB_AUTHN_FCLP256_VERIFIER);
    x = i.safeAccountFactoryAddress != null ? new ys(i.safeAccountFactoryAddress) : new ys();
    var E = (y = i.safeAccountSingleton) != null ? y : e.DEFAULT_SAFE_SINGLETON, N = x.getFactoryGeneratorFunctionCallData([E.singletonAddress, w, b]);
    return [x.address, N];
  }, t.prependTokenPaymasterApproveToCallData = function(r, i, s, a, o) {
    var c;
    o === void 0 && (o = {});
    var u = (c = o.multisendContractAddress) != null ? c : e.DEFAULT_MULTISEND_CONTRACT_ADDRESS;
    return e.prependTokenPaymasterApproveToCallDataStatic(r, i, s, a, { multisendContractAddress: u });
  }, t.estimateUserOperationGas = function(r, i, s) {
    s === void 0 && (s = {});
    try {
      var a = 0xffffffffffffn, o = 0xffffffffffffn;
      if (s.dummySignerSignaturePairs != null) {
        if (s.expectedSigners != null) throw RangeError("Can't use both dummySignerSignaturePairs and expectedSigners overrides.");
        if (s.dummySignerSignaturePairs.length < 1) throw RangeError("Number of dummy signers signature pairs can't be less than 1");
        r.signature = e.formatSignaturesToUseroperationSignature(s.dummySignerSignaturePairs, { validAfter: a, validUntil: o });
      } else if (s.expectedSigners != null) {
        var c, u = e.createDummySignerSignaturePairForExpectedSigners(s.expectedSigners, { isInit: (c = "initCode" in r ? r.initCode : r.factory) != null && c != "0x", webAuthnSharedSigner: s.webAuthnSharedSigner, eip7212WebAuthnPrecompileVerifier: s.eip7212WebAuthnPrecompileVerifier, eip7212WebAuthnContractVerifier: s.eip7212WebAuthnContractVerifier, webAuthnSignerFactory: s.webAuthnSignerFactory, webAuthnSignerSingleton: s.webAuthnSignerSingleton, validAfter: a, validUntil: o });
        r.signature = e.formatSignaturesToUseroperationSignature(u, { validAfter: a, validUntil: o });
      } else r.signature.length < 3 && (r.signature = e.formatSignaturesToUseroperationSignature([ql], { validAfter: a, validUntil: o }));
      var l = new rf(i), d = r.maxFeePerGas, f = r.maxPriorityFeePerGas;
      return r.maxFeePerGas = 0n, r.maxPriorityFeePerGas = 0n, Promise.resolve(l.estimateUserOperationGas(r, this.entrypointAddress, s.stateOverrideSet)).then(function(p) {
        return r.maxFeePerGas = d, r.maxPriorityFeePerGas = f, [BigInt(p.preVerificationGas), s.dummySignerSignaturePairs != null ? BigInt(p.verificationGasLimit) + 55000n * BigInt(s.dummySignerSignaturePairs.length) : BigInt(p.verificationGasLimit), BigInt(p.callGasLimit)];
      });
    } catch (p) {
      return Promise.reject(p);
    }
  }, t.createBaseUserOperationAndFactoryAddressAndFactoryData = function(r, i, s, a, o) {
    o === void 0 && (o = {});
    try {
      var c, u, l, d = function() {
        var B, U, C, v, L, O, R, F;
        function M(Ye) {
          var rt, Wt, Re, it, wr, Ar;
          if (typeof o.preVerificationGas == "bigint" && o.preVerificationGas < 0n) throw RangeError("preVerificationGas overrid can't be negative");
          if (typeof o.verificationGasLimit == "bigint" && o.verificationGasLimit < 0n) throw RangeError("verificationGasLimit overrid can't be negative");
          if (typeof o.callGasLimit == "bigint" && o.callGasLimit < 0n) throw RangeError("callGasLimit overrid can't be negative");
          return Q.preVerificationGas = (rt = o.preVerificationGas) != null ? rt : Z * BigInt(Math.floor((((Wt = o.preVerificationGasPercentageMultiplier) != null ? Wt : 0) + 100) / 100)), Q.verificationGasLimit = (Re = o.verificationGasLimit) != null ? Re : Ce * BigInt(Math.floor((((it = o.verificationGasLimitPercentageMultiplier) != null ? it : 0) + 100) / 100)), Q.callGasLimit = (wr = o.callGasLimit) != null ? wr : Je * BigInt(Math.floor((((Ar = o.callGasLimitPercentageMultiplier) != null ? Ar : 0) + 100) / 100)), [Q, $, H];
        }
        w = (B = o.maxFeePerGas) != null ? B : w * BigInt(Math.floor((((U = o.maxFeePerGasPercentageMultiplier) != null ? U : 0) + 100) / 100)), E = (C = o.maxPriorityFeePerGas) != null ? C : E * BigInt(Math.floor((((v = o.maxPriorityFeePerGasPercentageMultiplier) != null ? v : 0) + 100) / 100));
        var P = (L = o.eip7212WebAuthnPrecompileVerifier) != null ? L : e.DEFAULT_WEB_AUTHN_PRECOMPILE, S = (O = o.eip7212WebAuthnContractVerifier) != null ? O : e.DEFAULT_WEB_AUTHN_FCLP256_VERIFIER, k = (R = o.webAuthnSignerFactory) != null ? R : e.DEFAULT_WEB_AUTHN_SIGNER_FACTORY, D = (F = o.webAuthnSignerSingleton) != null ? F : e.DEFAULT_WEB_AUTHN_SIGNER_SINGLETON, $ = f.factoryAddress, H = f.factoryData;
        if (b == null) throw RangeError("failed to determine nonce");
        if (b < 0n) throw RangeError("nonce can't be negative");
        if (b > 0n) $ = null, H = null;
        else if (f.isInitWebAuthn) {
          if (f.x == null || f.y == null) throw RangeError("Invalide account initialization with Webauthnn signer.Webauthnn signer publickey can be null!!");
          var W = e.createDeployWebAuthnVerifierMetaTransaction(f.x, f.y, { eip7212WebAuthnPrecompileVerifier: P, eip7212WebAuthnContractVerifier: S, webAuthnSignerFactory: k }), X = e.createWebAuthnSignerVerifierAddress(f.x, f.y, { eip7212WebAuthnPrecompileVerifier: P, eip7212WebAuthnContractVerifier: S, webAuthnSignerFactory: k, webAuthnSignerSingleton: D }), ie = Ee("0xe318b52b", ["address", "address", "address"], ["0x0000000000000000000000000000000000000001", p, X]);
          r = [W, { to: f.accountAddress, value: 0n, data: ie }].concat(r);
        }
        var se = "0x";
        se = o.callData == null ? r.length == 1 ? e.createAccountCallDataSingleTransaction(r[0], { safeModuleExecutorFunctionSelector: y }) : e.createAccountCallDataBatchTransactions(r, { safeModuleExecutorFunctionSelector: y, multisendContractAddress: h }) : o.callData, f.onChainIdentifier != null && (se += f.onChainIdentifier);
        var Q = Nn({}, us, { sender: f.accountAddress, nonce: b, callData: se, maxFeePerGas: w, maxPriorityFeePerGas: E }), Z = us.preVerificationGas, Ce = us.verificationGasLimit, Je = us.callGasLimit, Oe = function() {
          if (o.preVerificationGas == null || o.verificationGasLimit == null || o.callGasLimit == null) return function() {
            if (a != null) {
              Q.callGasLimit = 0n, Q.verificationGasLimit = 0n, Q.preVerificationGas = 0n;
              var Ye, rt = Q.maxFeePerGas, Wt = Q.maxPriorityFeePerGas;
              if (Q.maxFeePerGas = 0n, Q.maxPriorityFeePerGas = 0n, i) {
                var Re = "0x";
                $ != null && (Re = $, H != null && (Re += H.slice(2))), Ye = Nn({}, Q, { initCode: Re, paymasterAndData: "0x" });
              } else Ye = Nn({}, Q, { factory: $, factoryData: H, paymaster: null, paymasterVerificationGasLimit: null, paymasterPostOpGasLimit: null, paymasterData: null });
              var it, wr = 0xffffffffffffn, Ar = 0xffffffffffffn;
              if (o.dummySignerSignaturePairs != null) {
                if (o.expectedSigners != null) throw RangeError("Can't use both dummySignerSignaturePairs and expectedSigners overrides.");
                if (o.dummySignerSignaturePairs.length < 1) throw RangeError("Number of dummySignerSignaturePairs can't be less than 1");
                it = o.dummySignerSignaturePairs;
              } else it = o.expectedSigners == null ? [ql] : e.createDummySignerSignaturePairForExpectedSigners(o.expectedSigners, { isInit: $ != null && $ != "0x", webAuthnSharedSigner: p, eip7212WebAuthnPrecompileVerifier: P, eip7212WebAuthnContractVerifier: S, webAuthnSignerFactory: k, webAuthnSignerSingleton: D, validAfter: wr, validUntil: Ar });
              return Q.signature = e.formatSignaturesToUseroperationSignature(it, { validAfter: wr, validUntil: Ar, webAuthnSharedSigner: p }), Promise.resolve(f.estimateUserOperationGas(Ye, a, { stateOverrideSet: o.state_override_set })).then(function(al) {
                Z = al[0], Ce = al[1], Je = al[2], Ce += 55000n * BigInt(it.length), Q.maxFeePerGas = rt, Q.maxPriorityFeePerGas = Wt;
              });
            }
            throw new ne("BAD_DATA", "bundlerRpc cant't be null if preVerificationGas,verificationGasLimit and callGasLimit are not overriden");
          }();
        }();
        return Oe && Oe.then ? Oe.then(M) : M();
      }, f = this;
      if (r.length < 1) throw RangeError("There should be at least one transaction");
      var p = (c = o.webAuthnSharedSigner) != null ? c : e.DEFAULT_WEB_AUTHN_SHARED_SIGNER, y = (u = o.safeModuleExecutorFunctionSelector) != null ? u : e.DEFAULT_EXECUTOR_FUCNTION_SELECTOR, h = (l = o.multisendContractAddress) != null ? l : e.DEFAULT_MULTISEND_CONTRACT_ADDRESS, b = null, x = null;
      if (o.nonce == null) {
        if (s == null) throw new ne("BAD_DATA", "providerRpc cant't be null if nonce is not overriden");
        x = Ch(s, f.entrypointAddress, f.accountAddress);
      } else b = o.nonce;
      if (typeof o.maxFeePerGas == "bigint" && o.maxFeePerGas < 0n) throw RangeError("maxFeePerGas overrid can't be negative");
      if (typeof o.maxPriorityFeePerGas == "bigint" && o.maxPriorityFeePerGas < 0n) throw RangeError("maxPriorityFeePerGas overrid can't be negative");
      var w = us.maxFeePerGas, E = us.maxPriorityFeePerGas, N = null;
      o.maxFeePerGas != null && o.maxPriorityFeePerGas != null || (N = C4(s, o.polygonGasStation, o.gasLevel));
      var I = function() {
        if (N != null && x != null) return Promise.resolve(Promise.all([x, N]).then(function(U) {
          b = U[0];
          var C = U[1];
          w = C[0], E = C[1];
        })).then(function() {
        });
        var B = function() {
          if (N != null) return Promise.resolve(N).then(function(C) {
            w = C[0], E = C[1];
          });
          var U = function() {
            if (x != null) return Promise.resolve(x).then(function(C) {
              b = C;
            });
          }();
          return U && U.then ? U.then(function() {
          }) : void 0;
        }();
        return B && B.then ? B.then(function() {
        }) : void 0;
      }();
      return Promise.resolve(I && I.then ? I.then(d) : d());
    } catch (B) {
      return Promise.reject(B);
    }
  }, t.signUserOperation = function(r, i, s, a) {
    var o, c;
    a === void 0 && (a = {});
    var u = (o = a.validAfter) != null ? o : 0n, l = (c = a.validUntil) != null ? c : 0n;
    if (i.length < 1) throw RangeError("There should be at least one privateKey");
    if (s < 0n) throw RangeError("chainId can't be negative");
    if (u < 0n) throw RangeError("validAfter can't be negative");
    if (l < 0n) throw RangeError("validUntil can't be negative");
    for (var d, f = e.getUserOperationEip712Hash(r, s, { validAfter: u, validUntil: l, entrypointAddress: this.entrypointAddress, safe4337ModuleAddress: this.safe4337ModuleAddress }), p = [], y = [], h = to(i); !(d = h()).done; ) {
      var b = new Xd(d.value), x = b.signingKey.sign(f).serialized;
      p.push(b.address), y.push(x);
    }
    return e.formatEip712SignaturesToUseroperationSignature(p, y, { validAfter: u, validUntil: l });
  }, e.createWebAuthnSignerVerifierAddress = function(r, i, s) {
    var a, o, c, u;
    s === void 0 && (s = {});
    var l = (a = s.eip7212WebAuthnPrecompileVerifier) != null ? a : e.DEFAULT_WEB_AUTHN_PRECOMPILE, d = (o = s.eip7212WebAuthnContractVerifier) != null ? o : e.DEFAULT_WEB_AUTHN_FCLP256_VERIFIER, f = (c = s.webAuthnSignerFactory) != null ? c : e.DEFAULT_WEB_AUTHN_SIGNER_FACTORY, p = (u = s.webAuthnSignerSingleton) != null ? u : e.DEFAULT_WEB_AUTHN_SIGNER_SINGLETON;
    if (l.length != 42 || l.slice(0, 38) != ci.slice(0, 38)) throw RangeError("Invalide precompile address. It should have the format 0x000000000000000000000000000000000000____");
    var y = pe(Gn(["bytes", "uint256", "uint256", "uint256", "uint256"], [e.DEFAULT_WEB_AUTHN_SIGNER_PROXY_CREATION_CODE, p, r, i, "0x" + l.slice(-4) + d.slice(2)]));
    return "0x" + Vp(["bytes1", "address", "bytes32", "bytes32"], ["0xff", f, "0x0000000000000000000000000000000000000000000000000000000000000000", y]).slice(-40);
  }, e.formatSignaturesToUseroperationSignature = function(r, i) {
    var s, a;
    i === void 0 && (i = {});
    var o = (s = i.validAfter) != null ? s : 0n, c = (a = i.validUntil) != null ? a : 0n, u = this.buildSignaturesFromSingerSignaturePairs(r, i);
    return Gn(["uint48", "uint48", "bytes"], [o, c, u]);
  }, e.getSignerLowerCaseAddress = function(r, i) {
    if (i === void 0 && (i = {}), typeof r == "string") return r.toLowerCase();
    var s, a, o, c, u = (s = i.eip7212WebAuthnPrecompileVerifier) != null ? s : e.DEFAULT_WEB_AUTHN_PRECOMPILE, l = (a = i.eip7212WebAuthnContractVerifier) != null ? a : e.DEFAULT_WEB_AUTHN_FCLP256_VERIFIER, d = (o = i.webAuthnSignerFactory) != null ? o : e.DEFAULT_WEB_AUTHN_SIGNER_FACTORY, f = (c = i.webAuthnSignerSingleton) != null ? c : e.DEFAULT_WEB_AUTHN_SIGNER_SINGLETON;
    return e.createWebAuthnSignerVerifierAddress(r.x, r.y, { eip7212WebAuthnPrecompileVerifier: u, eip7212WebAuthnContractVerifier: l, webAuthnSignerFactory: d, webAuthnSignerSingleton: f }).toLowerCase();
  }, e.sortSignatures = function(r, i) {
    i === void 0 && (i = {}), r.sort(function(s, a) {
      return e.getSignerLowerCaseAddress(s.signer, i).localeCompare(e.getSignerLowerCaseAddress(a.signer, i));
    });
  }, e.buildSignaturesFromSingerSignaturePairs = function(r, i) {
    i === void 0 && (i = {}), e.sortSignatures(r, i);
    var s = 65 * r.length, a = r.reduce(function(o, c) {
      var u = o.segments, l = o.offset, d = c.signer, f = c.signature, p = c.isContractSignature;
      if (p = p || typeof d != "string") {
        if (typeof d != "string") {
          if (i.isInit == null) throw RangeError("Must define isInit parameter when using WebAuthn");
          if (i.isInit) {
            var y;
            d = (y = i.webAuthnSharedSigner) != null ? y : e.DEFAULT_WEB_AUTHN_SHARED_SIGNER;
          } else {
            var h, b, x, w, E = (h = i.eip7212WebAuthnPrecompileVerifier) != null ? h : e.DEFAULT_WEB_AUTHN_PRECOMPILE, N = (b = i.eip7212WebAuthnContractVerifier) != null ? b : e.DEFAULT_WEB_AUTHN_FCLP256_VERIFIER, I = (x = i.webAuthnSignerFactory) != null ? x : e.DEFAULT_WEB_AUTHN_SIGNER_FACTORY, B = (w = i.webAuthnSignerSingleton) != null ? w : e.DEFAULT_WEB_AUTHN_SIGNER_SINGLETON;
            d = e.createWebAuthnSignerVerifierAddress(d.x, d.y, { eip7212WebAuthnPrecompileVerifier: E, eip7212WebAuthnContractVerifier: N, webAuthnSignerFactory: I, webAuthnSignerSingleton: B });
          }
        }
        return { segments: [].concat(u, [Gn(["uint256", "uint256", "uint8"], [d, s + l, 0])]), offset: l + 32 + or(f) };
      }
      return { segments: [].concat(u, [Gn(["bytes"], [f])]), offset: l };
    }, { segments: [], offset: 0 });
    return le([].concat(a.segments, r.map(function(o) {
      var c = o.signature, u = o.isContractSignature;
      return (u = u || typeof o.signer != "string") ? Gn(["uint256", "bytes"], [or(c), c]) : "0x";
    })));
  }, e.createWebAuthnSignature = function(r) {
    return Xe.defaultAbiCoder().encode(["bytes", "bytes", "uint256[2]"], [new Uint8Array(r.authenticatorData), r.clientDataFields, r.rs]);
  }, t.createSwapOwnerMetaTransactions = function(r, i, s, a) {
    a === void 0 && (a = {});
    try {
      var o, c, u = function() {
        function p(b) {
          var x = l.createStandardSwapOwnerMetaTransaction(o, c, y);
          return d == null ? [x] : [d, x];
        }
        c = typeof s != "string" ? e.createWebAuthnSignerVerifierAddress(s.x, s.y, { eip7212WebAuthnPrecompileVerifier: a.eip7212WebAuthnPrecompileVerifier, eip7212WebAuthnContractVerifier: a.eip7212WebAuthnContractVerifier, webAuthnSignerFactory: a.webAuthnSignerFactory, webAuthnSignerSingleton: a.webAuthnSignerSingleton }) : s;
        var y = a.prevOwner, h = function() {
          if (y == null) return Promise.resolve(l.getOwners(r)).then(function(b) {
            var x = b.indexOf(c);
            if (x == -1) throw RangeError("oldOwner is not a current owner.");
            if (x == 0) y = "0x0000000000000000000000000000000000000001";
            else {
              if (!(x > 0)) throw RangeError("Invalid owner index");
              y = b[x - 1];
            }
          });
        }();
        return h && h.then ? h.then(p) : p();
      }, l = this, d = null, f = function() {
        if (typeof i != "string") return o = e.createWebAuthnSignerVerifierAddress(i.x, i.y, { eip7212WebAuthnPrecompileVerifier: a.eip7212WebAuthnPrecompileVerifier, eip7212WebAuthnContractVerifier: a.eip7212WebAuthnContractVerifier, webAuthnSignerFactory: a.webAuthnSignerFactory, webAuthnSignerSingleton: a.webAuthnSignerSingleton }), Promise.resolve(Ih(r, o, "latest")).then(function(p) {
          p.length < 3 && (d = e.createDeployWebAuthnVerifierMetaTransaction(i.x, i.y, { eip7212WebAuthnPrecompileVerifier: a.eip7212WebAuthnPrecompileVerifier, eip7212WebAuthnContractVerifier: a.eip7212WebAuthnContractVerifier, webAuthnSignerFactory: a.webAuthnSignerFactory }));
        });
        o = i;
      }();
      return Promise.resolve(f && f.then ? f.then(u) : u());
    } catch (p) {
      return Promise.reject(p);
    }
  }, t.createRemoveOwnerMetaTransaction = function(r, i, s, a) {
    a === void 0 && (a = {});
    try {
      var o, c = function(f) {
        return u.createStandardRemoveOwnerMetaTransaction(o, s, l);
      }, u = this;
      o = typeof i != "string" ? e.createWebAuthnSignerVerifierAddress(i.x, i.y, { eip7212WebAuthnPrecompileVerifier: a.eip7212WebAuthnPrecompileVerifier, eip7212WebAuthnContractVerifier: a.eip7212WebAuthnContractVerifier, webAuthnSignerFactory: a.webAuthnSignerFactory, webAuthnSignerSingleton: a.webAuthnSignerSingleton }) : i;
      var l = a.prevOwner, d = function() {
        if (l == null) return Promise.resolve(u.getOwners(r)).then(function(f) {
          var p = f.indexOf(o);
          if (p == -1) throw RangeError("ownerToDelete is not a current owner.");
          if (p == 0) l = "0x0000000000000000000000000000000000000001";
          else {
            if (!(p > 0)) throw RangeError("Invalid owner index");
            l = f[p - 1];
          }
        });
      }();
      return Promise.resolve(d && d.then ? d.then(c) : c());
    } catch (f) {
      return Promise.reject(f);
    }
  }, t.createAddOwnerWithThresholdMetaTransactions = function(r, i, s) {
    s === void 0 && (s = {});
    try {
      var a, o = function(d) {
        var f = c.createStandardAddOwnerWithThresholdMetaTransaction(a, i);
        return u == null ? [f] : [u, f];
      }, c = this, u = null, l = function() {
        if (typeof r != "string") {
          if (a = e.createWebAuthnSignerVerifierAddress(r.x, r.y, { eip7212WebAuthnPrecompileVerifier: s.eip7212WebAuthnPrecompileVerifier, eip7212WebAuthnContractVerifier: s.eip7212WebAuthnContractVerifier, webAuthnSignerFactory: s.webAuthnSignerFactory, webAuthnSignerSingleton: s.webAuthnSignerSingleton }), s.nodeRpcUrl == null) throw RangeError("overrides.nodeRpcUrl can't be null if adding a webauthn owner");
          return Promise.resolve(Ih(s.nodeRpcUrl, a, "latest")).then(function(d) {
            d.length < 3 && (u = e.createDeployWebAuthnVerifierMetaTransaction(r.x, r.y, { eip7212WebAuthnPrecompileVerifier: s.eip7212WebAuthnPrecompileVerifier, eip7212WebAuthnContractVerifier: s.eip7212WebAuthnContractVerifier, webAuthnSignerFactory: s.webAuthnSignerFactory }));
          });
        }
        a = r;
      }();
      return Promise.resolve(l && l.then ? l.then(o) : o());
    } catch (d) {
      return Promise.reject(d);
    }
  }, t.createStandardAddOwnerWithThresholdMetaTransaction = function(r, i) {
    var s = Ee("0x0d582f13", ["address", "uint256"], [r, i]);
    return { to: this.accountAddress, data: s, value: 0n };
  }, t.createStandardSwapOwnerMetaTransaction = function(r, i, s) {
    var a = Ee("0xe318b52b", ["address", "address", "address"], [s, i, r]);
    return { to: this.accountAddress, data: a, value: 0n };
  }, t.createStandardRemoveOwnerMetaTransaction = function(r, i, s) {
    var a = Ee("0xf8dc5dd9", ["address", "address", "uint256"], [s, r, i]);
    return { to: this.accountAddress, data: a, value: 0n };
  }, e.createDeployWebAuthnVerifierMetaTransaction = function(r, i, s) {
    var a, o, c;
    s === void 0 && (s = {});
    var u = (a = s.eip7212WebAuthnPrecompileVerifier) != null ? a : e.DEFAULT_WEB_AUTHN_PRECOMPILE, l = (o = s.eip7212WebAuthnContractVerifier) != null ? o : e.DEFAULT_WEB_AUTHN_FCLP256_VERIFIER;
    return { to: (c = s.webAuthnSignerFactory) != null ? c : e.DEFAULT_WEB_AUTHN_SIGNER_FACTORY, value: 0n, data: Ee("0x0d2f0489", ["uint256", "uint256", "uint176"], [r, i, "0x" + u.slice(-4) + l.slice(2)]) };
  }, t.getOwners = function(r) {
    try {
      var i = Ee(Qc("getOwners()"), [], []);
      return Promise.resolve(Nc(r, { to: this.accountAddress, data: i }, "latest")).then(function(s) {
        return Xe.defaultAbiCoder().decode(["address[]"], s)[0];
      });
    } catch (s) {
      return Promise.reject(s);
    }
  }, t.getModules = function(r, i) {
    i === void 0 && (i = {});
    try {
      var s = this;
      return Promise.resolve(Oh(function() {
        var a = i.start;
        a == null && (a = "0x0000000000000000000000000000000000000001");
        var o = i.pageSize;
        o == null && (o = 10n);
        var c = Ee("0xcc2f8452", ["address", "uint256"], [a, o]);
        return Promise.resolve(Nc(r, { to: s.accountAddress, data: c }, "latest")).then(function(u) {
          if (u == "0x") throw new ne("BAD_DATA", "getModules retuned an empty result, the target account is probably not deployed yet.");
          var l = Xe.defaultAbiCoder().decode(["address[]", "address"], u);
          return [l[0], l[1]];
        });
      }, function(a) {
        var o = xe(a);
        throw new ne("BAD_DATA", "getModules failed", { cause: o });
      }));
    } catch (a) {
      return Promise.reject(a);
    }
  }, t.isModuleEnabled = function(r, i) {
    try {
      var s = Ee(Qc("isModuleEnabled(address)"), ["address"], [i]);
      return Promise.resolve(Nc(r, { to: this.accountAddress, data: s }, "latest")).then(function(a) {
        return Xe.defaultAbiCoder().decode(["bool"], a)[0];
      });
    } catch (a) {
      return Promise.reject(a);
    }
  }, e.createDummySignerSignaturePairForExpectedSigners = function(r, i) {
    i === void 0 && (i = {});
    for (var s, a = [], o = to([].concat(r)); !(s = o()).done; ) {
      var c = s.value, u = void 0;
      if (typeof c == "string") u = ql;
      else {
        if (i.isInit == null) throw RangeError("Must define isInit parameter when using WebAuthn");
        if (u = L4, i.isInit) {
          var l, d = (l = i.webAuthnSharedSigner) != null ? l : e.DEFAULT_WEB_AUTHN_SHARED_SIGNER;
          u.signer = d;
        } else {
          var f, p, y, h, b = (f = i.eip7212WebAuthnPrecompileVerifier) != null ? f : e.DEFAULT_WEB_AUTHN_PRECOMPILE, x = (p = i.eip7212WebAuthnContractVerifier) != null ? p : e.DEFAULT_WEB_AUTHN_FCLP256_VERIFIER, w = (y = i.webAuthnSignerFactory) != null ? y : e.DEFAULT_WEB_AUTHN_SIGNER_FACTORY, E = (h = i.webAuthnSignerSingleton) != null ? h : e.DEFAULT_WEB_AUTHN_SIGNER_SINGLETON;
          u.signer = e.createWebAuthnSignerVerifierAddress(c.x, c.y, { eip7212WebAuthnPrecompileVerifier: b, eip7212WebAuthnContractVerifier: x, webAuthnSignerFactory: w, webAuthnSignerSingleton: E });
        }
      }
      a.push(u);
    }
    return a;
  }, e.verifyWebAuthnSignatureForMessageHash = function(r, i, s, a, o) {
    o === void 0 && (o = {});
    try {
      var c, u, l, d;
      if (s.length != 66 || s.slice(0, 2) != "0x") throw RangeError("Invalide messageHash ,must be a 0x prefixed keccak256 hash.");
      var f = (c = o.eip7212WebAuthnPrecompileVerifier) != null ? c : e.DEFAULT_WEB_AUTHN_PRECOMPILE, p = (u = o.eip7212WebAuthnContractVerifier) != null ? u : e.DEFAULT_WEB_AUTHN_FCLP256_VERIFIER, y = (l = o.webAuthnSignerSingleton) != null ? l : e.DEFAULT_WEB_AUTHN_SIGNER_SINGLETON;
      if (f.length != 42 || f.slice(0, 38) != ci.slice(0, 38)) throw RangeError("Invalide precompile address. It should have the format 0x000000000000000000000000000000000000____");
      var h = Ee("0x1626ba7e", ["bytes32", "bytes"], [s, a]), b = "0x1111111111111111111111111111111111111111", x = { to: b, data: h }, w = e.createSafeWebAuthnSignerProxyDeployedByteCode(i, f, p, y);
      return Promise.resolve(Nc(r, x, "latest", (d = {}, d[b] = { code: w }, d))).then(function(E) {
        return Xe.defaultAbiCoder().decode(["bool"], E)[0];
      });
    } catch (E) {
      return Promise.reject(E);
    }
  }, e.createSafeWebAuthnSignerProxyDeployedByteCode = function(r, i, s, a) {
    var o = Xe.defaultAbiCoder(), c = o.encode(["uint256"], [r.x]), u = o.encode(["uint256"], [r.y]);
    return "0x608060408190527f" + o.encode(["uint176"], ["0x" + i.slice(-4) + s.slice(2)]).slice(2) + "3660b681018290527f" + u.slice(2) + "60a082018190527f" + c.slice(2) + "8285018190527f000000000000000000000000" + a.slice(2) + "9490939192600082376000806056360183885af490503d6000803e8060c3573d6000fd5b503d6000f3fea2646970667358221220ddd9bb059ba7a6497d560ca97aadf4dbf0476f578378554a50d41c6bb654beae64736f6c63430008180033";
  }, e.createEnableModuleMetaTransaction = function(r, i) {
    return { to: i, data: Ee("0x610b5925", ["address"], [r]), value: 0n };
  }, t.createDisableModuleMetaTransaction = function(r, i, s, a) {
    a === void 0 && (a = {});
    try {
      var o = this;
      return Promise.resolve(Oh(function() {
        function c(d) {
          return e.createStandardDisableModuleMetaTransaction(i, u, s);
        }
        var u = a.prevModuleAddress, l = function() {
          if (u == null) return Promise.resolve(o.getModules(r, { start: a.modulesStart, pageSize: a.modulesPageSize })).then(function(d) {
            var f = d[0], p = f.indexOf(i);
            if (p == -1) throw RangeError("moduleToDisable " + i + " is not an enabled module.");
            if (p == 0) u = "0x0000000000000000000000000000000000000001";
            else {
              if (!(p > 0)) throw RangeError("Invalid module index for " + i);
              u = f[p - 1];
            }
          });
        }();
        return l && l.then ? l.then(c) : c();
      }, function(c) {
        var u = xe(c);
        throw new ne("BAD_DATA", "createDisableModuleMetaTransaction failed", { cause: u });
      }));
    } catch (c) {
      return Promise.reject(c);
    }
  }, e.createStandardDisableModuleMetaTransaction = function(r, i, s) {
    return { to: s, data: Ee("0xe009cfde", ["address", "address"], [i, r]), value: 0n };
  }, t.simulateCallDataWithTenderlyAndCreateShareLink = function(r, i, s, a, o, c, u, l) {
    a === void 0 && (a = null), u === void 0 && (u = null), l === void 0 && (l = {});
    try {
      var d = function(h) {
        var b, x;
        return x = l.callData == null ? c.length == 1 ? e.createAccountCallDataSingleTransaction(c[0], { safeModuleExecutorFunctionSelector: l.safeModuleExecutorFunctionSelector }) : e.createAccountCallDataBatchTransactions(c, { safeModuleExecutorFunctionSelector: l.safeModuleExecutorFunctionSelector, multisendContractAddress: l.multisendContractAddress }) : l.callData, (b = l.createShareLink) == null || b ? Promise.resolve(_4(r, i, s, o, f.entrypointAddress, f.accountAddress, x, p ? f.factoryAddress : null, p ? f.factoryData : null, u)) : Promise.resolve(Yx(r, i, s, o, f.entrypointAddress, f.accountAddress, x, p ? f.factoryAddress : null, p ? f.factoryData : null, u)).then(function(w) {
          return { simulation: w };
        });
      }, f = this, p = !1, y = function() {
        if (a == null && l.isInit == null) throw RangeError("nodeRpcUrl and overrides.isInit can't both be null");
        var h = function() {
          if (l.isInit == null) return Promise.resolve(Ch(a, f.entrypointAddress, f.accountAddress)).then(function(b) {
            p = b == 0n;
          });
          p = l.isInit;
        }();
        if (h && h.then) return h.then(function() {
        });
      }();
      return Promise.resolve(y && y.then ? y.then(d) : d());
    } catch (h) {
      return Promise.reject(h);
    }
  }, e;
}(hs);
_e.DEFAULT_SAFE_SINGLETON = { singletonAddress: "0x29fcB43b46531BcA003ddC8FCB67FFE91900C762", singletonInitHash: "0xe298282cefe913ab5d282047161268a8222e4bd4ed106300c547894bbefd31ee" }, _e.DEFAULT_WEB_AUTHN_SHARED_SIGNER = "0xfD90FAd33ee8b58f32c00aceEad1358e4AFC23f9", _e.DEFAULT_WEB_AUTHN_SIGNER_SINGLETON = "0x270D7E4a57E6322f336261f3EaE2BADe72E68d72", _e.DEFAULT_WEB_AUTHN_SIGNER_FACTORY = "0xF7488fFbe67327ac9f37D5F722d83Fc900852Fbf", _e.DEFAULT_WEB_AUTHN_FCLP256_VERIFIER = "0x445a0683e494ea0c5AF3E83c5159fBE47Cf9e765", _e.DEFAULT_WEB_AUTHN_PRECOMPILE = "0x0000000000000000000000000000000000000000", _e.DEFAULT_WEB_AUTHN_SIGNER_PROXY_CREATION_CODE = "0x61010060405234801561001157600080fd5b506040516101ee3803806101ee83398101604081905261003091610058565b6001600160a01b0390931660805260a09190915260c0526001600160b01b031660e0526100bc565b6000806000806080858703121561006e57600080fd5b84516001600160a01b038116811461008557600080fd5b60208601516040870151606088015192965090945092506001600160b01b03811681146100b157600080fd5b939692955090935050565b60805160a05160c05160e05160ff6100ef60003960006008015260006031015260006059015260006080015260ff6000f3fe608060408190527f00000000000000000000000000000000000000000000000000000000000000003660b681018290527f000000000000000000000000000000000000000000000000000000000000000060a082018190527f00000000000000000000000000000000000000000000000000000000000000008285018190527f00000000000000000000000000000000000000000000000000000000000000009490939192600082376000806056360183885af490503d6000803e8060c3573d6000fd5b503d6000f3fea2646970667358221220ddd9bb059ba7a6497d560ca97aadf4dbf0476f578378554a50d41c6bb654beae64736f6c63430008180033", _e.DEFAULT_MULTISEND_CONTRACT_ADDRESS = "0x38869bf66a61cF6bDB996A6aE40D5853Fd43B526", _e.initializerFunctionSelector = "0xb63e800d", _e.initializerFunctionInputAbi = ["address[]", "uint256", "address", "bytes", "address", "address", "uint256", "address"], _e.DEFAULT_EXECUTOR_FUCNTION_SELECTOR = Wn.executeUserOpWithErrorString, _e.executorFunctionInputAbi = ["address", "uint256", "bytes", "uint8"];
var sf;
(function(n) {
  n.After3Minutes = "0x949d01d424bE050D09C16025dd007CB59b3A8c66", n.After3Days = "0x38275826E1933303E508433dD5f289315Da2541c", n.After7Days = "0x088f6cfD8BB1dDb1BB069CCb3fc1A98927D233f2", n.After14Days = "0x9BacD92F4687Db306D7ded5d4513a51EA05df25b";
})(sf || (sf = {}));
sf.After3Days;
var Vt = /* @__PURE__ */ function(n) {
  function e(t, r) {
    var i, s;
    r === void 0 && (r = {});
    var a = (i = r.safe4337ModuleAddress) != null ? i : e.DEFAULT_SAFE_4337_MODULE_ADDRESS, o = (s = r.entrypointAddress) != null ? s : e.DEFAULT_ENTRYPOINT_ADDRESS;
    return n.call(this, t, a, o, { onChainIdentifierParams: r.onChainIdentifierParams, onChainIdentifier: r.onChainIdentifier }) || this;
  }
  return ac(e, n), e.createAccountAddress = function(t, r) {
    var i, s;
    return r === void 0 && (r = {}), _e.createAccountAddressAndFactoryAddressAndData(t, r, (i = r.safe4337ModuleAddress) != null ? i : e.DEFAULT_SAFE_4337_MODULE_ADDRESS, (s = r.safeModuleSetupddress) != null ? s : e.DEFAULT_SAFE_MODULE_SETUP_ADDRESS)[0];
  }, e.initializeNewAccount = function(t, r) {
    var i, s;
    r === void 0 && (r = {});
    for (var a, o = !1, c = 0n, u = 0n, l = to(t); !(a = l()).done; ) {
      var d = a.value;
      if (typeof d != "string") {
        if (o) throw RangeError("Only one Webauthn signer is allowed during initialization");
        if (t.indexOf(d) != 0) throw RangeError("Webauthn owner has to be the first owner for an init transaction.");
        o = !0, c = d.x, u = d.y;
      }
    }
    var f = e.createAccountAddressAndFactoryAddressAndData(t, r, (i = r.safe4337ModuleAddress) != null ? i : e.DEFAULT_SAFE_4337_MODULE_ADDRESS, (s = r.safeModuleSetupddress) != null ? s : e.DEFAULT_SAFE_MODULE_SETUP_ADDRESS), p = f[1], y = f[2], h = new e(f[0], { safe4337ModuleAddress: r.safe4337ModuleAddress, entrypointAddress: r.entrypointAddress, onChainIdentifierParams: r.onChainIdentifierParams, onChainIdentifier: r.onChainIdentifier });
    return h.factoryAddress = p, h.factoryData = y, o && (h.isInitWebAuthn = !0, h.x = c, h.y = u), h;
  }, e.getUserOperationEip712Hash = function(t, r, i) {
    var s, a, o, c;
    i === void 0 && (i = {});
    var u = (s = i.validAfter) != null ? s : 0n, l = (a = i.validUntil) != null ? a : 0n, d = (o = i.entrypointAddress) != null ? o : e.DEFAULT_ENTRYPOINT_ADDRESS, f = (c = i.safe4337ModuleAddress) != null ? c : e.DEFAULT_SAFE_4337_MODULE_ADDRESS;
    return _e.getUserOperationEip712Hash(t, r, { validAfter: u, validUntil: l, entrypointAddress: d, safe4337ModuleAddress: f });
  }, e.getUserOperationEip712Data = function(t, r, i) {
    var s, a, o, c;
    i === void 0 && (i = {});
    var u = (s = i.validAfter) != null ? s : 0n, l = (a = i.validUntil) != null ? a : 0n, d = (o = i.entrypointAddress) != null ? o : e.DEFAULT_ENTRYPOINT_ADDRESS, f = (c = i.safe4337ModuleAddress) != null ? c : e.DEFAULT_SAFE_4337_MODULE_ADDRESS;
    return _e.getUserOperationEip712Data(t, r, { validAfter: u, validUntil: l, entrypointAddress: d, safe4337ModuleAddress: f });
  }, e.createInitializerCallData = function(t, r, i) {
    var s, a;
    i === void 0 && (i = {});
    var o = (s = i.safe4337ModuleAddress) != null ? s : e.DEFAULT_SAFE_4337_MODULE_ADDRESS, c = (a = i.safeModuleSetupddress) != null ? a : e.DEFAULT_SAFE_MODULE_SETUP_ADDRESS;
    return _e.createBaseInitializerCallData(t, r, o, c, i.multisendContractAddress, i.webAuthnSharedSigner, i.eip7212WebAuthnPrecompileVerifierForSharedSigner, i.eip7212WebAuthnContractVerifierForSharedSigner);
  }, e.createFactoryAddressAndData = function(t, r) {
    var i, s;
    return r === void 0 && (r = {}), _e.createFactoryAddressAndData(t, r, (i = r.safe4337ModuleAddress) != null ? i : e.DEFAULT_SAFE_4337_MODULE_ADDRESS, (s = r.safeModuleSetupddress) != null ? s : e.DEFAULT_SAFE_MODULE_SETUP_ADDRESS);
  }, e.prototype.createUserOperation = function(t, r, i, s) {
    s === void 0 && (s = {});
    try {
      return Promise.resolve(this.createBaseUserOperationAndFactoryAddressAndFactoryData(t, !1, r, i, s)).then(function(a) {
        return Nn({}, a[0], { factory: a[1], factoryData: a[2], paymaster: null, paymasterVerificationGasLimit: null, paymasterPostOpGasLimit: null, paymasterData: null });
      });
    } catch (a) {
      return Promise.reject(a);
    }
  }, e;
}(_e);
Vt.DEFAULT_ENTRYPOINT_ADDRESS = Ue, Vt.DEFAULT_SAFE_4337_MODULE_ADDRESS = "0x75cf11467937ce3F2f357CE24ffc3DBF8fD5c226", Vt.DEFAULT_SAFE_MODULE_SETUP_ADDRESS = "0x2dd68b007B46fBe91B9A7c3EDa5A7a1063cB5b47";
function Cr(n, e) {
  try {
    var t = n();
  } catch (r) {
    return e(r);
  }
  return t && t.then ? t.then(void 0, e) : t;
}
var s0 = /* @__PURE__ */ function(n) {
  function e(r) {
    var i;
    return (i = n.call(this) || this).rpcUrl = void 0, i.version = void 0, i.entrypointDataV8 = void 0, i.entrypointDataV7 = void 0, i.entrypointDataV6 = void 0, i.initialized = !1, i.rpcUrl = r, i;
  }
  ac(e, n);
  var t = e.prototype;
  return t.initialize = function() {
    try {
      var r = this;
      return Promise.resolve(Cr(function() {
        return Promise.resolve(Te(r.rpcUrl, "pm_clientVersion", [])).then(function(i) {
          if (i.startsWith("Candide/v3")) r.version = "v3";
          else {
            if (!i.startsWith("Candide/v2")) throw RangeError("Invalid paymaster version received from paymaster rpc");
            r.version = "v2";
          }
          return Promise.resolve(r.getSupportedEntrypointsLive()).then(function(s) {
            function a() {
              function c() {
                function l() {
                  if (r.entrypointDataV8 == null && r.entrypointDataV7 == null && r.entrypointDataV6 == null) throw RangeError("Invalid data received during initialization.");
                  return r.initialized = !0, null;
                }
                var d = function() {
                  if (s.some(function(f) {
                    return f.toLowerCase() === Bt.toLowerCase();
                  })) return Promise.resolve(r.getSupportedERC20TokensAndPaymasterMetadata(Bt)).then(function(f) {
                    r.entrypointDataV6 = f ?? null;
                  });
                }();
                return d && d.then ? d.then(l) : l();
              }
              var u = function() {
                if (s.some(function(l) {
                  return l.toLowerCase() === Ue.toLowerCase();
                })) return Promise.resolve(r.getSupportedERC20TokensAndPaymasterMetadata(Ue)).then(function(l) {
                  r.entrypointDataV7 = l ?? null;
                });
              }();
              return u && u.then ? u.then(c) : c();
            }
            var o = function() {
              if (s.some(function(c) {
                return c.toLowerCase() === Kt.toLowerCase();
              })) return Promise.resolve(r.getSupportedERC20TokensAndPaymasterMetadata(Kt)).then(function(c) {
                r.entrypointDataV8 = c ?? null;
              });
            }();
            return o && o.then ? o.then(a) : a();
          });
        });
      }, function(i) {
        var s = xe(i);
        throw new ne("PAYMASTER_ERROR", "failed initializing the paymaster", { cause: s });
      }));
    } catch (i) {
      return Promise.reject(i);
    }
  }, t.getSupportedERC20TokensAndPaymasterMetadata = function(r) {
    try {
      var i, s = this, a = function() {
        if (!s.initialized) return Cr(function() {
          function p() {
            if (r == Kt) {
              var b = { tokens: y.tokens.map(function(E) {
                return { name: E.name, symbol: E.symbol, address: E.address, decimals: Number(E.decimals) };
              }), paymasterMetadata: y.paymasterMetadata };
              return i = 1, b;
            }
            if (r == Ue) {
              var x = { tokens: y.tokens.map(function(E) {
                return { name: E.name, symbol: E.symbol, address: E.address, decimals: Number(E.decimals) };
              }), paymasterMetadata: y.paymasterMetadata };
              return i = 1, x;
            }
            if (r == Bt) {
              var w = { tokens: y.tokens.map(function(E) {
                return { name: E.name, symbol: E.symbol, address: E.address, decimals: Number(E.decimals) };
              }), paymasterMetadata: y.paymasterMetadata };
              return i = 1, w;
            }
            throw RangeError("unsupported entrypoint.");
          }
          var y, h = s.version == "v3" ? Promise.resolve(Te(s.rpcUrl, "pm_supportedERC20Tokens", [r])).then(function(b) {
            y = b;
          }) : Promise.resolve(Te(s.rpcUrl, "pm_supportedERC20Tokens", [])).then(function(b) {
            y = b;
          });
          return h && h.then ? h.then(p) : p();
        }, function(p) {
          var y = xe(p);
          throw new ne("PAYMASTER_ERROR", "getSupportedERC20TokensAndPaymasterMetadata failed", { cause: y });
        });
        if (r == Kt) {
          var o, c = (o = s.entrypointDataV8) != null ? o : null;
          return i = 1, c;
        }
        if (r == Ue) {
          var u, l = (u = s.entrypointDataV7) != null ? u : null;
          return i = 1, l;
        }
        if (r == Bt) {
          var d, f = (d = s.entrypointDataV6) != null ? d : null;
          return i = 1, f;
        }
      }();
      return Promise.resolve(a && a.then ? a.then(function(o) {
        return i ? o : null;
      }) : i ? a : null);
    } catch (o) {
      return Promise.reject(o);
    }
  }, t.getSupportedEntrypointsLive = function() {
    try {
      var r = this;
      return Promise.resolve(Cr(function() {
        return r.version == "v3" ? Promise.resolve(Te(r.rpcUrl, "pm_supportedEntryPoints", [])) : Promise.resolve(Te(r.rpcUrl, "pm_supportedEntryPoint", [])).then(function(i) {
          return [i];
        });
      }, function(i) {
        var s = xe(i);
        throw new ne("PAYMASTER_ERROR", "getSupportedEntrypoint failed", { cause: s });
      }));
    } catch (i) {
      return Promise.reject(i);
    }
  }, t.getSupportedEntrypoints = function() {
    try {
      var r = function() {
        var a = [];
        return i.entrypointDataV8 != null && a.push(Kt), i.entrypointDataV7 != null && a.push(Ue), i.entrypointDataV6 != null && a.push(Bt), a;
      }, i = this, s = function() {
        if (!i.initialized) return Promise.resolve(i.initialize()).then(function() {
        });
      }();
      return Promise.resolve(s && s.then ? s.then(r) : r());
    } catch (a) {
      return Promise.reject(a);
    }
  }, t.getPaymasterMetaData = function(r) {
    try {
      var i = function() {
        if (r == Kt && s.entrypointDataV8 != null) return s.entrypointDataV8.paymasterMetadata;
        if (r == Ue && s.entrypointDataV7 != null) return s.entrypointDataV7.paymasterMetadata;
        if (r == Bt && s.entrypointDataV6 != null) return s.entrypointDataV6.paymasterMetadata;
        throw RangeError("unsupported entrypoint.");
      }, s = this, a = function() {
        if (!s.initialized) return Promise.resolve(s.initialize()).then(function() {
        });
      }();
      return Promise.resolve(a && a.then ? a.then(i) : i());
    } catch (o) {
      return Promise.reject(o);
    }
  }, t.isSupportedERC20Token = function(r, i) {
    i === void 0 && (i = Ue);
    try {
      var s = this.getSupportedERC20TokenData(r, i);
      return Promise.resolve(!!s);
    } catch (a) {
      return Promise.reject(a);
    }
  }, t.getSupportedERC20TokenData = function(r, i) {
    i === void 0 && (i = Ue);
    try {
      var s = function() {
        var c;
        if (i == Kt && a.entrypointDataV8 != null) c = a.entrypointDataV8.tokens;
        else if (i == Ue && a.entrypointDataV7 != null) c = a.entrypointDataV7.tokens;
        else {
          if (i != Bt || a.entrypointDataV6 == null) throw RangeError("unsupported entrypoint.");
          c = a.entrypointDataV6.tokens;
        }
        var u = c.find(function(l) {
          return l.address.toLowerCase() === r.toLowerCase();
        });
        return u ? { name: u.name, symbol: u.symbol, address: u.address, decimals: Number(u.decimals) } : null;
      }, a = this, o = function() {
        if (!a.initialized) return Promise.resolve(a.initialize()).then(function() {
        });
      }();
      return Promise.resolve(o && o.then ? o.then(s) : s());
    } catch (c) {
      return Promise.reject(c);
    }
  }, t.createPaymasterUserOperation = function(r, i, s, a) {
    try {
      var o = function() {
        var d = void 0;
        return Cr(function() {
          function f(x) {
            return Promise.resolve(Te(c.rpcUrl, "pm_sponsorUserOperation", [r, p, s])).then(function(w) {
              var E, N, I, B, U, C = w, v = { callGasLimit: C.callGasLimit == null ? void 0 : BigInt(C.callGasLimit), preVerificationGas: C.preVerificationGas == null ? void 0 : BigInt(C.preVerificationGas), verificationGasLimit: C.verificationGasLimit == null ? void 0 : BigInt(C.verificationGasLimit), maxFeePerGas: C.maxFeePerGas == null ? void 0 : BigInt(C.maxFeePerGas), maxPriorityFeePerGas: C.maxPriorityFeePerGas == null ? void 0 : BigInt(C.maxPriorityFeePerGas), sponsorMetadata: C.sponsorMetadata == null ? void 0 : C.sponsorMetadata };
              if (r.callGasLimit = (E = v.callGasLimit) != null ? E : r.callGasLimit, r.preVerificationGas = (N = v.preVerificationGas) != null ? N : r.preVerificationGas, r.verificationGasLimit = (I = v.verificationGasLimit) != null ? I : r.verificationGasLimit, r.maxFeePerGas = (B = v.maxFeePerGas) != null ? B : r.maxFeePerGas, r.maxPriorityFeePerGas = (U = v.maxPriorityFeePerGas) != null ? U : r.maxPriorityFeePerGas, d = v.sponsorMetadata, "initCode" in r) r.paymasterAndData = w.paymasterAndData;
              else {
                var L = w;
                r.paymaster = L.paymaster, r.paymasterVerificationGasLimit = BigInt(L.paymasterVerificationGasLimit), r.paymasterPostOpGasLimit = BigInt(L.paymasterPostOpGasLimit), r.paymasterData = L.paymasterData;
              }
              return [r, d];
            });
          }
          var p = u.entrypoint;
          if (p == null) if ("initCode" in r) {
            if (c.entrypointDataV6 == null) throw RangeError("UserOperation v0.06 is not supported");
            p = Bt, r.paymasterAndData = c.entrypointDataV6.paymasterMetadata.dummyPaymasterAndData;
          } else if ("eip7702Auth" in r) {
            if (c.entrypointDataV8 == null) throw RangeError("UserOperation v0.08 is not supported");
            p = Kt;
            var y = c.entrypointDataV8.paymasterMetadata.dummyPaymasterAndData;
            r.paymaster = y.paymaster, r.paymasterVerificationGasLimit = y.paymasterVerificationGasLimit, r.paymasterPostOpGasLimit = y.paymasterPostOpGasLimit, r.paymasterData = y.paymasterData;
          } else {
            if (c.entrypointDataV7 == null) throw RangeError("UserOperation v0.07 is not supported");
            p = Ue;
            var h = c.entrypointDataV7.paymasterMetadata.dummyPaymasterAndData;
            r.paymaster = h.paymaster, r.paymasterVerificationGasLimit = h.paymasterVerificationGasLimit, r.paymasterPostOpGasLimit = h.paymasterPostOpGasLimit, r.paymasterData = h.paymasterData;
          }
          var b = function() {
            if (c.version == "v2" || s.token !== void 0) {
              var x = function(B) {
                var U, C, v, L, O, R;
                if (typeof u.preVerificationGas == "bigint" && u.preVerificationGas < 0n) throw RangeError("preVerificationGas override can't be negative");
                if (typeof u.verificationGasLimit == "bigint" && u.verificationGasLimit < 0n) throw RangeError("verificationGasLimit override can't be negative");
                if (typeof u.callGasLimit == "bigint" && u.callGasLimit < 0n) throw RangeError("callGasLimit override can't be negative");
                r.preVerificationGas = (U = u.preVerificationGas) != null ? U : w * BigInt((C = u.preVerificationGasPercentageMultiplier) != null ? C : 100) / 100n, r.verificationGasLimit = (v = u.verificationGasLimit) != null ? v : E * BigInt((L = u.verificationGasLimitPercentageMultiplier) != null ? L : 100) / 100n, r.callGasLimit = (O = u.callGasLimit) != null ? O : N * BigInt((R = u.callGasLimitPercentageMultiplier) != null ? R : 100) / 100n, r.preVerificationGas = r.preVerificationGas + 100n, r.verificationGasLimit = r.verificationGasLimit + 10000n;
              }, w = r.preVerificationGas, E = r.verificationGasLimit, N = r.callGasLimit, I = function() {
                if (u.preVerificationGas == null || u.verificationGasLimit == null || u.callGasLimit == null) return function() {
                  if (i != null) {
                    var B = new rf(i);
                    r.callGasLimit = 0n, r.verificationGasLimit = 0n, r.preVerificationGas = 0n;
                    var U = r.maxFeePerGas, C = r.maxPriorityFeePerGas;
                    return r.maxFeePerGas = 0n, r.maxPriorityFeePerGas = 0n, Promise.resolve(B.estimateUserOperationGas(r, p, u.state_override_set)).then(function(v) {
                      w < v.preVerificationGas && (w = v.preVerificationGas), E < v.verificationGasLimit && (E = v.verificationGasLimit), N < v.callGasLimit && (N = v.callGasLimit), r.maxFeePerGas = U, r.maxPriorityFeePerGas = C;
                    });
                  }
                  throw new ne("BAD_DATA", "bundlerRpc can't be null if preVerificationGas,verificationGasLimit and callGasLimit are not overridden");
                }();
              }();
              return I && I.then ? I.then(x) : x();
            }
            if (u.preVerificationGas != null || u.verificationGasLimit != null || u.callGasLimit != null || u.preVerificationGasPercentageMultiplier != null || u.verificationGasLimitPercentageMultiplier != null || u.callGasLimitPercentageMultiplier != null) throw RangeError("you can't use any gas overrides for paymaster v3, as it will estimate gas and override any provided values.");
          }();
          return b && b.then ? b.then(f) : f();
        }, function(f) {
          var p = xe(f);
          throw new ne("PAYMASTER_ERROR", "pm_sponsorUserOperation failed", { cause: p });
        });
      }, c = this;
      s == null && (s = {});
      var u = a;
      u == null && (u = {}), r = Nn({}, r);
      var l = function() {
        if (!c.initialized) return Promise.resolve(c.initialize()).then(function() {
        });
      }();
      return Promise.resolve(l && l.then ? l.then(o) : o());
    } catch (d) {
      return Promise.reject(d);
    }
  }, t.createSponsorPaymasterUserOperation = function(r, i, s, a) {
    try {
      var o = {};
      return s && s.trim().length > 0 && (o.sponsorshipPolicyId = s), Promise.resolve(this.createPaymasterUserOperation(r, i, o, a));
    } catch (c) {
      return Promise.reject(c);
    }
  }, t.createTokenPaymasterUserOperation = function(r, i, s, a, o) {
    try {
      var c = this;
      return Promise.resolve(Cr(function() {
        function u() {
          var d = o || {};
          (d == null ? void 0 : d.callGasLimitPercentageMultiplier) == null && (d.callGasLimitPercentageMultiplier = 105);
          var f = o == null ? void 0 : o.entrypoint;
          return f == null && (f = "initCode" in i ? Bt : "eip7702Auth" in i ? Kt : Ue), Promise.resolve(c.calculateUserOperationErc20TokenMaxGasCost(i, s)).then(function(p) {
            var y = 2n * p;
            return Promise.resolve(c.getPaymasterMetaData(f)).then(function(h) {
              if (h == null) throw RangeError("unsupported entrypoint.");
              var b = r.prependTokenPaymasterApproveToCallData(i.callData, s, h.address, y);
              return i.callData = b, "initCode" in i ? Promise.resolve(c.createPaymasterUserOperation(i, a, { token: s }, d)).then(function(x) {
                return x[0];
              }) : "eip7702Auth" in i ? Promise.resolve(c.createPaymasterUserOperation(i, a, { token: s }, d)).then(function(x) {
                return x[0];
              }) : Promise.resolve(c.createPaymasterUserOperation(i, a, { token: s }, d)).then(function(x) {
                return x[0];
              });
            });
          });
        }
        var l = function() {
          if (!c.initialized) return Promise.resolve(c.initialize()).then(function() {
          });
        }();
        return l && l.then ? l.then(u) : u();
      }, function(u) {
        var l = xe(u);
        throw new ne("PAYMASTER_ERROR", "createTokenPaymasterUserOperation failed", { cause: l });
      }));
    } catch (u) {
      return Promise.reject(u);
    }
  }, t.calculateUserOperationErc20TokenMaxGasCost = function(r, i, s) {
    s === void 0 && (s = {});
    try {
      var a = this;
      return Promise.resolve(Cr(function() {
        function o() {
          var u = s.entrypoint;
          return u == null && (u = "initCode" in r ? Bt : "eip7702Auth" in r ? Kt : Ue), Promise.resolve(a.fetchTokenPaymasterExchangeRate(i, u)).then(function(l) {
            return l * sl(r) / BigInt(Math.pow(10, 18));
          });
        }
        var c = function() {
          if (!a.initialized) return Promise.resolve(a.initialize()).then(function() {
          });
        }();
        return c && c.then ? c.then(o) : o();
      }, function(o) {
        var c = xe(o);
        throw new ne("PAYMASTER_ERROR", "calculateUserOperationErc20TokenMaxGasCost failed", { cause: c });
      }));
    } catch (o) {
      return Promise.reject(o);
    }
  }, t.fetchTokenPaymasterExchangeRate = function(r, i) {
    i === void 0 && (i = Ue);
    try {
      var s = this;
      return Promise.resolve(Cr(function() {
        function a() {
          function c() {
            var d = u.tokens.map(function(p) {
              return { address: p.address, exchangeRate: p.exchangeRate };
            }), f = d.find(function(p) {
              return p.address.toLowerCase() === r.toLowerCase();
            });
            if (f) return BigInt(f.exchangeRate);
            throw new ne("PAYMASTER_ERROR", r + " token is not supported by the paymaster.", { context: { supportedERC20TokensAndPaymasterMetadataV7: JSON.stringify(s.entrypointDataV7, function(p, y) {
              return typeof y == "bigint" ? "0x" + y.toString(16) : y;
            }), supportedERC20TokensAndPaymasterMetadataV6: JSON.stringify(s.entrypointDataV6, function(p, y) {
              return typeof y == "bigint" ? "0x" + y.toString(16) : y;
            }) } });
          }
          var u, l = s.version == "v3" ? Promise.resolve(Te(s.rpcUrl, "pm_supportedERC20Tokens", [i])).then(function(d) {
            u = d;
          }) : Promise.resolve(Te(s.rpcUrl, "pm_supportedERC20Tokens", [])).then(function(d) {
            u = d;
          });
          return l && l.then ? l.then(c) : c();
        }
        var o = function() {
          if (!s.initialized) return Promise.resolve(s.initialize()).then(function() {
          });
        }();
        return o && o.then ? o.then(a) : a();
      }, function(a) {
        var o = xe(a);
        throw new ne("PAYMASTER_ERROR", "fetchTokenPaymasterExchangeRate failed", { cause: o });
      }));
    } catch (a) {
      return Promise.reject(a);
    }
  }, t.fetchSupportedERC20TokensAndPaymasterMetadata = function(r) {
    r === void 0 && (r = Ue);
    try {
      var i = this;
      return Promise.resolve(Cr(function() {
        function s() {
          function o() {
            if (r == Kt || r == Ue) return { tokens: c.tokens.map(function(l) {
              return { name: l.name, symbol: l.symbol, address: l.address, decimals: Number(l.decimals), exchangeRate: BigInt(l.exchangeRate) };
            }), paymasterMetadata: c.paymasterMetadata };
            if (r == Bt) return { tokens: c.tokens.map(function(l) {
              return { name: l.name, symbol: l.symbol, address: l.address, decimals: Number(l.decimals), exchangeRate: BigInt(l.exchangeRate) };
            }), paymasterMetadata: c.paymasterMetadata };
            throw RangeError("unsupported entrypoint.");
          }
          var c, u = i.version == "v3" ? Promise.resolve(Te(i.rpcUrl, "pm_supportedERC20Tokens", [r])).then(function(l) {
            c = l;
          }) : Promise.resolve(Te(i.rpcUrl, "pm_supportedERC20Tokens", [])).then(function(l) {
            c = l;
          });
          return u && u.then ? u.then(o) : o();
        }
        var a = function() {
          if (!i.initialized) return Promise.resolve(i.initialize()).then(function() {
          });
        }();
        return a && a.then ? a.then(s) : s();
      }, function(s) {
        var a = xe(s);
        throw new ne("PAYMASTER_ERROR", "fetchSupportedERC20TokensAndPaymasterMetadata failed", { cause: a });
      }));
    } catch (s) {
      return Promise.reject(s);
    }
  }, e;
}(function() {
});
const D4 = (n) => Xi(Yr(n)), lr = (n) => {
  let e = n.message.toString() || n.toString();
  return e.includes("TRPCClientError:") && (e = e.replace("TRPCClientError:", "").trim()), e;
}, U4 = (n) => n ? n._longShares ? {
  _longShares: BigInt(n._longShares || 0),
  _shortShares: BigInt(n._shortShares || 0),
  _meanEntryPrice: BigInt(n._meanEntryPrice || 0),
  _meanEntrySpread: BigInt(n._meanEntrySpread || 0),
  _meanEntryLeverage: BigInt(n._meanEntryLeverage || 0),
  _liquidationPrice: BigInt(n._liquidationPrice || 0)
} : {
  _longShares: n[0],
  _shortShares: n[1],
  _meanEntryPrice: n[2],
  _meanEntrySpread: n[3],
  _meanEntryLeverage: n[4],
  _liquidationPrice: n[5]
} : null, a0 = (n) => n == null || n == null ? null : (Object.keys(n).forEach((t) => {
  typeof n[t] == "object" ? n[t] = a0(n[t]) : typeof n[t] == "bigint" && (n[t] = Yr(n[t]));
}), n), F4 = async (n, e, t, r, i, s, a, o, c, u, l, d, f, p, y, h) => {
  Number(s) > 0 ? a = BigInt(0).toString() : a = BigInt(a).toString();
  const b = {
    _marketId: i,
    _closeSharesAmount: BigInt(s),
    _openMPHTokenAmount: BigInt(a),
    _tradeDirection: o,
    _orderLeverage: BigInt(c),
    _onlyIfPriceAbove: BigInt(u),
    _onlyIfPriceBelow: BigInt(l),
    _goodUntil: BigInt(d),
    _goodFrom: BigInt(f)
  }, x = Cn({
    abi: vt,
    address: r,
    client: { public: e, wallet: n }
  });
  console.log("createOrder", b);
  try {
    const w = await x.write.createOrderFromGasToken(
      [b],
      { chain: e.chain, value: b._openMPHTokenAmount, gas: BigInt(2e6), account: t.address }
    );
    console.log("transaction_hash", w), clearTimeout(p);
    let E = "";
    const N = await e.waitForTransactionReceipt({ hash: w });
    if (N.status !== "success")
      throw new Error(`Transaction failed with status: ${N.status}`);
    return N && N && N.transactionHash && N.logs && Yo({
      abi: vt,
      logs: N.logs,
      eventName: ["OrderCreated"]
    }).forEach((B) => {
      var U;
      E = (U = B == null ? void 0 : B.args) == null ? void 0 : U._orderId;
    }), { transaction_hash: w, order_id: E };
  } catch (w) {
    throw console.log("err", w.toString()), clearTimeout(p), new Error(`Transaction failed: ${lr(w)}`);
  }
}, G4 = async (n, e, t, r, i, s) => {
  var a;
  try {
    const o = ((a = n.chain) == null ? void 0 : a.id) || 1, c = {
      name: "MorpherOracle",
      version: "1",
      chainId: Number(o),
      verifyingContract: t
    }, u = {
      EIP712Domain: [
        {
          name: "name",
          type: "string"
        },
        {
          name: "version",
          type: "string"
        },
        {
          name: "chainId",
          type: "uint256"
        },
        {
          name: "verifyingContract",
          type: "address"
        }
      ],
      Person: [
        {
          name: "name",
          type: "string"
        },
        {
          name: "wallet",
          type: "address"
        }
      ],
      CancelOrder: [
        {
          name: "_orderId",
          type: "bytes32"
        },
        {
          name: "_msgSender",
          type: "address"
        },
        {
          name: "nonce",
          type: "uint256"
        },
        {
          name: "deadline",
          type: "uint256"
        }
      ]
    }, l = {
      _orderId: s,
      _msgSender: Tn(e.address || ""),
      nonce: r.toString(),
      deadline: i.toString()
    }, d = await n.signTypedData({
      account: e.address,
      domain: c,
      types: u,
      primaryType: "CancelOrder",
      message: l
    });
    if (d) {
      const f = await Zo(d);
      return ei({
        abi: vt,
        functionName: "initiateCancelOrderPermitted",
        args: [
          s,
          e.address,
          i,
          Number(f.v),
          f.r,
          f.s
        ]
      });
    }
    return "0x";
  } catch (o) {
    return console.log("error in getOracleCancelCallPermitCallData", o), "0x";
  }
}, H4 = async (n, e, t, r, i, s, a, o) => {
  var c;
  try {
    let u = Vt.initializeNewAccount(
      [t.address.toLowerCase()]
    );
    const d = await Cn({
      abi: vt,
      address: r,
      client: { public: e, wallet: n }
    }).read.nonces([t.address]), f = BigInt(Math.round(o / 1e3) + 180), p = await G4(n, t, r, d, f, a);
    if (!p || p == "0x")
      throw new Error("ORACLE_CALL_GENERATION_FAILED");
    const y = {
      to: r,
      value: 0n,
      data: p
    };
    let h = await u.createUserOperation(
      [
        y
        //transaction2,
      ],
      e.transport.url,
      //the node rpc is used to fetch the current nonce and fetch gas prices.
      i
      //the bundler rpc is used to estimate the gas limits.
    );
    const b = "";
    let x = new s0(
      s
    ), [w, E] = await x.createSponsorPaymasterUserOperation(
      h,
      i,
      b
    );
    h = w;
    const N = sl(w), I = ((c = n.chain) == null ? void 0 : c.id) || 1;
    let B = Vt.getUserOperationEip712Data(
      w,
      BigInt(I),
      {
        validAfter: BigInt(0),
        validUntil: BigInt(0),
        entrypointAddress: u.entrypointAddress,
        safe4337ModuleAddress: u.safe4337ModuleAddress
      }
    );
    const U = await n.signTypedData({
      account: t.address,
      domain: B.domain,
      types: B.types,
      primaryType: "SafeOp",
      message: B.messageValue
    });
    w.signature = Vt.formatEip712SignaturesToUseroperationSignature(
      [t.address],
      [U],
      {
        validAfter: BigInt(0),
        validUntil: BigInt(0)
      }
    );
    const C = await u.sendUserOperation(
      w,
      i || ""
    );
    console.log("Useroperation sent. Waiting to be included ......");
    let v = await C.included();
    return console.log("Useroperation receipt received."), console.log(v), v.success ? console.log("Order cancel user operation successful. The transaction hash is : " + v.receipt.transactionHash) : console.log("Useroperation execution failed"), console.log("cost", N), !0;
  } catch (u) {
    throw console.log("err", u.toString()), new Error(`Transaction failed: ${lr(u)}`);
  }
}, $4 = async (n, e, t, r, i) => {
  let s = null;
  try {
    const o = await Cn({
      abi: vt,
      address: r,
      client: { public: e, wallet: n }
    }).write.initiateCancelOrder(
      [i],
      { chain: e.chain, gas: BigInt(8e5), account: t.address }
    );
    s = o;
    const c = await e.waitForTransactionReceipt({ hash: o });
    if (c.status !== "success")
      throw new Error(`Transaction failed with status: ${c.status}`);
    return { transaction_hash: s, order_id: i };
  } catch (a) {
    throw console.log("err", a.toString()), new Error(`Transaction failed: ${lr(a)}`);
  }
}, V4 = async (n, e, t, r, i, s, a, o, c, u, l, d, f, p, y, h) => {
  let b = "";
  const x = Cn({
    abi: vt,
    address: r,
    client: { public: e, wallet: n }
  });
  try {
    const w = [i, BigInt(s), BigInt(a), o, BigInt(c), BigInt(u), BigInt(l), BigInt(d), BigInt(f)], E = await x.write.createOrder(
      w,
      { chain: e.chain, gas: BigInt(8e5), account: t.address }
      // ,
      // {
      // 	account: this.activePortfolio?.eth_address || '' as TAddress,
      // 	gasPrice: getSidechainGasPrice(this.user?.blockchain_info?.chain_id),
      // 	gas: 5000000
      // }
    );
    clearTimeout(p);
    const N = await e.waitForTransactionReceipt({ hash: E });
    if (N.status !== "success")
      throw new Error(`Transaction failed with status: ${N.status}`);
    return window.clearTimeout(p), N && N && N.transactionHash && N.logs && Yo({
      abi: vt,
      logs: N.logs,
      eventName: ["OrderCreated"]
    }).forEach((B) => {
      var U;
      b = (U = B == null ? void 0 : B.args) == null ? void 0 : U._orderId;
    }), { transaction_hash: E, order_id: b };
  } catch (w) {
    throw console.log("err", w.toString()), clearTimeout(p), new Error(`Transaction failed: ${lr(w)}`);
  }
}, z4 = async (n, e, t, r, i, s, a, o, c, u, l, d, f, p) => {
  var y;
  try {
    const h = ((y = n.chain) == null ? void 0 : y.id) || 1, b = {
      name: "MorpherOracle",
      version: "1",
      chainId: Number(h),
      verifyingContract: t
    }, x = {
      EIP712Domain: [
        {
          name: "name",
          type: "string"
        },
        {
          name: "version",
          type: "string"
        },
        {
          name: "chainId",
          type: "uint256"
        },
        {
          name: "verifyingContract",
          type: "address"
        }
      ],
      // Person: [
      // 	{
      // 		name: 'name',
      // 		type: 'string',
      // 	},
      // 	{
      // 		name: 'wallet',
      // 		type: 'address',
      // 	},
      // ],
      CreateOrder: [
        {
          name: "_marketId",
          type: "bytes32"
        },
        {
          name: "_closeSharesAmount",
          type: "uint256"
        },
        {
          name: "_openMPHTokenAmount",
          type: "uint256"
        },
        {
          name: "_msgSender",
          type: "address"
        },
        {
          name: "nonce",
          type: "uint256"
        },
        {
          name: "deadline",
          type: "uint256"
        }
      ]
    }, w = {
      _marketId: s,
      _closeSharesAmount: a,
      _openMPHTokenAmount: o,
      _msgSender: e.address,
      nonce: r.toString(),
      deadline: i.toString()
    }, E = await n.signTypedData({
      account: e.address,
      domain: b,
      types: x,
      primaryType: "CreateOrder",
      message: w
    });
    if (E) {
      const N = await Zo(E);
      return ei({
        abi: vt,
        functionName: "createOrderPermittedBySignature",
        args: [{
          _marketId: s,
          _closeSharesAmount: a,
          _openMPHTokenAmount: o,
          _tradeDirection: c,
          _orderLeverage: u,
          _onlyIfPriceAbove: l,
          _onlyIfPriceBelow: d,
          _goodUntil: f,
          _goodFrom: p
        }, e.address, i, Number(N.v), N.r, N.s]
      });
    }
    return "0x";
  } catch (h) {
    return console.log("error in getOracleCallPermitCalldata", h), "0x";
  }
}, j4 = async (n, e, t, r, i, s, a, o, c, u, l, d, f, p, y, h, b, x, w) => {
  var E;
  try {
    let N = Vt.initializeNewAccount(
      [t.address.toLowerCase()]
    );
    const B = await Cn({
      abi: vt,
      address: r,
      client: { public: e, wallet: n }
    }).read.nonces([t.address]);
    (!w || w == 0) && (w = Date.now());
    const U = BigInt(Math.round(w / 1e3) + 180), C = await z4(n, t, r, B, U, a, o, c, u, l, d, f, p, y);
    if (clearTimeout(h), !C) return;
    if (C == "0x")
      throw clearTimeout(h), new Error("ORACLE_CALL_GENERATION_FAILED");
    const v = ((E = n.chain) == null ? void 0 : E.id) || 1, L = {
      to: r,
      value: 0n,
      data: C
    };
    let O = await N.createUserOperation(
      [
        L
        //transaction2,
      ],
      e.transport.url,
      //the node rpc is used to fetch the current nonce and fetch gas prices.
      i
      //the bundler rpc is used to estimate the gas limits.
    );
    console.log("Create ORder"), console.log(a0(O));
    const R = "";
    let F = new s0(
      s
    ), [M, P] = await F.createSponsorPaymasterUserOperation(
      O,
      i,
      R
    );
    O = M;
    const S = sl(M);
    let k = Vt.getUserOperationEip712Data(
      M,
      BigInt(v),
      {
        validAfter: BigInt(0),
        validUntil: BigInt(0),
        entrypointAddress: N.entrypointAddress,
        safe4337ModuleAddress: N.safe4337ModuleAddress
      }
    );
    const D = await n.signTypedData({
      account: t.address,
      domain: k.domain,
      types: k.types,
      primaryType: "SafeOp",
      message: k.messageValue
    });
    clearTimeout(h), M.signature = Vt.formatEip712SignaturesToUseroperationSignature(
      [t.address],
      [D],
      {
        validAfter: BigInt(0),
        validUntil: BigInt(0)
      }
    ), console.log("paymasterUserOperation", i, M);
    const $ = await N.sendUserOperation(
      M,
      i || ""
    );
    console.log("Useroperation sent. Waiting to be included ......");
    let H = await $.included();
    console.log("Useroperation receipt received."), console.log(H), H.success ? console.log("Order create user operation successful. The transaction hash is : " + H.receipt.transactionHash) : console.log("Useroperation execution failed"), console.log("cost", S);
  } catch (N) {
    throw console.log("err", N.toString()), clearTimeout(h), new Error(`Transaction failed: ${lr(N)}`);
  }
}, xu = async (n, e) => await n.signTypedData(e), W4 = async (n, e, t, r, i, s, a, o, c, u, l, d, f, p, y, h, b, x, w) => {
  var S;
  const E = Math.round(Date.now() / 1e3) + 4200, N = Cn({
    abi: yd,
    address: i,
    client: { public: e, wallet: n }
  }), I = await N.read.nonces([t.address]), B = await N.read.name([]);
  Number(c) > 0 ? u = BigInt(0).toString() : u = BigInt(u).toString();
  const U = {
    _marketId: o,
    _closeSharesAmount: c,
    _openMPHTokenAmount: u,
    _tradeDirection: l,
    _orderLeverage: d,
    _onlyIfPriceAbove: f,
    _onlyIfPriceBelow: p,
    _goodUntil: y,
    _goodFrom: h
  }, C = ((S = n.chain) == null ? void 0 : S.id) || 1;
  let v;
  if (console.log("Number(close_shares_amount)", Number(c)), Number(c) > 0) {
    const D = await Cn({
      abi: yd,
      address: s,
      client: { public: e, wallet: n }
    }).read.nonces([t.address]), $ = {
      name: "MorpherToken",
      version: "1",
      chainId: Number(C),
      verifyingContract: s
    }, H = {
      EIP712Domain: [
        {
          name: "name",
          type: "string"
        },
        {
          name: "version",
          type: "string"
        },
        {
          name: "chainId",
          type: "uint256"
        },
        {
          name: "verifyingContract",
          type: "address"
        }
      ],
      Person: [
        {
          name: "name",
          type: "string"
        },
        {
          name: "wallet",
          type: "address"
        }
      ],
      Permit: [
        {
          name: "owner",
          type: "address"
        },
        {
          name: "spender",
          type: "address"
        },
        {
          name: "value",
          type: "uint256"
        },
        {
          name: "nonce",
          type: "uint256"
        },
        {
          name: "deadline",
          type: "uint256"
        }
      ]
    }, W = {
      owner: Tn(t.address || ""),
      spender: Tn(r),
      value: a.toString(),
      nonce: Yr(D),
      deadline: E.toString()
    };
    v = await xu(n, { account: t.address, types: H, domain: $, message: W, primaryType: "Permit" });
  } else {
    const k = {
      name: B,
      version: "2",
      chainId: Number(C),
      verifyingContract: i
    }, D = {
      EIP712Domain: [
        {
          name: "name",
          type: "string"
        },
        {
          name: "version",
          type: "string"
        },
        {
          name: "chainId",
          type: "uint256"
        },
        {
          name: "verifyingContract",
          type: "address"
        }
      ],
      Person: [
        {
          name: "name",
          type: "string"
        },
        {
          name: "wallet",
          type: "address"
        }
      ],
      Permit: [
        {
          name: "owner",
          type: "address"
        },
        {
          name: "spender",
          type: "address"
        },
        {
          name: "value",
          type: "uint256"
        },
        {
          name: "nonce",
          type: "uint256"
        },
        {
          name: "deadline",
          type: "uint256"
        }
      ]
    }, $ = {
      owner: Tn(t.address || ""),
      spender: Tn(r),
      value: u.toString(),
      nonce: Yr(I),
      deadline: E.toString()
    };
    v = await xu(n, { account: t.address, types: D, domain: k, message: $, primaryType: "Permit" });
  }
  const L = await Zo(v), O = {
    tokenAddress: i,
    owner: Tn(t.address || ""),
    value: u.toString(),
    minOutValue: u,
    deadline: E,
    v: L.v,
    r: L.r,
    s: L.s
  }, F = await Cn({
    abi: vt,
    address: r,
    client: { public: e, wallet: n }
  }).write.createOrderFromToken(
    [U, O],
    { chain: e.chain, gas: BigInt(8e5), account: t.address }
  );
  clearTimeout(b);
  const M = await e.waitForTransactionReceipt({ hash: F });
  let P = "";
  if (M.status !== "success")
    throw new Error(`Transaction failed with status: ${M.status}`);
  return M && M && M.transactionHash && M.logs && Yo({
    abi: vt,
    logs: M.logs,
    eventName: ["OrderCreated"]
  }).forEach((D) => {
    var $;
    P = ($ = D == null ? void 0 : D.args) == null ? void 0 : $._orderId;
  }), { transaction_hash: F, order_id: P };
}, K4 = async (n, e, t, r, i, s) => {
  var x;
  const a = ((x = n.chain) == null ? void 0 : x.id) || 1, o = Math.round(Date.now() / 1e3) + 4200, c = Cn({
    abi: yd,
    address: t,
    client: { public: e, wallet: n }
  }), u = await c.read.nonces([r.address]), d = {
    name: await c.read.name([]),
    version: "2",
    chainId: Number(a),
    verifyingContract: t
  }, f = {
    EIP712Domain: [
      {
        name: "name",
        type: "string"
      },
      {
        name: "version",
        type: "string"
      },
      {
        name: "chainId",
        type: "uint256"
      },
      {
        name: "verifyingContract",
        type: "address"
      }
    ],
    Person: [
      {
        name: "name",
        type: "string"
      },
      {
        name: "wallet",
        type: "address"
      }
    ],
    Permit: [
      {
        name: "owner",
        type: "address"
      },
      {
        name: "spender",
        type: "address"
      },
      {
        name: "value",
        type: "uint256"
      },
      {
        name: "nonce",
        type: "uint256"
      },
      {
        name: "deadline",
        type: "uint256"
      }
    ]
  }, p = {
    owner: Tn(r.address || ""),
    spender: Tn(i),
    value: BigInt(s).toString(),
    nonce: Yr(u),
    deadline: o.toString()
  }, y = await xu(n, { account: Tn(r.address || ""), types: f, domain: d, message: p, primaryType: "Permit" }), h = await Zo(y);
  return {
    tokenAddress: t,
    owner: Tn(r.address || ""),
    value: s.toString(),
    minOutValue: s,
    deadline: o,
    v: h.v,
    r: h.r,
    s: h.s
  };
}, Q4 = async (n, e, t, r, i, s, a, o, c, u, l, d, f, p, y, h) => {
  var b;
  try {
    const x = await K4(n, e, t, r, i, u);
    if (!x)
      throw new Error("Failed to get input token permit");
    const w = ((b = n.chain) == null ? void 0 : b.id) || 1, E = i, N = r.address, I = BigInt(Number(u) / 10 ** 6 * 10 ** 18).toString(), B = {
      name: "MorpherOracle",
      version: "1",
      chainId: Number(w),
      verifyingContract: E
    }, U = {
      EIP712Domain: [
        { name: "name", type: "string" },
        { name: "version", type: "string" },
        { name: "chainId", type: "uint256" },
        { name: "verifyingContract", type: "address" }
      ],
      CreateOrder: [
        { name: "_marketId", type: "bytes32" },
        { name: "_closeSharesAmount", type: "uint256" },
        { name: "_openMPHTokenAmount", type: "uint256" },
        { name: "_msgSender", type: "address" },
        { name: "nonce", type: "uint256" },
        { name: "deadline", type: "uint256" }
      ]
    }, C = {
      _marketId: o,
      // Expected to be bytes32
      _closeSharesAmount: c.toString(),
      _openMPHTokenAmount: I.toString(),
      // Scaled MPH amount
      _msgSender: N,
      nonce: s.toString(),
      deadline: a.toString()
    }, v = await xu(n, {
      account: N,
      domain: B,
      types: U,
      primaryType: "CreateOrder",
      message: C
    });
    if (!v)
      throw new Error("Failed to sign CreateOrder message");
    const L = await Zo(v), O = {
      _marketId: o,
      // Ensure it's typed as THexString if it's bytes32
      _closeSharesAmount: BigInt(c),
      _openMPHTokenAmount: BigInt(I),
      // Scaled MPH amount
      _tradeDirection: l,
      _orderLeverage: BigInt(d),
      _onlyIfPriceAbove: BigInt(f),
      _onlyIfPriceBelow: BigInt(p),
      _goodUntil: BigInt(y),
      _goodFrom: BigInt(h)
    }, R = {
      tokenAddress: x.tokenAddress,
      owner: x.owner,
      value: BigInt(x.value),
      minOutValue: BigInt(I),
      // Scaled MPH amount expected
      deadline: BigInt(x.deadline),
      v: Number(x.v),
      // Ensure v is uint8
      r: x.r,
      s: x.s
    };
    return ei({
      abi: vt,
      functionName: "createOrderFromToken",
      args: [
        O,
        R,
        N,
        a,
        // This is the deadline used for the CreateOrder EIP-712 signature (bigint)
        Number(L.v),
        // v from CreateOrder signature (uint8)
        L.r,
        // r from CreateOrder signature (bytes32)
        L.s
        // s from CreateOrder signature (bytes32)
      ]
    });
  } catch (x) {
    throw console.error("Error in getCreateOrderTokenPermit:", x), new Error(`GET_CREATE_ORDER_TOKEN_PERMIT_FAILED: ${x.message || "Unknown error"}`);
  }
}, q4 = async (n, e, t, r, i, s, a, o, c, u, l, d, f, p, y, h, b, x, w, E) => {
  var N;
  try {
    let I = Vt.initializeNewAccount(
      [t.address.toLowerCase()]
    );
    const U = await Cn({
      abi: vt,
      address: r,
      client: { public: e, wallet: n }
    }).read.nonces([t.address]);
    (!E || E == 0) && (E = Date.now());
    const C = BigInt(Math.round(E / 1e3) + 180), v = await Q4(n, e, i, t, r, U, C, o, c, u, l, d, f, p, y, h);
    if (clearTimeout(b), !v) return;
    if (v == "0x")
      throw clearTimeout(b), new Error("ORACLE_CALL_GENERATION_FAILED");
    const L = ((N = n.chain) == null ? void 0 : N.id) || 1, O = {
      to: r || "0x00",
      value: 0n,
      data: v
    };
    let R = await I.createUserOperation(
      [
        O
        //transaction2,
      ],
      e.transport.url,
      //the node rpc is used to fetch the current nonce and fetch gas prices.
      s
      //the bundler rpc is used to estimate the gas limits.
    );
    console.log("Create ORder Token"), console.log(a0(R));
    const F = "";
    let M = new s0(
      a
    ), [P, S] = await M.createSponsorPaymasterUserOperation(
      R,
      s,
      F
    );
    R = P;
    const k = sl(P);
    let D = Vt.getUserOperationEip712Data(
      P,
      BigInt(L),
      {
        validAfter: BigInt(0),
        validUntil: BigInt(0),
        entrypointAddress: I.entrypointAddress,
        safe4337ModuleAddress: I.safe4337ModuleAddress
      }
    );
    const $ = await n.signTypedData({
      account: t.address,
      domain: D.domain,
      types: D.types,
      primaryType: "SafeOp",
      message: D.messageValue
    });
    clearTimeout(b), P.signature = Vt.formatEip712SignaturesToUseroperationSignature(
      [t.address],
      [$],
      {
        validAfter: BigInt(0),
        validUntil: BigInt(0)
      }
    );
    const H = await I.sendUserOperation(
      P,
      s || ""
    );
    console.log("Useroperation sent. Waiting to be included ......");
    let W = await H.included();
    console.log("Useroperation receipt received."), console.log(W), W.success ? console.log("Order create user operation successful. The transaction hash is : " + W.receipt.transactionHash) : console.log("Useroperation execution failed"), console.log("cost", k);
  } catch (I) {
    throw console.log("err", I.toString()), clearTimeout(b), new Error(`Transaction failed: ${lr(I)}`);
  }
};
class cT {
  /**
   * Initialise the trading SDK and fetch the contract addresses and other configuration information from the backend API.
   * @param endpoint Address of the Morpher backend API that all internal functions will connect to, usually https://api.morpher.com
   */
  constructor(e) {
    T(this, "endpoint");
    T(this, "rpcClient");
    T(this, "transactionNumber", 0);
    T(this, "stateAddress");
    T(this, "oracleAddress");
    T(this, "usdcAddress");
    T(this, "tokenAddress");
    T(this, "clientURLHttps", "");
    T(this, "clientURLWs", "");
    T(this, "bundler");
    T(this, "paymaster");
    T(this, "ready", !1);
    T(this, "marketSubscriptions", {});
    T(this, "unsubscribeFromOrder");
    T(this, "orderCreating", !1);
    T(this, "orderCreatingTimeout");
    this.endpoint = e, this.rpcClient = this.createTradingClient(this.endpoint), this.rpcClient.getConfig.query().then((t) => {
      this.stateAddress = t.stateAddress, this.oracleAddress = t.oracleAddress, this.usdcAddress = t.usdcAddress, this.tokenAddress = t.tokenAddress, this.bundler = t.bundler, this.paymaster = t.paymaster, this.ready = !0;
    });
  }
  /**
   * Set up the tRPC client for all backend API calls.
   * @param wsUrl 
   * @returns 
   */
  createTradingClient(e) {
    if (!e || e.length < 5)
      throw "URL not specified";
    return e[e.length - 1] !== "/" && (e += "/"), e.includes("/v2") || (e += "v2/"), this.clientURLHttps = e, this.clientURLWs = this.clientURLHttps.replace("http://", "ws://").replace("https://", "wss://").replace("/v2/", "/graphql"), Yg({
      links: [
        Fg({
          url: this.clientURLHttps
        })
      ]
    });
  }
  /**
   * Fetch a list of tradable currencies along with the current USD exchange rate and the current balance for each for the given ETH address.
   * @param options - The options for fetching the currency list.
   * @param options.address - The user's ETH address.
   * @param options.publicClient - The viem public client.
   * @param options.tokenAddresses - A list of token addresses to fetch balances for.
   * @returns 
   */
  async getCurrencyList({
    address: e,
    publicClient: t,
    tokenAddresses: r
  }) {
    if (!this.rpcClient)
      throw new Error("No RPC Client");
    let i = t;
    const s = await this.rpcClient.getExchangeRates.query();
    let a = await i.getBalance({ address: e }), o = {};
    o = {
      ETH: {
        symbol: "ETH",
        balance: a,
        usd: a ? Number(a) / 10 ** 18 * Number(s.eth_price) : void 0,
        decimals: 18,
        usd_exchange_rate: Number(s.eth_price)
      }
    };
    for (var c = 0; c < r.length; c++) {
      const u = r[c], l = await i.readContract({
        address: u.address,
        abi: pc,
        functionName: "decimals"
      }), d = await i.readContract({
        address: u.address,
        abi: pc,
        functionName: "balanceOf",
        args: [e]
      });
      o[u.symbol] = {
        symbol: u.symbol,
        balance: d,
        usd: d && s[u.symbol.toLowerCase() + "_price"] ? Number(d) / 10 ** l * s[u.symbol.toLowerCase() + "_price"] : void 0,
        decimals: l,
        usd_exchange_rate: Number(s[u.symbol.toLowerCase() + "_price" || 0])
      };
    }
    return o;
  }
  /**
   * Fetch the market information for tradable markets from the Morpher API. This includes the market's current status and also current OHLC pricing for the markets.
   * @param options - The options to filter the market list.
   * @param options.type - Optional filter for market type.
   * @returns 
   */
  async getMarketList({ type: e }) {
    if (!this.rpcClient)
      throw new Error("No RPC Client");
    return (await this.rpcClient.getMarketList.query({
      type: e || "stock"
    })).markets;
  }
  /**
   * Fetch the detailed information for a specific market and the chart data for the market. This will also include the position ID if the given ETH address has an open position in the market.
   * @param options - The options for fetching market data.
   * @param options.eth_address - The user's ETH address.
   * @param options.market_id - The ID of the market to fetch data for.
   * @returns 
   */
  async getMarketData({
    eth_address: e,
    market_id: t
  }) {
    if (!this.rpcClient)
      throw new Error("No RPC Client");
    if (e && t)
      return await this.rpcClient.getMarketData.query({
        eth_address: e,
        market_id: t
      });
  }
  /**
   * Fetch a list of orders for a specific ETH address. Can also fetch a specific order by ID or `tx_hash`, or all orders for a specific market for a user.
   * @param options - The options for fetching orders.
   * @param options.eth_address - The user's ETH address.
   * @param options.tx_hash - Optional transaction hash to fetch a specific order.
   * @param options.order_id - Optional order ID to fetch a specific order.
   * @param options.market_id - Optional market ID to fetch all orders for a specific market.
   * @returns 
   */
  async getOrders({
    eth_address: e,
    tx_hash: t,
    order_id: r,
    market_id: i
  }) {
    if (!this.rpcClient)
      throw new Error("No RPC Client");
    return await this.rpcClient.getOrders.query({
      eth_address: e,
      tx_hash: t,
      order_id: r,
      market_id: i
    });
  }
  /**
   * Fetch a list of trending markets from the Morpher API.
   * @returns 
   */
  async getTrendingMarkets() {
    if (!this.rpcClient)
      throw new Error("No RPC Client");
    return await this.rpcClient.getTrendingMarkets.query();
  }
  /**
   * Get the portfolio details for a given ETH address.
   * @param options - The options for fetching the portfolio.
   * @param options.eth_address - The user's ETH address.
   * @returns 
   */
  async getPortfolio({
    eth_address: e
  }) {
    if (!this.rpcClient)
      throw new Error("No RPC Client");
    return await this.rpcClient.getPortfolio.query({
      eth_address: e
    });
  }
  /**
   * Fetch all the open positions for a given ETH address.
   * @param options - The options for fetching positions.
   * @param options.eth_address - The user's ETH address.
   * @param options.market_id - Optional market ID to fetch a specific position.
   * @param options.position_id - Optional position ID to fetch a specific position.
   * @returns 
   */
  async getPositions({
    eth_address: e,
    market_id: t,
    position_id: r
  }) {
    if (!this.rpcClient)
      throw new Error("No RPC Client");
    return await this.rpcClient.getPositions.query({
      eth_address: e,
      market_id: t,
      position_id: r
    });
  }
  /**
   * Fetch the returns breakdown for a specific user. Used for showing portfolio charts or calculating returns over a specific period.
   * @param options - The options for fetching returns.
   * @param options.eth_address - The user's ETH address.
   * @param options.type - The period to fetch returns for ('d', 'w', 'm', 'y').
   * @returns 
   */
  async getReturns({
    eth_address: e,
    type: t
  }) {
    if (!this.rpcClient)
      throw new Error("No RPC Client");
    return await this.rpcClient.getReturns.query({
      eth_address: e,
      type: t
    });
  }
  /**
   * Fetch the leaderboard information to show where the given ETH address is on the leaderboards and the top users on each leaderboard. The leaderboards are separated by app, i.e., each app has its own leaderboards.
   * @param options - The options for fetching the leaderboard.
   * @param options.type - The type of leaderboard ('order' or 'returns').
   * @param options.eth_address - The user's ETH address.
   * @param options.app - The application identifier.
   * @returns 
   */
  async getLeaderboard({
    type: e,
    eth_address: t,
    app: r
  }) {
    if (!this.rpcClient)
      throw new Error("No RPC Client");
    return await this.rpcClient.getLeaderboard.query({
      type: e,
      eth_address: t,
      app: r
    });
  }
  /**
   * Retrieve the application-specific context for the given ETH address.
   * @param options - The options for fetching the context.
   * @param options.eth_address - The user's ETH address.
   * @param options.app - The application identifier.
   * @returns 
   */
  async getContext({
    eth_address: e,
    app: t
  }) {
    if (!this.rpcClient)
      throw new Error("No RPC Client");
    return await this.rpcClient.getContext.query({
      eth_address: e,
      app: t
    });
  }
  /**
   * Link application-specific context to an ETH address. This will link the local username, ID, etc., to an ETH address for display on leaderboards etc.
   * The context does not need to be set by an application if the users should remain completely anonymous - this will only be used for social interactions.
   * @param options - The context data to set.
   * @param options.eth_address - The user's ETH address.
   * @param options.id - The application-specific user ID.
   * @param options.app - The application identifier.
   * @param options.user_name - Optional username.
   * @param options.display_name - Optional display name.
   * @param options.profile_image - Optional URL to a profile image.
   * @returns 
   */
  async setContext({
    eth_address: e,
    id: t,
    app: r,
    user_name: i,
    display_name: s,
    profile_image: a
  }) {
    if (!this.rpcClient)
      throw new Error("No RPC Client");
    return await this.rpcClient.setContext.mutate({
      eth_address: e,
      id: t,
      app: r,
      user_name: i,
      display_name: s,
      profile_image: a
    });
  }
  /**
   * Unsubscribe from the pricing updates for a specific market. 
   * This should be done any time the subscription is no longer required or the pricing is not visible on the fronten
   * @param market_id 
   * @param callback 
   */
  unsubscribeFromMarket(e) {
    this.marketSubscriptions[e] && (this.marketSubscriptions[e](), delete this.marketSubscriptions[e]);
  }
  /**
   * Subscribe to pricing updates for a specific market.
   * @param market_id 
   * @param callback 
   */
  subscribeToMarket(e, t) {
    const r = g0({
      url: this.clientURLWs,
      retryAttempts: 1 / 0,
      shouldRetry: () => !0,
      keepAlive: 1e4
    });
    this.marketSubscriptions[e] && (this.marketSubscriptions[e](), delete this.marketSubscriptions[e]), this.marketSubscriptions[e] = r.subscribe(
      {
        query: `  subscription marketDataV2($market_id: String) {
          marketDataV2(market_id: $market_id)
        }`,
        variables: { market_id: e }
      },
      {
        next: (i) => {
          var s;
          t((s = i == null ? void 0 : i.data) == null ? void 0 : s.marketDataV2);
        },
        error: (i) => {
          console.log("err", i);
        },
        complete: () => {
        }
      }
    );
  }
  /**
   * Subscribe to order execution updates for a specific ETH address. Used to see when an order executes, as this could be some time after it is initially placed.
   * @param eth_address 
   * @param callback 
   * @returns 
   */
  subscribeToOrder(e, t) {
    const r = g0({
      url: this.clientURLWs,
      retryAttempts: 1 / 0,
      shouldRetry: () => !0,
      keepAlive: 1e4
    });
    this.unsubscribeFromOrder && this.unsubscribeFromOrder(), e && (this.unsubscribeFromOrder = r.subscribe(
      {
        query: `  subscription orderExecutionV2($eth_address: String) {
          orderExecutionV2(eth_address: $eth_address)
        }`,
        variables: { eth_address: e }
      },
      {
        next: (i) => {
          var s;
          t((s = i == null ? void 0 : i.data) == null ? void 0 : s.orderExecutionV2);
        },
        error: (i) => {
          console.log("err", i);
        },
        complete: () => {
        }
      }
    ));
  }
  /**
   * Cancel a pending order that is still awaiting execution. Pending open orders place the user's tokens in escrow, so the order needs to be cancelled to release the tokens if the user no longer wants to execute the trade.
   * @param options - The options for cancelling an order.
   * @param options.account - The user's account object.
   * @param options.walletClient - The viem wallet client.
   * @param options.publicClient - The viem public client.
   * @param options.order_id - The ID of the order to cancel.
   * @param options.market_id - The ID of the market the order is for.
   * @param options.callback - Optional callback function for trade results.
   * @returns 
   */
  async cancelOrder({
    account: e,
    walletClient: t,
    publicClient: r,
    order_id: i,
    market_id: s,
    callback: a
  }) {
    if (!this.rpcClient)
      throw new Error("No RPC Client");
    if (!this.oracleAddress) {
      a && a({ result: "error", err: "SDK not ready", error_code: "SDK_NOT_READY" });
      return;
    }
    let o = await r.getBalance({ address: e.address }), c = !1;
    if (o < 8 * 10 ** 12 && (c = !0), c) {
      let u = 0;
      try {
        const d = await this.rpcClient.getPositionValue.query({
          eth_address: e.address,
          market_id: s
        });
        u = (d == null ? void 0 : d.timestamp) || 0;
      } catch {
        u = Date.now();
      }
      (!u || u == 0) && (u = Date.now());
      const l = await H4(
        t,
        r,
        e,
        this.oracleAddress || "0x",
        this.bundler || "",
        this.paymaster || "",
        i,
        u
      );
      a && a({ result: "success", callback_result: l });
      return;
    } else {
      const u = await $4(
        t,
        r,
        e,
        this.oracleAddress || "0x",
        i
      );
      a && a({ result: "success", callback_result: u });
      return;
    }
  }
  /**
  * Open a new position on a market or extend an existing position. If a position already exists, then you can only extend in the same direction.
  * i.e., if you have a long position, you can't execute a short trade on the same market.
  * You cannot execute any trades on a market that already has a pending trade - the pending trade must be cancelled first.
  * @param options - The options for opening a position.
  * @param options.account - The user's account object.
  * @param options.walletClient - The viem wallet client.
  * @param options.publicClient - The viem public client.
  * @param options.market_id - The ID of the market to open a position on.
  * @param options.currency - The currency to use for the trade ('MPH', 'USDC' or 'ETH').
  * @param options.direction - The direction of the trade ('long' or 'short').
  * @param options.leverage - The leverage to use for the trade.
  * @param options.tradeAmount - The amount of the specidied currency to trade. For USDC or Eth the currency is converted to MPH as part of the trade execution.
  * @param options.callback - Optional callback function for trade results. This callback will only show that the order was created. the orderSubscription is required to see when the trade is actually executed and the position is created. This could be a much later for stock markets that are only ticking durin market hours. Between order ceation and execution there is a pending order and the MPH that was sent for the order is in escrow. The pending order must be cancelled if the order is no longer required and tokens are to be returned to the users account.
  * @returns 
  */
  async openPosition({
    account: e,
    walletClient: t,
    publicClient: r,
    market_id: i,
    currency: s,
    direction: a,
    tradeAmount: o,
    leverage: c,
    callback: u
  }) {
    if (!this.rpcClient)
      throw new Error("No RPC Client");
    if (!this.oracleAddress) {
      u && u({ result: "error", err: "SDK not ready", error_code: "SDK_NOT_READY" });
      return;
    }
    if (!o || o <= 0n) {
      this.orderCreating = !1, u && u({
        result: "error",
        err: "No trade amount was specified",
        error_code: "INVALID_TRADE_AMOUNT"
      });
      return;
    }
    await this.executeTrade({
      account: e,
      walletClient: t,
      publicClient: r,
      market_id: i,
      currency: s,
      direction: a,
      tradeAmount: o,
      leverage: c,
      callback: u
    });
  }
  /**
  * Add a Stop-Loss or Take-Profit protection order on a market where you have a current open position.
  * You cannot add a protection order to a market that already has a pending trade (open or close) - the pending trade must be cancelled first.
  * For a long/buy position, `priceAbove` is specified for a Take-Profit limit order and `priceBelow` is specified for a Stop-Loss limit order. Both can be specified to create both protection orders at the same time.
  * For a short/sell position, `priceBelow` is specified for a Take-Profit limit order and `priceAbove` is specified for a Stop-Loss limit order. Both can be specified to create both protection orders at the same time.
  * @param options - The options for setting SL/TP.
  * @param options.account - The user's account object.
  * @param options.walletClient - The viem wallet client.
  * @param options.publicClient - The viem public client.
  * @param options.market_id - The ID of the market to set the SL/TP on.
  * @param options.priceAbove - The take-profit price (for long) or stop-loss price (for short).
  * @param options.priceBelow - The stop-loss price (for long) or take-profit price (for short).
  * @param options.callback - Optional callback function for trade results.
  * @returns 
  */
  async setSLTP({
    account: e,
    walletClient: t,
    publicClient: r,
    market_id: i,
    priceAbove: s,
    priceBelow: a,
    callback: o
  }) {
    if (!this.rpcClient)
      throw new Error("No RPC Client");
    if (!this.oracleAddress) {
      o && o({ result: "error", err: "SDK not ready", error_code: "SDK_NOT_READY" });
      return;
    }
    if (s || (s = 0), a || (a = 0), s == 0 && a == 0) {
      this.orderCreating = !1, o && o({
        result: "error",
        err: "No limit price was specified. Please specify a priceAbove or priceBelow",
        error_code: "INVALID_LIMIT_PRICE"
      });
      return;
    }
    await this.executeTrade({
      account: e,
      walletClient: t,
      publicClient: r,
      market_id: i,
      currency: "MPH",
      direction: "short",
      leverage: 1,
      priceAbove: s,
      priceBelow: a,
      callback: o
    });
  }
  /**
   * Execute a closing trade on a market where you have a current open position.
   * You cannot close a position on a market that already has a pending trade (open or close) - the pending trade must be cancelled first.
   * @param options - The options for closing a position.
   * @param options.account - The user's account object.
   * @param options.walletClient - The viem wallet client.
   * @param options.publicClient - The viem public client.
   * @param options.market_id - The ID of the market to close the position on.
   * @param options.closePercentage - The percentage of the position to close (1-100) if 100 then the position will be fully closed otherwise the close shares are calculated based on the percentage and the remaining shares will be left on an open position after the close order executes.
   * @param options.callback - Optional callback function for trade results.
   * @returns 
   */
  async closePosition({
    account: e,
    walletClient: t,
    publicClient: r,
    market_id: i,
    closePercentage: s,
    callback: a
  }) {
    if (!this.rpcClient)
      throw new Error("No RPC Client");
    if (!this.oracleAddress) {
      a && a({ result: "error", err: "SDK not ready", error_code: "SDK_NOT_READY" });
      return;
    }
    if (!s) {
      this.orderCreating = !1, a && a({
        result: "error",
        err: "No close percentage specified",
        error_code: "INVALID_CLOSE_PERCENTAGE"
      });
      return;
    }
    if (Number(s) < 0) {
      this.orderCreating = !1, a && a({
        result: "error",
        err: "Close percentage cannot be negative",
        error_code: "INVALID_CLOSE_PERCENTAGE"
      });
      return;
    }
    if (Number(s) > 100) {
      this.orderCreating = !1, a && a({
        result: "error",
        err: "Close percentage cannot be more than 100",
        error_code: "INVALID_CLOSE_PERCENTAGE"
      });
      return;
    }
    await this.executeTrade({
      account: e,
      walletClient: t,
      publicClient: r,
      market_id: i,
      currency: "MPH",
      direction: "short",
      leverage: 1,
      closePercentage: s,
      callback: a
    });
  }
  /**
   * Internal function to execute a trade.
   * This function contains all the trading logic and calls the correct contract functions based on the specific trade type, currency, and gas status of the user.
   * @param options - The options for executing a trade.
   * @param options.account - The user's account object.
   * @param options.walletClient - The viem wallet client.
   * @param options.publicClient - The viem public client.
   * @param options.market_id - The ID of the market.
   * @param options.currency - The currency for the trade.
   * @param options.direction - The direction of the trade.
   * @param options.tradeAmount - The amount to trade.
   * @param options.leverage - The leverage for the trade.
   * @param options.priceAbove - The take-profit/stop-loss price above the current price.
   * @param options.priceBelow - The take-profit/stop-loss price below the current price.
   * @param options.closePercentage - The percentage of the position to close.
   * @param options.callback - Optional callback function for trade results.
   * @returns 
   */
  async executeTrade({
    account: e,
    walletClient: t,
    publicClient: r,
    market_id: i,
    currency: s,
    direction: a,
    tradeAmount: o,
    leverage: c,
    priceAbove: u,
    priceBelow: l,
    closePercentage: d,
    callback: f
  }) {
    if (d || (d = 0), o || (o = BigInt(0)), !this.rpcClient)
      throw new Error("No RPC Client");
    if (!this.oracleAddress) {
      f && f({ result: "error", err: "SDK not ready", error_code: "SDK_NOT_READY" });
      return;
    }
    let p;
    try {
      p = await this.rpcClient.getPositionValue.query({
        eth_address: e.address,
        market_id: i
      }), Number(p.long_shares) == 0 && Number(p.short_shares) == 0 && (p = void 0);
    } catch (R) {
      console.log("ERROR", R), this.orderCreating = !1, f && f({
        result: "error",
        err: "Error Fetching Market-Position - " + lr(R),
        error_code: lr(R)
      });
      return;
    }
    if (o && Number(o) < 0) {
      this.orderCreating = !1, f && f({ result: "error", err: "Trade amount cannot be negative", error_code: "INVALID_TRADE_AMOUNT" });
      return;
    }
    if (d && Number(d) < 0) {
      this.orderCreating = !1, f && f({
        result: "error",
        err: "Close percentage cannot be negative",
        error_code: "INVALID_CLOSE_PERCENTAGE"
      });
      return;
    }
    if ((!o || Number(o) == 0) && (!d || Number(d) == 0)) {
      this.orderCreating = !1, f && f({
        result: "error",
        err: "Must specify either a tradeAmount or a closePercentage",
        error_code: "INVALID_TRADE_AMOUNT"
      });
      return;
    }
    if (o && Number(o) > 0 && d && Number(d) > 0) {
      this.orderCreating = !1, f && f({
        result: "error",
        err: "You cannot specify both a tradeAmount and a closePercentage together",
        error_code: "INVALID_TRADE_AMOUNT"
      });
      return;
    }
    let y = await r.getBalance({
      address: e.address
    });
    if (o && Number(o) > 0) {
      let R = 0n;
      if (s === "ETH")
        R = y - BigInt(10 ** 12), R < 0n && (R = 0n);
      else if (s === "USDC") {
        if (!this.usdcAddress) {
          f && f({
            result: "error",
            err: "No eth address was set ",
            error_code: "MISSING_ADDRESSES"
          });
          return;
        }
        R = await r.readContract({
          address: this.usdcAddress,
          abi: pc,
          functionName: "balanceOf",
          args: [e.address]
        });
      } else {
        if (!this.tokenAddress) {
          f && f({
            result: "error",
            err: "No eth address was set ",
            error_code: "MISSING_ADDRESSES"
          });
          return;
        }
        R = await r.readContract({
          address: this.tokenAddress,
          abi: pc,
          functionName: "balanceOf",
          args: [e.address]
        });
      }
      if (R == 0n) {
        f && f({
          result: "error",
          err: `You do not have enough ${s} to process this order. `,
          error_code: "BALANCE_TOO_LOW"
        });
        return;
      }
      o > R && (o = R);
    }
    let h = !1;
    (u && u > 0 || l && l > 0) && (h = !0);
    let b = !0;
    if (o && o > 0 && p && p.long_shares + p.short_shares > 0 && (a === "long" && p.direction === "short" && (b = !1), a === "short" && p.direction === "long" && (b = !1)), !b) {
      this.orderCreating = !1, f && f({
        result: "error",
        err: "You cannot trade in the opposite direction to an existing position. PLease close the existing position first. ",
        error_code: "TRADE_DIRECTION_ERROR"
      });
      return;
    }
    if (this.orderCreating) {
      f && f({
        result: "error",
        err: "An order is already executing. Can only execute one order at a time ",
        error_code: "UNPROCESSED_DELAYED_ORDER"
      });
      return;
    }
    this.orderCreating = !0, this.orderCreatingTimeout && (clearTimeout(this.orderCreatingTimeout), this.orderCreatingTimeout = void 0), this.orderCreatingTimeout = setTimeout(() => {
      this.orderCreatingTimeout = void 0, this.orderCreating = !1;
    }, 5e3);
    let x = Number(o);
    x || (x = 0);
    let w = "0";
    if (h && p)
      x = 0, p.direction === "long" ? w = String(p.long_shares) : p.direction === "short" && (w = String(p.short_shares));
    else if (d && (d || 0) > 0 && p) {
      if ((d || 0) > 100)
        return;
      p.direction === "long" ? w = (BigInt(p.long_shares) * BigInt(d || 0) / BigInt(100)).toString() : p.direction === "short" && (w = (BigInt(p.short_shares) * BigInt(d || 0) / BigInt(100)).toString());
    }
    if ((!x || x <= 0) && (!w || Number(w) <= 0)) {
      this.orderCreating = !1, f && f({
        result: "error",
        err: "Somehting went wrong. Could not resolve a open trade amount or a close shares amount from the parameters provided.",
        error_code: "INVALID_TRADE_AMOUNT"
      });
      return;
    }
    const E = D4(i);
    this.orderCreating = !1;
    let N = (p == null ? void 0 : p.timestamp) || 0;
    const I = U4(
      await r.readContract({
        address: this.stateAddress || "0x",
        abi: WA,
        functionName: "getPosition",
        args: [e.address, E]
      })
    );
    I && p && !p.error ? (Number(p.long_shares || 0) !== Number(I._longShares) || Number(p.short_shares || 0) !== Number(I._shortShares)) && (this.orderCreating = !1, f && f({ result: "error", err: "Position contract mismatch.", error_code: "POSITION_CONTRACT_MISMATCH" })) : p && (Number(p.long_shares) !== 0 || Number(p.short_shares) !== 0) && (this.orderCreating = !1, f && f({ result: "error", err: "Position contract mismatch.", error_code: "POSITION_CONTRACT_MISMATCH" }));
    let B = BigInt(
      Math.round((u || 0) * 10 ** 8)
    ).toString(), U = BigInt(
      Math.round((l || 0) * 10 ** 8)
    ).toString();
    if (Number(u) < 0 && (u = 0), Number(l) < 0 && (l = 0), h)
      try {
        let R = await this.rpcClient.getPositionSplitValue.query({
          eth_address: e.address,
          market_id: i,
          price_above: BigInt(
            Math.round((u || 0) * 1e8)
          ).toString(),
          price_below: BigInt(
            Math.round((l || 0) * 1e8)
          ).toString()
        });
        (!R.price_above || !R.price_below) && (this.orderCreating = !1, f && f({ result: "error", err: "Position Contract Mismatch", error_code: "POSITION_CONTRACT_MISMATCH" })), B = R.price_above, U = R.price_below;
      } catch {
        this.orderCreating = !1, f && f({
          result: "error",
          err: "Error fetching position split data",
          error_code: "MARKET_SPLIT"
        });
      }
    const C = 0, v = 0;
    this.transactionNumber += 1;
    const L = Date.now(), O = {
      market: E,
      close_shares_amount: String(w),
      open_mph_token_amount: BigInt(x).toString(),
      direction: a === "long",
      leverage: BigInt(Math.round(c * 10 ** 8)).toString(),
      priceAbove: h ? B : "0",
      priceBelow: h ? U : "0",
      good_until: C,
      good_from: v
    };
    try {
      if (!h && (!B || B == "0") && (!U || U == "0") && w && String(w) !== "0") {
        const M = BigInt(String(w));
        p || (this.orderCreating = !1, f && f({ result: "error", err: "POSITION_CONTRACT_MISMATCH", error_code: "POSITION_CONTRACT_MISMATCH" }));
        const P = BigInt(
          String(p.long_shares) || "0"
        ), S = BigInt(
          String(p.short_shares) || "0"
        );
        P + S < M && (this.orderCreating = !1, f && f({ result: "error", err: "POSITION_CONTRACT_MISMATCH", error_code: "POSITION_CONTRACT_MISMATCH" }));
      }
      let R = !1;
      y < 8 * 10 ** 12 && (R = !0);
      let F = setTimeout(() => {
        this.orderCreating = !1, f && f({
          result: "error",
          err: "Something went wrong - ORder creation timeout.",
          error_code: "ORDER_TIMEOUT"
        });
      }, 15e3);
      s !== "MPH" ? s == "ETH" ? await F4(
        t,
        r,
        e,
        this.oracleAddress || "0x",
        E,
        String(w),
        x,
        a === "long",
        BigInt(Math.round(c * 10 ** 8)).toString(),
        h ? B : "0",
        h ? U : "0",
        C,
        v,
        F,
        L,
        O
      ) : R ? await q4(
        t,
        r,
        e,
        this.oracleAddress || "0x",
        this.usdcAddress || "0x",
        this.bundler || "",
        this.paymaster || "",
        E,
        String(w),
        x,
        a === "long",
        BigInt(Math.round(c * 10 ** 8)).toString(),
        h ? B : "0",
        h ? U : "0",
        C,
        v,
        F,
        L,
        O,
        N
      ) : await W4(
        t,
        r,
        e,
        this.oracleAddress || "0x",
        this.usdcAddress || "0x",
        this.tokenAddress || "0x",
        (p == null ? void 0 : p.value) || 0n,
        E,
        String(w),
        x,
        a === "long",
        BigInt(Math.round(c * 10 ** 8)).toString(),
        h ? B : "0",
        h ? U : "0",
        C,
        v,
        F,
        L,
        O
      ) : R ? await j4(
        t,
        r,
        e,
        this.oracleAddress || "0x",
        this.bundler || "",
        this.paymaster || "",
        E,
        String(w),
        BigInt(Number(x)).toString(),
        a === "long",
        BigInt(Math.round(c * 10 ** 8)).toString(),
        h ? B : "0",
        h ? U : "0",
        C,
        v,
        F,
        L,
        O,
        N
      ) : await V4(
        t,
        r,
        e,
        this.oracleAddress || "0x",
        E,
        String(w),
        BigInt(Number(x)).toString(),
        a === "long",
        BigInt(Math.round(c * 10 ** 8)).toString(),
        h ? B : "0",
        h ? U : "0",
        C,
        v,
        F,
        L,
        O
      ), f && f({
        result: "success"
      });
    } catch (R) {
      this.orderCreating = !1, f && f({
        result: "error",
        err: `Error executing order: ${lr(R)}`,
        error_code: "EXECUTION_ERROR"
      });
    }
  }
}
const uT = (n) => parseFloat(n || 0).toFixed(2), lT = (n) => {
  let e = parseFloat(n);
  const t = Math.abs(e);
  let r = 0;
  return 1e4 > t && t >= 10 ? r = 2 : 10 > t && t >= 1 ? r = 3 : 1 > t && t >= 0.1 ? r = 4 : 0.1 > t && t >= 0.01 ? r = 5 : 0.01 > t && t >= 1e-3 ? r = 6 : 1e-3 > t && t >= 1e-4 ? r = 7 : 1e-4 > t && t >= 1e-5 ? r = 8 : 1e-5 > t && (r = 9), r > 0 && (e = Math.floor(e * 10 ** r) / 10 ** r), e ? e.toFixed(r) : "0";
};
export {
  X4 as A,
  j as B,
  rT as H,
  s1 as I,
  cT as M,
  Z4 as a,
  Y4 as b,
  Bu as c,
  _u as d,
  hf as e,
  dr as f,
  qo as g,
  Jc as h,
  t1 as i,
  sT as j,
  aw as k,
  By as l,
  mo as m,
  ww as n,
  E6 as o,
  im as p,
  ba as q,
  Jr as r,
  Zc as s,
  xf as t,
  uT as u,
  lT as v
};
